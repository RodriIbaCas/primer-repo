
IMU_interface_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b34  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08006dd4  08006dd4  00016dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006eb0  08006eb0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006eb0  08006eb0  00016eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006eb8  08006eb8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006eb8  08006eb8  00016eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ebc  08006ebc  00016ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08006ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  24000074  08006f34  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240001c0  08006f34  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001273f  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002190  00000000  00000000  000327e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00034978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  00035690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039f12  00000000  00000000  000362e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d36  00000000  00000000  000701f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017d49a  00000000  00000000  00080f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001fe3c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003de4  00000000  00000000  001fe414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006dbc 	.word	0x08006dbc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08006dbc 	.word	0x08006dbc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d013      	beq.n	80007f0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80007c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80007d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d00b      	beq.n	80007f0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80007d8:	e000      	b.n	80007dc <ITM_SendChar+0x2c>
    {
      __NOP();
 80007da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80007dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d0f9      	beq.n	80007da <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80007e6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80007f0:	687b      	ldr	r3, [r7, #4]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
	...

08000800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000806:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800080a:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800080c:	bf00      	nop
 800080e:	4b2d      	ldr	r3, [pc, #180]	; (80008c4 <main+0xc4>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000816:	2b00      	cmp	r3, #0
 8000818:	d004      	beq.n	8000824 <main+0x24>
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	617a      	str	r2, [r7, #20]
 8000820:	2b00      	cmp	r3, #0
 8000822:	dcf4      	bgt.n	800080e <main+0xe>
  if ( timeout < 0 )
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	2b00      	cmp	r3, #0
 8000828:	da01      	bge.n	800082e <main+0x2e>
  {
  Error_Handler();
 800082a:	f000 fa63 	bl	8000cf4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082e:	f000 fc27 	bl	8001080 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000832:	f000 f84d 	bl	80008d0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000836:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <main+0xc4>)
 8000838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800083c:	4a21      	ldr	r2, [pc, #132]	; (80008c4 <main+0xc4>)
 800083e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000842:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000846:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <main+0xc4>)
 8000848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */

/*Release HSEM in order to notify the CPU2(CM4)*/

/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000854:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000858:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800085a:	bf00      	nop
 800085c:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <main+0xc4>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000864:	2b00      	cmp	r3, #0
 8000866:	d104      	bne.n	8000872 <main+0x72>
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	1e5a      	subs	r2, r3, #1
 800086c:	617a      	str	r2, [r7, #20]
 800086e:	2b00      	cmp	r3, #0
 8000870:	dcf4      	bgt.n	800085c <main+0x5c>
if ( timeout < 0 )
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	2b00      	cmp	r3, #0
 8000876:	da01      	bge.n	800087c <main+0x7c>
{
Error_Handler();
 8000878:	f000 fa3c 	bl	8000cf4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087c:	f000 f948 	bl	8000b10 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000880:	f000 f8fa 	bl	8000a78 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000884:	f000 f8a0 	bl	80009c8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  int16_t accel_data;
  uint8_t imu_data[14];
  mpu9250_write_reg(28, 0x08);
 8000888:	2108      	movs	r1, #8
 800088a:	201c      	movs	r0, #28
 800088c:	f000 f9c2 	bl	8000c14 <mpu9250_write_reg>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)

  {
	  printf("A\n\r");
 8000890:	480d      	ldr	r0, [pc, #52]	; (80008c8 <main+0xc8>)
 8000892:	f005 fb05 	bl	8005ea0 <iprintf>
	  mpu9250_read_reg(59, imu_data, sizeof(imu_data));
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	220e      	movs	r2, #14
 800089a:	4619      	mov	r1, r3
 800089c:	203b      	movs	r0, #59	; 0x3b
 800089e:	f000 f9df 	bl	8000c60 <mpu9250_read_reg>
      accel_data = ((int16_t)imu_data[0]<<8) + imu_data[1];
 80008a2:	793b      	ldrb	r3, [r7, #4]
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	021b      	lsls	r3, r3, #8
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	797b      	ldrb	r3, [r7, #5]
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	4413      	add	r3, r2
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	827b      	strh	r3, [r7, #18]
      printf("%d\n\r",accel_data);
 80008b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80008b8:	4619      	mov	r1, r3
 80008ba:	4804      	ldr	r0, [pc, #16]	; (80008cc <main+0xcc>)
 80008bc:	f005 faf0 	bl	8005ea0 <iprintf>
	  printf("A\n\r");
 80008c0:	e7e6      	b.n	8000890 <main+0x90>
 80008c2:	bf00      	nop
 80008c4:	58024400 	.word	0x58024400
 80008c8:	08006dd4 	.word	0x08006dd4
 80008cc:	08006dd8 	.word	0x08006dd8

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b09c      	sub	sp, #112	; 0x70
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008da:	224c      	movs	r2, #76	; 0x4c
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f005 fad6 	bl	8005e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2220      	movs	r2, #32
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f005 fad0 	bl	8005e90 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008f0:	2004      	movs	r0, #4
 80008f2:	f000 ff11 	bl	8001718 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008f6:	2300      	movs	r3, #0
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	4b31      	ldr	r3, [pc, #196]	; (80009c0 <SystemClock_Config+0xf0>)
 80008fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008fe:	4a30      	ldr	r2, [pc, #192]	; (80009c0 <SystemClock_Config+0xf0>)
 8000900:	f023 0301 	bic.w	r3, r3, #1
 8000904:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000906:	4b2e      	ldr	r3, [pc, #184]	; (80009c0 <SystemClock_Config+0xf0>)
 8000908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	4b2c      	ldr	r3, [pc, #176]	; (80009c4 <SystemClock_Config+0xf4>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000918:	4a2a      	ldr	r2, [pc, #168]	; (80009c4 <SystemClock_Config+0xf4>)
 800091a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b28      	ldr	r3, [pc, #160]	; (80009c4 <SystemClock_Config+0xf4>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800092c:	bf00      	nop
 800092e:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <SystemClock_Config+0xf4>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800093a:	d1f8      	bne.n	800092e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800093c:	2301      	movs	r3, #1
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000940:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000946:	2302      	movs	r3, #2
 8000948:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800094a:	2302      	movs	r3, #2
 800094c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800094e:	2301      	movs	r3, #1
 8000950:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000952:	2312      	movs	r3, #18
 8000954:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000956:	2302      	movs	r3, #2
 8000958:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800095a:	2302      	movs	r3, #2
 800095c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800095e:	2302      	movs	r3, #2
 8000960:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000962:	230c      	movs	r3, #12
 8000964:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000966:	2302      	movs	r3, #2
 8000968:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800096a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800096e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000974:	4618      	mov	r0, r3
 8000976:	f000 ff29 	bl	80017cc <HAL_RCC_OscConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000980:	f000 f9b8 	bl	8000cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000984:	233f      	movs	r3, #63	; 0x3f
 8000986:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000988:	2303      	movs	r3, #3
 800098a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000998:	2340      	movs	r3, #64	; 0x40
 800099a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2101      	movs	r1, #1
 80009a8:	4618      	mov	r0, r3
 80009aa:	f001 fb3d 	bl	8002028 <HAL_RCC_ClockConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80009b4:	f000 f99e 	bl	8000cf4 <Error_Handler>
  }
}
 80009b8:	bf00      	nop
 80009ba:	3770      	adds	r7, #112	; 0x70
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	58000400 	.word	0x58000400
 80009c4:	58024800 	.word	0x58024800

080009c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009cc:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <MX_SPI1_Init+0xa8>)
 80009ce:	4a29      	ldr	r2, [pc, #164]	; (8000a74 <MX_SPI1_Init+0xac>)
 80009d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009d2:	4b27      	ldr	r3, [pc, #156]	; (8000a70 <MX_SPI1_Init+0xa8>)
 80009d4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009da:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <MX_SPI1_Init+0xa8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009e0:	4b23      	ldr	r3, [pc, #140]	; (8000a70 <MX_SPI1_Init+0xa8>)
 80009e2:	2203      	movs	r2, #3
 80009e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80009e6:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <MX_SPI1_Init+0xa8>)
 80009e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80009ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80009ee:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <MX_SPI1_Init+0xa8>)
 80009f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80009f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009f6:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <MX_SPI1_Init+0xa8>)
 80009f8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80009fe:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <MX_SPI1_Init+0xa8>)
 8000a00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <MX_SPI1_Init+0xa8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_SPI1_Init+0xa8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <MX_SPI1_Init+0xa8>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000a18:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <MX_SPI1_Init+0xa8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_SPI1_Init+0xa8>)
 8000a20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a24:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_SPI1_Init+0xa8>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a2c:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <MX_SPI1_Init+0xa8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_SPI1_Init+0xa8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a38:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <MX_SPI1_Init+0xa8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_SPI1_Init+0xa8>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <MX_SPI1_Init+0xa8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_SPI1_Init+0xa8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <MX_SPI1_Init+0xa8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_SPI1_Init+0xa8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <MX_SPI1_Init+0xa8>)
 8000a5e:	f003 f9d7 	bl	8003e10 <HAL_SPI_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8000a68:	f000 f944 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	24000090 	.word	0x24000090
 8000a74:	40013000 	.word	0x40013000

08000a78 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000a7e:	4a23      	ldr	r2, [pc, #140]	; (8000b0c <MX_USART3_UART_Init+0x94>)
 8000a80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000a84:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8a:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a90:	4b1d      	ldr	r3, [pc, #116]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a96:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa2:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aae:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aba:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ac0:	4811      	ldr	r0, [pc, #68]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000ac2:	f004 f94a 	bl	8004d5a <HAL_UART_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000acc:	f000 f912 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	480d      	ldr	r0, [pc, #52]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000ad4:	f005 f8e8 	bl	8005ca8 <HAL_UARTEx_SetTxFifoThreshold>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ade:	f000 f909 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4808      	ldr	r0, [pc, #32]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000ae6:	f005 f91d 	bl	8005d24 <HAL_UARTEx_SetRxFifoThreshold>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000af0:	f000 f900 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <MX_USART3_UART_Init+0x90>)
 8000af6:	f005 f89e 	bl	8005c36 <HAL_UARTEx_DisableFifoMode>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b00:	f000 f8f8 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	24000118 	.word	0x24000118
 8000b0c:	40004800 	.word	0x40004800

08000b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b26:	4b38      	ldr	r3, [pc, #224]	; (8000c08 <MX_GPIO_Init+0xf8>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2c:	4a36      	ldr	r2, [pc, #216]	; (8000c08 <MX_GPIO_Init+0xf8>)
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b36:	4b34      	ldr	r3, [pc, #208]	; (8000c08 <MX_GPIO_Init+0xf8>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3c:	f003 0304 	and.w	r3, r3, #4
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b44:	4b30      	ldr	r3, [pc, #192]	; (8000c08 <MX_GPIO_Init+0xf8>)
 8000b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4a:	4a2f      	ldr	r2, [pc, #188]	; (8000c08 <MX_GPIO_Init+0xf8>)
 8000b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b54:	4b2c      	ldr	r3, [pc, #176]	; (8000c08 <MX_GPIO_Init+0xf8>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	4b29      	ldr	r3, [pc, #164]	; (8000c08 <MX_GPIO_Init+0xf8>)
 8000b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b68:	4a27      	ldr	r2, [pc, #156]	; (8000c08 <MX_GPIO_Init+0xf8>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b72:	4b25      	ldr	r3, [pc, #148]	; (8000c08 <MX_GPIO_Init+0xf8>)
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b80:	4b21      	ldr	r3, [pc, #132]	; (8000c08 <MX_GPIO_Init+0xf8>)
 8000b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b86:	4a20      	ldr	r2, [pc, #128]	; (8000c08 <MX_GPIO_Init+0xf8>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b90:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <MX_GPIO_Init+0xf8>)
 8000b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_GPIO_Init+0xf8>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba4:	4a18      	ldr	r2, [pc, #96]	; (8000c08 <MX_GPIO_Init+0xf8>)
 8000ba6:	f043 0308 	orr.w	r3, r3, #8
 8000baa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <MX_GPIO_Init+0xf8>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb4:	f003 0308 	and.w	r3, r3, #8
 8000bb8:	603b      	str	r3, [r7, #0]
 8000bba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f244 0101 	movw	r1, #16385	; 0x4001
 8000bc2:	4812      	ldr	r0, [pc, #72]	; (8000c0c <MX_GPIO_Init+0xfc>)
 8000bc4:	f000 fd8e 	bl	80016e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480c      	ldr	r0, [pc, #48]	; (8000c10 <MX_GPIO_Init+0x100>)
 8000bde:	f000 fbd1 	bl	8001384 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000be2:	f244 0301 	movw	r3, #16385	; 0x4001
 8000be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be8:	2301      	movs	r3, #1
 8000bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4804      	ldr	r0, [pc, #16]	; (8000c0c <MX_GPIO_Init+0xfc>)
 8000bfc:	f000 fbc2 	bl	8001384 <HAL_GPIO_Init>

}
 8000c00:	bf00      	nop
 8000c02:	3728      	adds	r7, #40	; 0x28
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	58024400 	.word	0x58024400
 8000c0c:	58020400 	.word	0x58020400
 8000c10:	58020800 	.word	0x58020800

08000c14 <mpu9250_write_reg>:

/* USER CODE BEGIN 4 */
void mpu9250_write_reg(uint8_t reg, uint8_t data){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	460a      	mov	r2, r1
 8000c1e:	71fb      	strb	r3, [r7, #7]
 8000c20:	4613      	mov	r3, r2
 8000c22:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2110      	movs	r1, #16
 8000c28:	480b      	ldr	r0, [pc, #44]	; (8000c58 <mpu9250_write_reg+0x44>)
 8000c2a:	f000 fd5b 	bl	80016e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8000c2e:	1df9      	adds	r1, r7, #7
 8000c30:	2364      	movs	r3, #100	; 0x64
 8000c32:	2201      	movs	r2, #1
 8000c34:	4809      	ldr	r0, [pc, #36]	; (8000c5c <mpu9250_write_reg+0x48>)
 8000c36:	f003 f9f1 	bl	800401c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8000c3a:	1db9      	adds	r1, r7, #6
 8000c3c:	2364      	movs	r3, #100	; 0x64
 8000c3e:	2201      	movs	r2, #1
 8000c40:	4806      	ldr	r0, [pc, #24]	; (8000c5c <mpu9250_write_reg+0x48>)
 8000c42:	f003 f9eb 	bl	800401c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	2110      	movs	r1, #16
 8000c4a:	4803      	ldr	r0, [pc, #12]	; (8000c58 <mpu9250_write_reg+0x44>)
 8000c4c:	f000 fd4a 	bl	80016e4 <HAL_GPIO_WritePin>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	58020000 	.word	0x58020000
 8000c5c:	24000090 	.word	0x24000090

08000c60 <mpu9250_read_reg>:

void mpu9250_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	6039      	str	r1, [r7, #0]
 8000c6a:	71fb      	strb	r3, [r7, #7]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2110      	movs	r1, #16
 8000c7e:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <mpu9250_read_reg+0x54>)
 8000c80:	f000 fd30 	bl	80016e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 8000c84:	f107 010f 	add.w	r1, r7, #15
 8000c88:	2364      	movs	r3, #100	; 0x64
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	480a      	ldr	r0, [pc, #40]	; (8000cb8 <mpu9250_read_reg+0x58>)
 8000c8e:	f003 f9c5 	bl	800401c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, len, 100);
 8000c92:	79bb      	ldrb	r3, [r7, #6]
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	2364      	movs	r3, #100	; 0x64
 8000c98:	6839      	ldr	r1, [r7, #0]
 8000c9a:	4807      	ldr	r0, [pc, #28]	; (8000cb8 <mpu9250_read_reg+0x58>)
 8000c9c:	f003 fbb0 	bl	8004400 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2110      	movs	r1, #16
 8000ca4:	4803      	ldr	r0, [pc, #12]	; (8000cb4 <mpu9250_read_reg+0x54>)
 8000ca6:	f000 fd1d 	bl	80016e4 <HAL_GPIO_WritePin>
}
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	58020000 	.word	0x58020000
 8000cb8:	24000090 	.word	0x24000090

08000cbc <_write>:

int _write(int file, char *ptr, int len)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	e009      	b.n	8000ce2 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	1c5a      	adds	r2, r3, #1
 8000cd2:	60ba      	str	r2, [r7, #8]
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fd6a 	bl	80007b0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	dbf1      	blt.n	8000cce <_write+0x12>
	}
	return len;
 8000cea:	687b      	ldr	r3, [r7, #4]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <Error_Handler+0x8>
	...

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <HAL_MspInit+0x30>)
 8000d08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d0c:	4a08      	ldr	r2, [pc, #32]	; (8000d30 <HAL_MspInit+0x30>)
 8000d0e:	f043 0302 	orr.w	r3, r3, #2
 8000d12:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_MspInit+0x30>)
 8000d18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d1c:	f003 0302 	and.w	r3, r3, #2
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	58024400 	.word	0x58024400

08000d34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b0b8      	sub	sp, #224	; 0xe0
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	22bc      	movs	r2, #188	; 0xbc
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f005 f89b 	bl	8005e90 <memset>
  if(hspi->Instance==SPI1)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a24      	ldr	r2, [pc, #144]	; (8000df0 <HAL_SPI_MspInit+0xbc>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d141      	bne.n	8000de8 <HAL_SPI_MspInit+0xb4>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d68:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6e:	f107 0310 	add.w	r3, r7, #16
 8000d72:	4618      	mov	r0, r3
 8000d74:	f001 fce4 	bl	8002740 <HAL_RCCEx_PeriphCLKConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000d7e:	f7ff ffb9 	bl	8000cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d82:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <HAL_SPI_MspInit+0xc0>)
 8000d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d88:	4a1a      	ldr	r2, [pc, #104]	; (8000df4 <HAL_SPI_MspInit+0xc0>)
 8000d8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d8e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <HAL_SPI_MspInit+0xc0>)
 8000d94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <HAL_SPI_MspInit+0xc0>)
 8000da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da6:	4a13      	ldr	r2, [pc, #76]	; (8000df4 <HAL_SPI_MspInit+0xc0>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db0:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <HAL_SPI_MspInit+0xc0>)
 8000db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000dbe:	23e0      	movs	r3, #224	; 0xe0
 8000dc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dd6:	2305      	movs	r3, #5
 8000dd8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ddc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000de0:	4619      	mov	r1, r3
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <HAL_SPI_MspInit+0xc4>)
 8000de4:	f000 face 	bl	8001384 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000de8:	bf00      	nop
 8000dea:	37e0      	adds	r7, #224	; 0xe0
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40013000 	.word	0x40013000
 8000df4:	58024400 	.word	0x58024400
 8000df8:	58020000 	.word	0x58020000

08000dfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b0b8      	sub	sp, #224	; 0xe0
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e14:	f107 0310 	add.w	r3, r7, #16
 8000e18:	22bc      	movs	r2, #188	; 0xbc
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f005 f837 	bl	8005e90 <memset>
  if(huart->Instance==USART3)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a25      	ldr	r2, [pc, #148]	; (8000ebc <HAL_UART_MspInit+0xc0>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d142      	bne.n	8000eb2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 fc80 	bl	8002740 <HAL_RCCEx_PeriphCLKConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e46:	f7ff ff55 	bl	8000cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <HAL_UART_MspInit+0xc4>)
 8000e4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e50:	4a1b      	ldr	r2, [pc, #108]	; (8000ec0 <HAL_UART_MspInit+0xc4>)
 8000e52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <HAL_UART_MspInit+0xc4>)
 8000e5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_UART_MspInit+0xc4>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6e:	4a14      	ldr	r2, [pc, #80]	; (8000ec0 <HAL_UART_MspInit+0xc4>)
 8000e70:	f043 0308 	orr.w	r3, r3, #8
 8000e74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_UART_MspInit+0xc4>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7e:	f003 0308 	and.w	r3, r3, #8
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ea0:	2307      	movs	r3, #7
 8000ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <HAL_UART_MspInit+0xc8>)
 8000eae:	f000 fa69 	bl	8001384 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	37e0      	adds	r7, #224	; 0xe0
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40004800 	.word	0x40004800
 8000ec0:	58024400 	.word	0x58024400
 8000ec4:	58020c00 	.word	0x58020c00

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <NMI_Handler+0x4>

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <MemManage_Handler+0x4>

08000eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f14:	f000 f926 	bl	8001164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	e00a      	b.n	8000f44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f2e:	f3af 8000 	nop.w
 8000f32:	4601      	mov	r1, r0
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	1c5a      	adds	r2, r3, #1
 8000f38:	60ba      	str	r2, [r7, #8]
 8000f3a:	b2ca      	uxtb	r2, r1
 8000f3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3301      	adds	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	dbf0      	blt.n	8000f2e <_read+0x12>
	}

return len;
 8000f4c:	687b      	ldr	r3, [r7, #4]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
	return -1;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f7e:	605a      	str	r2, [r3, #4]
	return 0;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <_isatty>:

int _isatty(int file)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
	return 1;
 8000f96:	2301      	movs	r3, #1
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
	return 0;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc8:	4a14      	ldr	r2, [pc, #80]	; (800101c <_sbrk+0x5c>)
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <_sbrk+0x60>)
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <_sbrk+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d102      	bne.n	8000fe2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <_sbrk+0x64>)
 8000fde:	4a12      	ldr	r2, [pc, #72]	; (8001028 <_sbrk+0x68>)
 8000fe0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <_sbrk+0x64>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d207      	bcs.n	8001000 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff0:	f004 ff24 	bl	8005e3c <__errno>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	e009      	b.n	8001014 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <_sbrk+0x64>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	4a05      	ldr	r2, [pc, #20]	; (8001024 <_sbrk+0x64>)
 8001010:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001012:	68fb      	ldr	r3, [r7, #12]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3718      	adds	r7, #24
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	24080000 	.word	0x24080000
 8001020:	00000400 	.word	0x00000400
 8001024:	240001a8 	.word	0x240001a8
 8001028:	240001c0 	.word	0x240001c0

0800102c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800102c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001064 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001030:	f7ff fb28 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001034:	480c      	ldr	r0, [pc, #48]	; (8001068 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001036:	490d      	ldr	r1, [pc, #52]	; (800106c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001038:	4a0d      	ldr	r2, [pc, #52]	; (8001070 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800103c:	e002      	b.n	8001044 <LoopCopyDataInit>

0800103e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001042:	3304      	adds	r3, #4

08001044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001048:	d3f9      	bcc.n	800103e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800104c:	4c0a      	ldr	r4, [pc, #40]	; (8001078 <LoopFillZerobss+0x22>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001050:	e001      	b.n	8001056 <LoopFillZerobss>

08001052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001054:	3204      	adds	r2, #4

08001056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001058:	d3fb      	bcc.n	8001052 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800105a:	f004 fef5 	bl	8005e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105e:	f7ff fbcf 	bl	8000800 <main>
  bx  lr
 8001062:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001064:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001068:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800106c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001070:	08006ec0 	.word	0x08006ec0
  ldr r2, =_sbss
 8001074:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001078:	240001c0 	.word	0x240001c0

0800107c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800107c:	e7fe      	b.n	800107c <ADC3_IRQHandler>
	...

08001080 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001086:	2003      	movs	r0, #3
 8001088:	f000 f94a 	bl	8001320 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800108c:	f001 f982 	bl	8002394 <HAL_RCC_GetSysClockFreq>
 8001090:	4602      	mov	r2, r0
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <HAL_Init+0x68>)
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	0a1b      	lsrs	r3, r3, #8
 8001098:	f003 030f 	and.w	r3, r3, #15
 800109c:	4913      	ldr	r1, [pc, #76]	; (80010ec <HAL_Init+0x6c>)
 800109e:	5ccb      	ldrb	r3, [r1, r3]
 80010a0:	f003 031f 	and.w	r3, r3, #31
 80010a4:	fa22 f303 	lsr.w	r3, r2, r3
 80010a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <HAL_Init+0x68>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <HAL_Init+0x6c>)
 80010b4:	5cd3      	ldrb	r3, [r2, r3]
 80010b6:	f003 031f 	and.w	r3, r3, #31
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	fa22 f303 	lsr.w	r3, r2, r3
 80010c0:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <HAL_Init+0x70>)
 80010c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010c4:	4a0b      	ldr	r2, [pc, #44]	; (80010f4 <HAL_Init+0x74>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ca:	200f      	movs	r0, #15
 80010cc:	f000 f814 	bl	80010f8 <HAL_InitTick>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e002      	b.n	80010e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010da:	f7ff fe11 	bl	8000d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	58024400 	.word	0x58024400
 80010ec:	08006de0 	.word	0x08006de0
 80010f0:	24000004 	.word	0x24000004
 80010f4:	24000000 	.word	0x24000000

080010f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001100:	4b15      	ldr	r3, [pc, #84]	; (8001158 <HAL_InitTick+0x60>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d101      	bne.n	800110c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e021      	b.n	8001150 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <HAL_InitTick+0x64>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <HAL_InitTick+0x60>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4619      	mov	r1, r3
 8001116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111a:	fbb3 f3f1 	udiv	r3, r3, r1
 800111e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f000 f921 	bl	800136a <HAL_SYSTICK_Config>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e00e      	b.n	8001150 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b0f      	cmp	r3, #15
 8001136:	d80a      	bhi.n	800114e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001138:	2200      	movs	r2, #0
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f000 f8f9 	bl	8001336 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001144:	4a06      	ldr	r2, [pc, #24]	; (8001160 <HAL_InitTick+0x68>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	e000      	b.n	8001150 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	2400000c 	.word	0x2400000c
 800115c:	24000000 	.word	0x24000000
 8001160:	24000008 	.word	0x24000008

08001164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_IncTick+0x20>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_IncTick+0x24>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4413      	add	r3, r2
 8001174:	4a04      	ldr	r2, [pc, #16]	; (8001188 <HAL_IncTick+0x24>)
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	2400000c 	.word	0x2400000c
 8001188:	240001ac 	.word	0x240001ac

0800118c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <HAL_GetTick+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	240001ac 	.word	0x240001ac

080011a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <HAL_GetREVID+0x14>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	0c1b      	lsrs	r3, r3, #16
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	5c001000 	.word	0x5c001000

080011bc <__NVIC_SetPriorityGrouping>:
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <__NVIC_SetPriorityGrouping+0x40>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011d8:	4013      	ands	r3, r2
 80011da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <__NVIC_SetPriorityGrouping+0x44>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ea:	4a04      	ldr	r2, [pc, #16]	; (80011fc <__NVIC_SetPriorityGrouping+0x40>)
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	60d3      	str	r3, [r2, #12]
}
 80011f0:	bf00      	nop
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00
 8001200:	05fa0000 	.word	0x05fa0000

08001204 <__NVIC_GetPriorityGrouping>:
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <__NVIC_GetPriorityGrouping+0x18>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	0a1b      	lsrs	r3, r3, #8
 800120e:	f003 0307 	and.w	r3, r3, #7
}
 8001212:	4618      	mov	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <__NVIC_SetPriority>:
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800122c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001230:	2b00      	cmp	r3, #0
 8001232:	db0a      	blt.n	800124a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	b2da      	uxtb	r2, r3
 8001238:	490c      	ldr	r1, [pc, #48]	; (800126c <__NVIC_SetPriority+0x4c>)
 800123a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800123e:	0112      	lsls	r2, r2, #4
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	440b      	add	r3, r1
 8001244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001248:	e00a      	b.n	8001260 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4908      	ldr	r1, [pc, #32]	; (8001270 <__NVIC_SetPriority+0x50>)
 8001250:	88fb      	ldrh	r3, [r7, #6]
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	3b04      	subs	r3, #4
 8001258:	0112      	lsls	r2, r2, #4
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	440b      	add	r3, r1
 800125e:	761a      	strb	r2, [r3, #24]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000e100 	.word	0xe000e100
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <NVIC_EncodePriority>:
{
 8001274:	b480      	push	{r7}
 8001276:	b089      	sub	sp, #36	; 0x24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f1c3 0307 	rsb	r3, r3, #7
 800128e:	2b04      	cmp	r3, #4
 8001290:	bf28      	it	cs
 8001292:	2304      	movcs	r3, #4
 8001294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3304      	adds	r3, #4
 800129a:	2b06      	cmp	r3, #6
 800129c:	d902      	bls.n	80012a4 <NVIC_EncodePriority+0x30>
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3b03      	subs	r3, #3
 80012a2:	e000      	b.n	80012a6 <NVIC_EncodePriority+0x32>
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43da      	mvns	r2, r3
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	401a      	ands	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012bc:	f04f 31ff 	mov.w	r1, #4294967295
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	fa01 f303 	lsl.w	r3, r1, r3
 80012c6:	43d9      	mvns	r1, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	4313      	orrs	r3, r2
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3724      	adds	r7, #36	; 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <SysTick_Config>:
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012ec:	d301      	bcc.n	80012f2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80012ee:	2301      	movs	r3, #1
 80012f0:	e00f      	b.n	8001312 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f2:	4a0a      	ldr	r2, [pc, #40]	; (800131c <SysTick_Config+0x40>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fa:	210f      	movs	r1, #15
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001300:	f7ff ff8e 	bl	8001220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <SysTick_Config+0x40>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130a:	4b04      	ldr	r3, [pc, #16]	; (800131c <SysTick_Config+0x40>)
 800130c:	2207      	movs	r2, #7
 800130e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	e000e010 	.word	0xe000e010

08001320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff47 	bl	80011bc <__NVIC_SetPriorityGrouping>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001344:	f7ff ff5e 	bl	8001204 <__NVIC_GetPriorityGrouping>
 8001348:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	6978      	ldr	r0, [r7, #20]
 8001350:	f7ff ff90 	bl	8001274 <NVIC_EncodePriority>
 8001354:	4602      	mov	r2, r0
 8001356:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff5f 	bl	8001220 <__NVIC_SetPriority>
}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffb2 	bl	80012dc <SysTick_Config>
 8001378:	4603      	mov	r3, r0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001392:	4b89      	ldr	r3, [pc, #548]	; (80015b8 <HAL_GPIO_Init+0x234>)
 8001394:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001396:	e194      	b.n	80016c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	2101      	movs	r1, #1
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	fa01 f303 	lsl.w	r3, r1, r3
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f000 8186 	beq.w	80016bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d005      	beq.n	80013c8 <HAL_GPIO_Init+0x44>
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d130      	bne.n	800142a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	2203      	movs	r2, #3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	68da      	ldr	r2, [r3, #12]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013fe:	2201      	movs	r2, #1
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	f003 0201 	and.w	r2, r3, #1
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	2b03      	cmp	r3, #3
 8001434:	d017      	beq.n	8001466 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	2203      	movs	r2, #3
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d123      	bne.n	80014ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	08da      	lsrs	r2, r3, #3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3208      	adds	r2, #8
 800147a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	220f      	movs	r2, #15
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	691a      	ldr	r2, [r3, #16]
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	08da      	lsrs	r2, r3, #3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3208      	adds	r2, #8
 80014b4:	69b9      	ldr	r1, [r7, #24]
 80014b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	2203      	movs	r2, #3
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0203 	and.w	r2, r3, #3
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 80e0 	beq.w	80016bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fc:	4b2f      	ldr	r3, [pc, #188]	; (80015bc <HAL_GPIO_Init+0x238>)
 80014fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001502:	4a2e      	ldr	r2, [pc, #184]	; (80015bc <HAL_GPIO_Init+0x238>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800150c:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <HAL_GPIO_Init+0x238>)
 800150e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800151a:	4a29      	ldr	r2, [pc, #164]	; (80015c0 <HAL_GPIO_Init+0x23c>)
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	089b      	lsrs	r3, r3, #2
 8001520:	3302      	adds	r3, #2
 8001522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f003 0303 	and.w	r3, r3, #3
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	220f      	movs	r2, #15
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a20      	ldr	r2, [pc, #128]	; (80015c4 <HAL_GPIO_Init+0x240>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d052      	beq.n	80015ec <HAL_GPIO_Init+0x268>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a1f      	ldr	r2, [pc, #124]	; (80015c8 <HAL_GPIO_Init+0x244>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d031      	beq.n	80015b2 <HAL_GPIO_Init+0x22e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a1e      	ldr	r2, [pc, #120]	; (80015cc <HAL_GPIO_Init+0x248>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d02b      	beq.n	80015ae <HAL_GPIO_Init+0x22a>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a1d      	ldr	r2, [pc, #116]	; (80015d0 <HAL_GPIO_Init+0x24c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d025      	beq.n	80015aa <HAL_GPIO_Init+0x226>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a1c      	ldr	r2, [pc, #112]	; (80015d4 <HAL_GPIO_Init+0x250>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d01f      	beq.n	80015a6 <HAL_GPIO_Init+0x222>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a1b      	ldr	r2, [pc, #108]	; (80015d8 <HAL_GPIO_Init+0x254>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d019      	beq.n	80015a2 <HAL_GPIO_Init+0x21e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a1a      	ldr	r2, [pc, #104]	; (80015dc <HAL_GPIO_Init+0x258>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d013      	beq.n	800159e <HAL_GPIO_Init+0x21a>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a19      	ldr	r2, [pc, #100]	; (80015e0 <HAL_GPIO_Init+0x25c>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d00d      	beq.n	800159a <HAL_GPIO_Init+0x216>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a18      	ldr	r2, [pc, #96]	; (80015e4 <HAL_GPIO_Init+0x260>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d007      	beq.n	8001596 <HAL_GPIO_Init+0x212>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a17      	ldr	r2, [pc, #92]	; (80015e8 <HAL_GPIO_Init+0x264>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d101      	bne.n	8001592 <HAL_GPIO_Init+0x20e>
 800158e:	2309      	movs	r3, #9
 8001590:	e02d      	b.n	80015ee <HAL_GPIO_Init+0x26a>
 8001592:	230a      	movs	r3, #10
 8001594:	e02b      	b.n	80015ee <HAL_GPIO_Init+0x26a>
 8001596:	2308      	movs	r3, #8
 8001598:	e029      	b.n	80015ee <HAL_GPIO_Init+0x26a>
 800159a:	2307      	movs	r3, #7
 800159c:	e027      	b.n	80015ee <HAL_GPIO_Init+0x26a>
 800159e:	2306      	movs	r3, #6
 80015a0:	e025      	b.n	80015ee <HAL_GPIO_Init+0x26a>
 80015a2:	2305      	movs	r3, #5
 80015a4:	e023      	b.n	80015ee <HAL_GPIO_Init+0x26a>
 80015a6:	2304      	movs	r3, #4
 80015a8:	e021      	b.n	80015ee <HAL_GPIO_Init+0x26a>
 80015aa:	2303      	movs	r3, #3
 80015ac:	e01f      	b.n	80015ee <HAL_GPIO_Init+0x26a>
 80015ae:	2302      	movs	r3, #2
 80015b0:	e01d      	b.n	80015ee <HAL_GPIO_Init+0x26a>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e01b      	b.n	80015ee <HAL_GPIO_Init+0x26a>
 80015b6:	bf00      	nop
 80015b8:	58000080 	.word	0x58000080
 80015bc:	58024400 	.word	0x58024400
 80015c0:	58000400 	.word	0x58000400
 80015c4:	58020000 	.word	0x58020000
 80015c8:	58020400 	.word	0x58020400
 80015cc:	58020800 	.word	0x58020800
 80015d0:	58020c00 	.word	0x58020c00
 80015d4:	58021000 	.word	0x58021000
 80015d8:	58021400 	.word	0x58021400
 80015dc:	58021800 	.word	0x58021800
 80015e0:	58021c00 	.word	0x58021c00
 80015e4:	58022000 	.word	0x58022000
 80015e8:	58022400 	.word	0x58022400
 80015ec:	2300      	movs	r3, #0
 80015ee:	69fa      	ldr	r2, [r7, #28]
 80015f0:	f002 0203 	and.w	r2, r2, #3
 80015f4:	0092      	lsls	r2, r2, #2
 80015f6:	4093      	lsls	r3, r2
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015fe:	4938      	ldr	r1, [pc, #224]	; (80016e0 <HAL_GPIO_Init+0x35c>)
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	3302      	adds	r3, #2
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800160c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001632:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800163a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001660:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	3301      	adds	r3, #1
 80016c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa22 f303 	lsr.w	r3, r2, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f47f ae63 	bne.w	8001398 <HAL_GPIO_Init+0x14>
  }
}
 80016d2:	bf00      	nop
 80016d4:	bf00      	nop
 80016d6:	3724      	adds	r7, #36	; 0x24
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	58000400 	.word	0x58000400

080016e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	807b      	strh	r3, [r7, #2]
 80016f0:	4613      	mov	r3, r2
 80016f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016f4:	787b      	ldrb	r3, [r7, #1]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016fa:	887a      	ldrh	r2, [r7, #2]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001700:	e003      	b.n	800170a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001702:	887b      	ldrh	r3, [r7, #2]
 8001704:	041a      	lsls	r2, r3, #16
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	619a      	str	r2, [r3, #24]
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001720:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	2b06      	cmp	r3, #6
 800172a:	d00a      	beq.n	8001742 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800172c:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	429a      	cmp	r2, r3
 8001738:	d001      	beq.n	800173e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e040      	b.n	80017c0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	e03e      	b.n	80017c0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001742:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800174a:	491f      	ldr	r1, [pc, #124]	; (80017c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4313      	orrs	r3, r2
 8001750:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001752:	f7ff fd1b 	bl	800118c <HAL_GetTick>
 8001756:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001758:	e009      	b.n	800176e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800175a:	f7ff fd17 	bl	800118c <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001768:	d901      	bls.n	800176e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e028      	b.n	80017c0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800177a:	d1ee      	bne.n	800175a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b1e      	cmp	r3, #30
 8001780:	d008      	beq.n	8001794 <HAL_PWREx_ConfigSupply+0x7c>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b2e      	cmp	r3, #46	; 0x2e
 8001786:	d005      	beq.n	8001794 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b1d      	cmp	r3, #29
 800178c:	d002      	beq.n	8001794 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b2d      	cmp	r3, #45	; 0x2d
 8001792:	d114      	bne.n	80017be <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001794:	f7ff fcfa 	bl	800118c <HAL_GetTick>
 8001798:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800179a:	e009      	b.n	80017b0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800179c:	f7ff fcf6 	bl	800118c <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017aa:	d901      	bls.n	80017b0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e007      	b.n	80017c0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <HAL_PWREx_ConfigSupply+0xb0>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017bc:	d1ee      	bne.n	800179c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	58024800 	.word	0x58024800

080017cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08c      	sub	sp, #48	; 0x30
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	f000 bc1d 	b.w	800201a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 8087 	beq.w	80018fc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ee:	4b99      	ldr	r3, [pc, #612]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017f8:	4b96      	ldr	r3, [pc, #600]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 80017fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80017fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001800:	2b10      	cmp	r3, #16
 8001802:	d007      	beq.n	8001814 <HAL_RCC_OscConfig+0x48>
 8001804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001806:	2b18      	cmp	r3, #24
 8001808:	d110      	bne.n	800182c <HAL_RCC_OscConfig+0x60>
 800180a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d10b      	bne.n	800182c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001814:	4b8f      	ldr	r3, [pc, #572]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d06c      	beq.n	80018fa <HAL_RCC_OscConfig+0x12e>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d168      	bne.n	80018fa <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e3f6      	b.n	800201a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001834:	d106      	bne.n	8001844 <HAL_RCC_OscConfig+0x78>
 8001836:	4b87      	ldr	r3, [pc, #540]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a86      	ldr	r2, [pc, #536]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 800183c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	e02e      	b.n	80018a2 <HAL_RCC_OscConfig+0xd6>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10c      	bne.n	8001866 <HAL_RCC_OscConfig+0x9a>
 800184c:	4b81      	ldr	r3, [pc, #516]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a80      	ldr	r2, [pc, #512]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 8001852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	4b7e      	ldr	r3, [pc, #504]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a7d      	ldr	r2, [pc, #500]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 800185e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	e01d      	b.n	80018a2 <HAL_RCC_OscConfig+0xd6>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800186e:	d10c      	bne.n	800188a <HAL_RCC_OscConfig+0xbe>
 8001870:	4b78      	ldr	r3, [pc, #480]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a77      	ldr	r2, [pc, #476]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 8001876:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	4b75      	ldr	r3, [pc, #468]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a74      	ldr	r2, [pc, #464]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 8001882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	e00b      	b.n	80018a2 <HAL_RCC_OscConfig+0xd6>
 800188a:	4b72      	ldr	r3, [pc, #456]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a71      	ldr	r2, [pc, #452]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 8001890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	4b6f      	ldr	r3, [pc, #444]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a6e      	ldr	r2, [pc, #440]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 800189c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d013      	beq.n	80018d2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018aa:	f7ff fc6f 	bl	800118c <HAL_GetTick>
 80018ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018b2:	f7ff fc6b 	bl	800118c <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b64      	cmp	r3, #100	; 0x64
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e3aa      	b.n	800201a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018c4:	4b63      	ldr	r3, [pc, #396]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0f0      	beq.n	80018b2 <HAL_RCC_OscConfig+0xe6>
 80018d0:	e014      	b.n	80018fc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d2:	f7ff fc5b 	bl	800118c <HAL_GetTick>
 80018d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018da:	f7ff fc57 	bl	800118c <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b64      	cmp	r3, #100	; 0x64
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e396      	b.n	800201a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018ec:	4b59      	ldr	r3, [pc, #356]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f0      	bne.n	80018da <HAL_RCC_OscConfig+0x10e>
 80018f8:	e000      	b.n	80018fc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 80cb 	beq.w	8001aa0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800190a:	4b52      	ldr	r3, [pc, #328]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001912:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001914:	4b4f      	ldr	r3, [pc, #316]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 8001916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001918:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800191a:	6a3b      	ldr	r3, [r7, #32]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d007      	beq.n	8001930 <HAL_RCC_OscConfig+0x164>
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	2b18      	cmp	r3, #24
 8001924:	d156      	bne.n	80019d4 <HAL_RCC_OscConfig+0x208>
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b00      	cmp	r3, #0
 800192e:	d151      	bne.n	80019d4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001930:	4b48      	ldr	r3, [pc, #288]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <HAL_RCC_OscConfig+0x17c>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e368      	b.n	800201a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001948:	4b42      	ldr	r3, [pc, #264]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f023 0219 	bic.w	r2, r3, #25
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	493f      	ldr	r1, [pc, #252]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 8001956:	4313      	orrs	r3, r2
 8001958:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800195a:	f7ff fc17 	bl	800118c <HAL_GetTick>
 800195e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001962:	f7ff fc13 	bl	800118c <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e352      	b.n	800201a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001974:	4b37      	ldr	r3, [pc, #220]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001980:	f7ff fc10 	bl	80011a4 <HAL_GetREVID>
 8001984:	4603      	mov	r3, r0
 8001986:	f241 0203 	movw	r2, #4099	; 0x1003
 800198a:	4293      	cmp	r3, r2
 800198c:	d817      	bhi.n	80019be <HAL_RCC_OscConfig+0x1f2>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	2b40      	cmp	r3, #64	; 0x40
 8001994:	d108      	bne.n	80019a8 <HAL_RCC_OscConfig+0x1dc>
 8001996:	4b2f      	ldr	r3, [pc, #188]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800199e:	4a2d      	ldr	r2, [pc, #180]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019a6:	e07b      	b.n	8001aa0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a8:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	031b      	lsls	r3, r3, #12
 80019b6:	4927      	ldr	r1, [pc, #156]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019bc:	e070      	b.n	8001aa0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019be:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	061b      	lsls	r3, r3, #24
 80019cc:	4921      	ldr	r1, [pc, #132]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019d2:	e065      	b.n	8001aa0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d048      	beq.n	8001a6e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019dc:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f023 0219 	bic.w	r2, r3, #25
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	491a      	ldr	r1, [pc, #104]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ee:	f7ff fbcd 	bl	800118c <HAL_GetTick>
 80019f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f6:	f7ff fbc9 	bl	800118c <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e308      	b.n	800201a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a14:	f7ff fbc6 	bl	80011a4 <HAL_GetREVID>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d81a      	bhi.n	8001a58 <HAL_RCC_OscConfig+0x28c>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	2b40      	cmp	r3, #64	; 0x40
 8001a28:	d108      	bne.n	8001a3c <HAL_RCC_OscConfig+0x270>
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001a32:	4a08      	ldr	r2, [pc, #32]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 8001a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a38:	6053      	str	r3, [r2, #4]
 8001a3a:	e031      	b.n	8001aa0 <HAL_RCC_OscConfig+0x2d4>
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	031b      	lsls	r3, r3, #12
 8001a4a:	4902      	ldr	r1, [pc, #8]	; (8001a54 <HAL_RCC_OscConfig+0x288>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]
 8001a50:	e026      	b.n	8001aa0 <HAL_RCC_OscConfig+0x2d4>
 8001a52:	bf00      	nop
 8001a54:	58024400 	.word	0x58024400
 8001a58:	4b9a      	ldr	r3, [pc, #616]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	061b      	lsls	r3, r3, #24
 8001a66:	4997      	ldr	r1, [pc, #604]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]
 8001a6c:	e018      	b.n	8001aa0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a6e:	4b95      	ldr	r3, [pc, #596]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a94      	ldr	r2, [pc, #592]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001a74:	f023 0301 	bic.w	r3, r3, #1
 8001a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7a:	f7ff fb87 	bl	800118c <HAL_GetTick>
 8001a7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a82:	f7ff fb83 	bl	800118c <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e2c2      	b.n	800201a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a94:	4b8b      	ldr	r3, [pc, #556]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f0      	bne.n	8001a82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0310 	and.w	r3, r3, #16
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 80a9 	beq.w	8001c00 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aae:	4b85      	ldr	r3, [pc, #532]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ab6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ab8:	4b82      	ldr	r3, [pc, #520]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d007      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x308>
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	2b18      	cmp	r3, #24
 8001ac8:	d13a      	bne.n	8001b40 <HAL_RCC_OscConfig+0x374>
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d135      	bne.n	8001b40 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ad4:	4b7b      	ldr	r3, [pc, #492]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_RCC_OscConfig+0x320>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	2b80      	cmp	r3, #128	; 0x80
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e296      	b.n	800201a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001aec:	f7ff fb5a 	bl	80011a4 <HAL_GetREVID>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f241 0203 	movw	r2, #4099	; 0x1003
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d817      	bhi.n	8001b2a <HAL_RCC_OscConfig+0x35e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	2b20      	cmp	r3, #32
 8001b00:	d108      	bne.n	8001b14 <HAL_RCC_OscConfig+0x348>
 8001b02:	4b70      	ldr	r3, [pc, #448]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001b0a:	4a6e      	ldr	r2, [pc, #440]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001b0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b10:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b12:	e075      	b.n	8001c00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b14:	4b6b      	ldr	r3, [pc, #428]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	069b      	lsls	r3, r3, #26
 8001b22:	4968      	ldr	r1, [pc, #416]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b28:	e06a      	b.n	8001c00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b2a:	4b66      	ldr	r3, [pc, #408]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	061b      	lsls	r3, r3, #24
 8001b38:	4962      	ldr	r1, [pc, #392]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b3e:	e05f      	b.n	8001c00 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69db      	ldr	r3, [r3, #28]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d042      	beq.n	8001bce <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b48:	4b5e      	ldr	r3, [pc, #376]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a5d      	ldr	r2, [pc, #372]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b54:	f7ff fb1a 	bl	800118c <HAL_GetTick>
 8001b58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b5c:	f7ff fb16 	bl	800118c <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e255      	b.n	800201a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b6e:	4b55      	ldr	r3, [pc, #340]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b7a:	f7ff fb13 	bl	80011a4 <HAL_GetREVID>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d817      	bhi.n	8001bb8 <HAL_RCC_OscConfig+0x3ec>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	2b20      	cmp	r3, #32
 8001b8e:	d108      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x3d6>
 8001b90:	4b4c      	ldr	r3, [pc, #304]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001b98:	4a4a      	ldr	r2, [pc, #296]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001b9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b9e:	6053      	str	r3, [r2, #4]
 8001ba0:	e02e      	b.n	8001c00 <HAL_RCC_OscConfig+0x434>
 8001ba2:	4b48      	ldr	r3, [pc, #288]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	069b      	lsls	r3, r3, #26
 8001bb0:	4944      	ldr	r1, [pc, #272]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	604b      	str	r3, [r1, #4]
 8001bb6:	e023      	b.n	8001c00 <HAL_RCC_OscConfig+0x434>
 8001bb8:	4b42      	ldr	r3, [pc, #264]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	061b      	lsls	r3, r3, #24
 8001bc6:	493f      	ldr	r1, [pc, #252]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	60cb      	str	r3, [r1, #12]
 8001bcc:	e018      	b.n	8001c00 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001bce:	4b3d      	ldr	r3, [pc, #244]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a3c      	ldr	r2, [pc, #240]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001bd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bda:	f7ff fad7 	bl	800118c <HAL_GetTick>
 8001bde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001be2:	f7ff fad3 	bl	800118c <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e212      	b.n	800201a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bf4:	4b33      	ldr	r3, [pc, #204]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1f0      	bne.n	8001be2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d036      	beq.n	8001c7a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d019      	beq.n	8001c48 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c14:	4b2b      	ldr	r3, [pc, #172]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c18:	4a2a      	ldr	r2, [pc, #168]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c20:	f7ff fab4 	bl	800118c <HAL_GetTick>
 8001c24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c28:	f7ff fab0 	bl	800118c <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e1ef      	b.n	800201a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c3a:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x45c>
 8001c46:	e018      	b.n	8001c7a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c48:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c4c:	4a1d      	ldr	r2, [pc, #116]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001c4e:	f023 0301 	bic.w	r3, r3, #1
 8001c52:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c54:	f7ff fa9a 	bl	800118c <HAL_GetTick>
 8001c58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c5c:	f7ff fa96 	bl	800118c <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e1d5      	b.n	800201a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0320 	and.w	r3, r3, #32
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d039      	beq.n	8001cfa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d01c      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a0c      	ldr	r2, [pc, #48]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001c94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c98:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c9a:	f7ff fa77 	bl	800118c <HAL_GetTick>
 8001c9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ca2:	f7ff fa73 	bl	800118c <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e1b2      	b.n	800201a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cb4:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <HAL_RCC_OscConfig+0x4f8>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x4d6>
 8001cc0:	e01b      	b.n	8001cfa <HAL_RCC_OscConfig+0x52e>
 8001cc2:	bf00      	nop
 8001cc4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cc8:	4b9b      	ldr	r3, [pc, #620]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a9a      	ldr	r2, [pc, #616]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001cce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cd2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001cd4:	f7ff fa5a 	bl	800118c <HAL_GetTick>
 8001cd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001cdc:	f7ff fa56 	bl	800118c <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e195      	b.n	800201a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cee:	4b92      	ldr	r3, [pc, #584]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 8081 	beq.w	8001e0a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d08:	4b8c      	ldr	r3, [pc, #560]	; (8001f3c <HAL_RCC_OscConfig+0x770>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a8b      	ldr	r2, [pc, #556]	; (8001f3c <HAL_RCC_OscConfig+0x770>)
 8001d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d14:	f7ff fa3a 	bl	800118c <HAL_GetTick>
 8001d18:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001d1c:	f7ff fa36 	bl	800118c <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b64      	cmp	r3, #100	; 0x64
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e175      	b.n	800201a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d2e:	4b83      	ldr	r3, [pc, #524]	; (8001f3c <HAL_RCC_OscConfig+0x770>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d106      	bne.n	8001d50 <HAL_RCC_OscConfig+0x584>
 8001d42:	4b7d      	ldr	r3, [pc, #500]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d46:	4a7c      	ldr	r2, [pc, #496]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d4e:	e02d      	b.n	8001dac <HAL_RCC_OscConfig+0x5e0>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d10c      	bne.n	8001d72 <HAL_RCC_OscConfig+0x5a6>
 8001d58:	4b77      	ldr	r3, [pc, #476]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5c:	4a76      	ldr	r2, [pc, #472]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001d5e:	f023 0301 	bic.w	r3, r3, #1
 8001d62:	6713      	str	r3, [r2, #112]	; 0x70
 8001d64:	4b74      	ldr	r3, [pc, #464]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d68:	4a73      	ldr	r2, [pc, #460]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001d6a:	f023 0304 	bic.w	r3, r3, #4
 8001d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d70:	e01c      	b.n	8001dac <HAL_RCC_OscConfig+0x5e0>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	2b05      	cmp	r3, #5
 8001d78:	d10c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x5c8>
 8001d7a:	4b6f      	ldr	r3, [pc, #444]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7e:	4a6e      	ldr	r2, [pc, #440]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001d80:	f043 0304 	orr.w	r3, r3, #4
 8001d84:	6713      	str	r3, [r2, #112]	; 0x70
 8001d86:	4b6c      	ldr	r3, [pc, #432]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8a:	4a6b      	ldr	r2, [pc, #428]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6713      	str	r3, [r2, #112]	; 0x70
 8001d92:	e00b      	b.n	8001dac <HAL_RCC_OscConfig+0x5e0>
 8001d94:	4b68      	ldr	r3, [pc, #416]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d98:	4a67      	ldr	r2, [pc, #412]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001d9a:	f023 0301 	bic.w	r3, r3, #1
 8001d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001da0:	4b65      	ldr	r3, [pc, #404]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da4:	4a64      	ldr	r2, [pc, #400]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001da6:	f023 0304 	bic.w	r3, r3, #4
 8001daa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d015      	beq.n	8001de0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db4:	f7ff f9ea 	bl	800118c <HAL_GetTick>
 8001db8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dba:	e00a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dbc:	f7ff f9e6 	bl	800118c <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e123      	b.n	800201a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dd2:	4b59      	ldr	r3, [pc, #356]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0ee      	beq.n	8001dbc <HAL_RCC_OscConfig+0x5f0>
 8001dde:	e014      	b.n	8001e0a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de0:	f7ff f9d4 	bl	800118c <HAL_GetTick>
 8001de4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001de6:	e00a      	b.n	8001dfe <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de8:	f7ff f9d0 	bl	800118c <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e10d      	b.n	800201a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dfe:	4b4e      	ldr	r3, [pc, #312]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1ee      	bne.n	8001de8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 8102 	beq.w	8002018 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001e14:	4b48      	ldr	r3, [pc, #288]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e1c:	2b18      	cmp	r3, #24
 8001e1e:	f000 80bd 	beq.w	8001f9c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	f040 809e 	bne.w	8001f68 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2c:	4b42      	ldr	r3, [pc, #264]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a41      	ldr	r2, [pc, #260]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001e32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	f7ff f9a8 	bl	800118c <HAL_GetTick>
 8001e3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e40:	f7ff f9a4 	bl	800118c <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e0e3      	b.n	800201a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e52:	4b39      	ldr	r3, [pc, #228]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e5e:	4b36      	ldr	r3, [pc, #216]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e62:	4b37      	ldr	r3, [pc, #220]	; (8001f40 <HAL_RCC_OscConfig+0x774>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e6e:	0112      	lsls	r2, r2, #4
 8001e70:	430a      	orrs	r2, r1
 8001e72:	4931      	ldr	r1, [pc, #196]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	628b      	str	r3, [r1, #40]	; 0x28
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e86:	3b01      	subs	r3, #1
 8001e88:	025b      	lsls	r3, r3, #9
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e92:	3b01      	subs	r3, #1
 8001e94:	041b      	lsls	r3, r3, #16
 8001e96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	061b      	lsls	r3, r3, #24
 8001ea4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001ea8:	4923      	ldr	r1, [pc, #140]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001eae:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb2:	4a21      	ldr	r2, [pc, #132]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001eb4:	f023 0301 	bic.w	r3, r3, #1
 8001eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001eba:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ebe:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <HAL_RCC_OscConfig+0x778>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ec6:	00d2      	lsls	r2, r2, #3
 8001ec8:	491b      	ldr	r1, [pc, #108]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ece:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed2:	f023 020c 	bic.w	r2, r3, #12
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	4917      	ldr	r1, [pc, #92]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ee0:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee4:	f023 0202 	bic.w	r2, r3, #2
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eec:	4912      	ldr	r1, [pc, #72]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ef2:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef6:	4a10      	ldr	r2, [pc, #64]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001efc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001efe:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f02:	4a0d      	ldr	r2, [pc, #52]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001f16:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1a:	4a07      	ldr	r2, [pc, #28]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f22:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <HAL_RCC_OscConfig+0x76c>)
 8001f28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2e:	f7ff f92d 	bl	800118c <HAL_GetTick>
 8001f32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f34:	e011      	b.n	8001f5a <HAL_RCC_OscConfig+0x78e>
 8001f36:	bf00      	nop
 8001f38:	58024400 	.word	0x58024400
 8001f3c:	58024800 	.word	0x58024800
 8001f40:	fffffc0c 	.word	0xfffffc0c
 8001f44:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f48:	f7ff f920 	bl	800118c <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e05f      	b.n	800201a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f5a:	4b32      	ldr	r3, [pc, #200]	; (8002024 <HAL_RCC_OscConfig+0x858>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0x77c>
 8001f66:	e057      	b.n	8002018 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f68:	4b2e      	ldr	r3, [pc, #184]	; (8002024 <HAL_RCC_OscConfig+0x858>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a2d      	ldr	r2, [pc, #180]	; (8002024 <HAL_RCC_OscConfig+0x858>)
 8001f6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7ff f90a 	bl	800118c <HAL_GetTick>
 8001f78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f7c:	f7ff f906 	bl	800118c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e045      	b.n	800201a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f8e:	4b25      	ldr	r3, [pc, #148]	; (8002024 <HAL_RCC_OscConfig+0x858>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0x7b0>
 8001f9a:	e03d      	b.n	8002018 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f9c:	4b21      	ldr	r3, [pc, #132]	; (8002024 <HAL_RCC_OscConfig+0x858>)
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001fa2:	4b20      	ldr	r3, [pc, #128]	; (8002024 <HAL_RCC_OscConfig+0x858>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d031      	beq.n	8002014 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	f003 0203 	and.w	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d12a      	bne.n	8002014 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	091b      	lsrs	r3, r3, #4
 8001fc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d122      	bne.n	8002014 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d11a      	bne.n	8002014 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	0a5b      	lsrs	r3, r3, #9
 8001fe2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fea:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d111      	bne.n	8002014 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	0c1b      	lsrs	r3, r3, #16
 8001ff4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d108      	bne.n	8002014 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	0e1b      	lsrs	r3, r3, #24
 8002006:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e000      	b.n	800201a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3730      	adds	r7, #48	; 0x30
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	58024400 	.word	0x58024400

08002028 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e19c      	b.n	8002376 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800203c:	4b8a      	ldr	r3, [pc, #552]	; (8002268 <HAL_RCC_ClockConfig+0x240>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 030f 	and.w	r3, r3, #15
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d910      	bls.n	800206c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204a:	4b87      	ldr	r3, [pc, #540]	; (8002268 <HAL_RCC_ClockConfig+0x240>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 020f 	bic.w	r2, r3, #15
 8002052:	4985      	ldr	r1, [pc, #532]	; (8002268 <HAL_RCC_ClockConfig+0x240>)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800205a:	4b83      	ldr	r3, [pc, #524]	; (8002268 <HAL_RCC_ClockConfig+0x240>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d001      	beq.n	800206c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e184      	b.n	8002376 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b00      	cmp	r3, #0
 8002076:	d010      	beq.n	800209a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691a      	ldr	r2, [r3, #16]
 800207c:	4b7b      	ldr	r3, [pc, #492]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002084:	429a      	cmp	r2, r3
 8002086:	d908      	bls.n	800209a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002088:	4b78      	ldr	r3, [pc, #480]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	4975      	ldr	r1, [pc, #468]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 8002096:	4313      	orrs	r3, r2
 8002098:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d010      	beq.n	80020c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695a      	ldr	r2, [r3, #20]
 80020aa:	4b70      	ldr	r3, [pc, #448]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d908      	bls.n	80020c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020b6:	4b6d      	ldr	r3, [pc, #436]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	496a      	ldr	r1, [pc, #424]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d010      	beq.n	80020f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699a      	ldr	r2, [r3, #24]
 80020d8:	4b64      	ldr	r3, [pc, #400]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d908      	bls.n	80020f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80020e4:	4b61      	ldr	r3, [pc, #388]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	495e      	ldr	r1, [pc, #376]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0320 	and.w	r3, r3, #32
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d010      	beq.n	8002124 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69da      	ldr	r2, [r3, #28]
 8002106:	4b59      	ldr	r3, [pc, #356]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800210e:	429a      	cmp	r2, r3
 8002110:	d908      	bls.n	8002124 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002112:	4b56      	ldr	r3, [pc, #344]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	4953      	ldr	r1, [pc, #332]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 8002120:	4313      	orrs	r3, r2
 8002122:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d010      	beq.n	8002152 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	4b4d      	ldr	r3, [pc, #308]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	429a      	cmp	r2, r3
 800213e:	d908      	bls.n	8002152 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002140:	4b4a      	ldr	r3, [pc, #296]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f023 020f 	bic.w	r2, r3, #15
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	4947      	ldr	r1, [pc, #284]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 800214e:	4313      	orrs	r3, r2
 8002150:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d055      	beq.n	800220a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800215e:	4b43      	ldr	r3, [pc, #268]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	4940      	ldr	r1, [pc, #256]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 800216c:	4313      	orrs	r3, r2
 800216e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d107      	bne.n	8002188 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002178:	4b3c      	ldr	r3, [pc, #240]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d121      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0f6      	b.n	8002376 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d107      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002190:	4b36      	ldr	r3, [pc, #216]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d115      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0ea      	b.n	8002376 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d107      	bne.n	80021b8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021a8:	4b30      	ldr	r3, [pc, #192]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d109      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0de      	b.n	8002376 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021b8:	4b2c      	ldr	r3, [pc, #176]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0d6      	b.n	8002376 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021c8:	4b28      	ldr	r3, [pc, #160]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	f023 0207 	bic.w	r2, r3, #7
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	4925      	ldr	r1, [pc, #148]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021da:	f7fe ffd7 	bl	800118c <HAL_GetTick>
 80021de:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e0:	e00a      	b.n	80021f8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e2:	f7fe ffd3 	bl	800118c <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e0be      	b.n	8002376 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f8:	4b1c      	ldr	r3, [pc, #112]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	429a      	cmp	r2, r3
 8002208:	d1eb      	bne.n	80021e2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d010      	beq.n	8002238 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	429a      	cmp	r2, r3
 8002224:	d208      	bcs.n	8002238 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	f023 020f 	bic.w	r2, r3, #15
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	490e      	ldr	r1, [pc, #56]	; (800226c <HAL_RCC_ClockConfig+0x244>)
 8002234:	4313      	orrs	r3, r2
 8002236:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_RCC_ClockConfig+0x240>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d214      	bcs.n	8002270 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	4b08      	ldr	r3, [pc, #32]	; (8002268 <HAL_RCC_ClockConfig+0x240>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 020f 	bic.w	r2, r3, #15
 800224e:	4906      	ldr	r1, [pc, #24]	; (8002268 <HAL_RCC_ClockConfig+0x240>)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002256:	4b04      	ldr	r3, [pc, #16]	; (8002268 <HAL_RCC_ClockConfig+0x240>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d005      	beq.n	8002270 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e086      	b.n	8002376 <HAL_RCC_ClockConfig+0x34e>
 8002268:	52002000 	.word	0x52002000
 800226c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d010      	beq.n	800229e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	4b3f      	ldr	r3, [pc, #252]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002288:	429a      	cmp	r2, r3
 800228a:	d208      	bcs.n	800229e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800228c:	4b3c      	ldr	r3, [pc, #240]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	4939      	ldr	r1, [pc, #228]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 800229a:	4313      	orrs	r3, r2
 800229c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d010      	beq.n	80022cc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695a      	ldr	r2, [r3, #20]
 80022ae:	4b34      	ldr	r3, [pc, #208]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d208      	bcs.n	80022cc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022ba:	4b31      	ldr	r3, [pc, #196]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	492e      	ldr	r1, [pc, #184]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0310 	and.w	r3, r3, #16
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d010      	beq.n	80022fa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699a      	ldr	r2, [r3, #24]
 80022dc:	4b28      	ldr	r3, [pc, #160]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d208      	bcs.n	80022fa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022e8:	4b25      	ldr	r3, [pc, #148]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	4922      	ldr	r1, [pc, #136]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0320 	and.w	r3, r3, #32
 8002302:	2b00      	cmp	r3, #0
 8002304:	d010      	beq.n	8002328 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69da      	ldr	r2, [r3, #28]
 800230a:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002312:	429a      	cmp	r2, r3
 8002314:	d208      	bcs.n	8002328 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002316:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	4917      	ldr	r1, [pc, #92]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 8002324:	4313      	orrs	r3, r2
 8002326:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002328:	f000 f834 	bl	8002394 <HAL_RCC_GetSysClockFreq>
 800232c:	4602      	mov	r2, r0
 800232e:	4b14      	ldr	r3, [pc, #80]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	0a1b      	lsrs	r3, r3, #8
 8002334:	f003 030f 	and.w	r3, r3, #15
 8002338:	4912      	ldr	r1, [pc, #72]	; (8002384 <HAL_RCC_ClockConfig+0x35c>)
 800233a:	5ccb      	ldrb	r3, [r1, r3]
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	fa22 f303 	lsr.w	r3, r2, r3
 8002344:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002346:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <HAL_RCC_ClockConfig+0x358>)
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	4a0d      	ldr	r2, [pc, #52]	; (8002384 <HAL_RCC_ClockConfig+0x35c>)
 8002350:	5cd3      	ldrb	r3, [r2, r3]
 8002352:	f003 031f 	and.w	r3, r3, #31
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
 800235c:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <HAL_RCC_ClockConfig+0x360>)
 800235e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002360:	4a0a      	ldr	r2, [pc, #40]	; (800238c <HAL_RCC_ClockConfig+0x364>)
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002366:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <HAL_RCC_ClockConfig+0x368>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe fec4 	bl	80010f8 <HAL_InitTick>
 8002370:	4603      	mov	r3, r0
 8002372:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002374:	7bfb      	ldrb	r3, [r7, #15]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	58024400 	.word	0x58024400
 8002384:	08006de0 	.word	0x08006de0
 8002388:	24000004 	.word	0x24000004
 800238c:	24000000 	.word	0x24000000
 8002390:	24000008 	.word	0x24000008

08002394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002394:	b480      	push	{r7}
 8002396:	b089      	sub	sp, #36	; 0x24
 8002398:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800239a:	4bb3      	ldr	r3, [pc, #716]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023a2:	2b18      	cmp	r3, #24
 80023a4:	f200 8155 	bhi.w	8002652 <HAL_RCC_GetSysClockFreq+0x2be>
 80023a8:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80023aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ae:	bf00      	nop
 80023b0:	08002415 	.word	0x08002415
 80023b4:	08002653 	.word	0x08002653
 80023b8:	08002653 	.word	0x08002653
 80023bc:	08002653 	.word	0x08002653
 80023c0:	08002653 	.word	0x08002653
 80023c4:	08002653 	.word	0x08002653
 80023c8:	08002653 	.word	0x08002653
 80023cc:	08002653 	.word	0x08002653
 80023d0:	0800243b 	.word	0x0800243b
 80023d4:	08002653 	.word	0x08002653
 80023d8:	08002653 	.word	0x08002653
 80023dc:	08002653 	.word	0x08002653
 80023e0:	08002653 	.word	0x08002653
 80023e4:	08002653 	.word	0x08002653
 80023e8:	08002653 	.word	0x08002653
 80023ec:	08002653 	.word	0x08002653
 80023f0:	08002441 	.word	0x08002441
 80023f4:	08002653 	.word	0x08002653
 80023f8:	08002653 	.word	0x08002653
 80023fc:	08002653 	.word	0x08002653
 8002400:	08002653 	.word	0x08002653
 8002404:	08002653 	.word	0x08002653
 8002408:	08002653 	.word	0x08002653
 800240c:	08002653 	.word	0x08002653
 8002410:	08002447 	.word	0x08002447
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002414:	4b94      	ldr	r3, [pc, #592]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0320 	and.w	r3, r3, #32
 800241c:	2b00      	cmp	r3, #0
 800241e:	d009      	beq.n	8002434 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002420:	4b91      	ldr	r3, [pc, #580]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	08db      	lsrs	r3, r3, #3
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	4a90      	ldr	r2, [pc, #576]	; (800266c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800242c:	fa22 f303 	lsr.w	r3, r2, r3
 8002430:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002432:	e111      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002434:	4b8d      	ldr	r3, [pc, #564]	; (800266c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002436:	61bb      	str	r3, [r7, #24]
    break;
 8002438:	e10e      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800243a:	4b8d      	ldr	r3, [pc, #564]	; (8002670 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800243c:	61bb      	str	r3, [r7, #24]
    break;
 800243e:	e10b      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002440:	4b8c      	ldr	r3, [pc, #560]	; (8002674 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002442:	61bb      	str	r3, [r7, #24]
    break;
 8002444:	e108      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002446:	4b88      	ldr	r3, [pc, #544]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002450:	4b85      	ldr	r3, [pc, #532]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800245a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800245c:	4b82      	ldr	r3, [pc, #520]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002466:	4b80      	ldr	r3, [pc, #512]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246a:	08db      	lsrs	r3, r3, #3
 800246c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	fb02 f303 	mul.w	r3, r2, r3
 8002476:	ee07 3a90 	vmov	s15, r3
 800247a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800247e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80e1 	beq.w	800264c <HAL_RCC_GetSysClockFreq+0x2b8>
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	2b02      	cmp	r3, #2
 800248e:	f000 8083 	beq.w	8002598 <HAL_RCC_GetSysClockFreq+0x204>
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2b02      	cmp	r3, #2
 8002496:	f200 80a1 	bhi.w	80025dc <HAL_RCC_GetSysClockFreq+0x248>
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x114>
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d056      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x1c0>
 80024a6:	e099      	b.n	80025dc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024a8:	4b6f      	ldr	r3, [pc, #444]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d02d      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80024b4:	4b6c      	ldr	r3, [pc, #432]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	08db      	lsrs	r3, r3, #3
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	4a6b      	ldr	r2, [pc, #428]	; (800266c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
 80024c4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	ee07 3a90 	vmov	s15, r3
 80024d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024de:	4b62      	ldr	r3, [pc, #392]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024e6:	ee07 3a90 	vmov	s15, r3
 80024ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80024f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002678 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800250a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800250e:	e087      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	ee07 3a90 	vmov	s15, r3
 8002516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800251a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800267c <HAL_RCC_GetSysClockFreq+0x2e8>
 800251e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002522:	4b51      	ldr	r3, [pc, #324]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800252a:	ee07 3a90 	vmov	s15, r3
 800252e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002532:	ed97 6a02 	vldr	s12, [r7, #8]
 8002536:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002678 <HAL_RCC_GetSysClockFreq+0x2e4>
 800253a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800253e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800254a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800254e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002552:	e065      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	ee07 3a90 	vmov	s15, r3
 800255a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800255e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002680 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002566:	4b40      	ldr	r3, [pc, #256]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800256e:	ee07 3a90 	vmov	s15, r3
 8002572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002576:	ed97 6a02 	vldr	s12, [r7, #8]
 800257a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002678 <HAL_RCC_GetSysClockFreq+0x2e4>
 800257e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800258a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800258e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002592:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002596:	e043      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	ee07 3a90 	vmov	s15, r3
 800259e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002684 <HAL_RCC_GetSysClockFreq+0x2f0>
 80025a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025aa:	4b2f      	ldr	r3, [pc, #188]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025b2:	ee07 3a90 	vmov	s15, r3
 80025b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80025be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002678 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025da:	e021      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	ee07 3a90 	vmov	s15, r3
 80025e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002680 <HAL_RCC_GetSysClockFreq+0x2ec>
 80025ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025ee:	4b1e      	ldr	r3, [pc, #120]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025f6:	ee07 3a90 	vmov	s15, r3
 80025fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002602:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002678 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800260a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800260e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800261a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800261e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	0a5b      	lsrs	r3, r3, #9
 8002626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800262a:	3301      	adds	r3, #1
 800262c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	ee07 3a90 	vmov	s15, r3
 8002634:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002638:	edd7 6a07 	vldr	s13, [r7, #28]
 800263c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002644:	ee17 3a90 	vmov	r3, s15
 8002648:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800264a:	e005      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	61bb      	str	r3, [r7, #24]
    break;
 8002650:	e002      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002652:	4b07      	ldr	r3, [pc, #28]	; (8002670 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002654:	61bb      	str	r3, [r7, #24]
    break;
 8002656:	bf00      	nop
  }

  return sysclockfreq;
 8002658:	69bb      	ldr	r3, [r7, #24]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3724      	adds	r7, #36	; 0x24
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	58024400 	.word	0x58024400
 800266c:	03d09000 	.word	0x03d09000
 8002670:	003d0900 	.word	0x003d0900
 8002674:	007a1200 	.word	0x007a1200
 8002678:	46000000 	.word	0x46000000
 800267c:	4c742400 	.word	0x4c742400
 8002680:	4a742400 	.word	0x4a742400
 8002684:	4af42400 	.word	0x4af42400

08002688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800268e:	f7ff fe81 	bl	8002394 <HAL_RCC_GetSysClockFreq>
 8002692:	4602      	mov	r2, r0
 8002694:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	0a1b      	lsrs	r3, r3, #8
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	490f      	ldr	r1, [pc, #60]	; (80026dc <HAL_RCC_GetHCLKFreq+0x54>)
 80026a0:	5ccb      	ldrb	r3, [r1, r3]
 80026a2:	f003 031f 	and.w	r3, r3, #31
 80026a6:	fa22 f303 	lsr.w	r3, r2, r3
 80026aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026ac:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	f003 030f 	and.w	r3, r3, #15
 80026b4:	4a09      	ldr	r2, [pc, #36]	; (80026dc <HAL_RCC_GetHCLKFreq+0x54>)
 80026b6:	5cd3      	ldrb	r3, [r2, r3]
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	fa22 f303 	lsr.w	r3, r2, r3
 80026c2:	4a07      	ldr	r2, [pc, #28]	; (80026e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80026c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026c6:	4a07      	ldr	r2, [pc, #28]	; (80026e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	58024400 	.word	0x58024400
 80026dc:	08006de0 	.word	0x08006de0
 80026e0:	24000004 	.word	0x24000004
 80026e4:	24000000 	.word	0x24000000

080026e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80026ec:	f7ff ffcc 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 80026f0:	4602      	mov	r2, r0
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_RCC_GetPCLK1Freq+0x24>)
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	091b      	lsrs	r3, r3, #4
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	4904      	ldr	r1, [pc, #16]	; (8002710 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026fe:	5ccb      	ldrb	r3, [r1, r3]
 8002700:	f003 031f 	and.w	r3, r3, #31
 8002704:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}
 800270c:	58024400 	.word	0x58024400
 8002710:	08006de0 	.word	0x08006de0

08002714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002718:	f7ff ffb6 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 800271c:	4602      	mov	r2, r0
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	0a1b      	lsrs	r3, r3, #8
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	4904      	ldr	r1, [pc, #16]	; (800273c <HAL_RCC_GetPCLK2Freq+0x28>)
 800272a:	5ccb      	ldrb	r3, [r1, r3]
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002734:	4618      	mov	r0, r3
 8002736:	bd80      	pop	{r7, pc}
 8002738:	58024400 	.word	0x58024400
 800273c:	08006de0 	.word	0x08006de0

08002740 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002748:	2300      	movs	r3, #0
 800274a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800274c:	2300      	movs	r3, #0
 800274e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d03f      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002760:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002764:	d02a      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002766:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800276a:	d824      	bhi.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800276c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002770:	d018      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002772:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002776:	d81e      	bhi.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800277c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002780:	d007      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002782:	e018      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002784:	4ba3      	ldr	r3, [pc, #652]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	4aa2      	ldr	r2, [pc, #648]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800278a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800278e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002790:	e015      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3304      	adds	r3, #4
 8002796:	2102      	movs	r1, #2
 8002798:	4618      	mov	r0, r3
 800279a:	f001 f9d5 	bl	8003b48 <RCCEx_PLL2_Config>
 800279e:	4603      	mov	r3, r0
 80027a0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80027a2:	e00c      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3324      	adds	r3, #36	; 0x24
 80027a8:	2102      	movs	r1, #2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f001 fa7e 	bl	8003cac <RCCEx_PLL3_Config>
 80027b0:	4603      	mov	r3, r0
 80027b2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80027b4:	e003      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	75fb      	strb	r3, [r7, #23]
      break;
 80027ba:	e000      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80027bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027be:	7dfb      	ldrb	r3, [r7, #23]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d109      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80027c4:	4b93      	ldr	r3, [pc, #588]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027d0:	4990      	ldr	r1, [pc, #576]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	650b      	str	r3, [r1, #80]	; 0x50
 80027d6:	e001      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d8:	7dfb      	ldrb	r3, [r7, #23]
 80027da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d03d      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d826      	bhi.n	800283e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80027f0:	a201      	add	r2, pc, #4	; (adr r2, 80027f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80027f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f6:	bf00      	nop
 80027f8:	0800280d 	.word	0x0800280d
 80027fc:	0800281b 	.word	0x0800281b
 8002800:	0800282d 	.word	0x0800282d
 8002804:	08002845 	.word	0x08002845
 8002808:	08002845 	.word	0x08002845
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800280c:	4b81      	ldr	r3, [pc, #516]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	4a80      	ldr	r2, [pc, #512]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002816:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002818:	e015      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3304      	adds	r3, #4
 800281e:	2100      	movs	r1, #0
 8002820:	4618      	mov	r0, r3
 8002822:	f001 f991 	bl	8003b48 <RCCEx_PLL2_Config>
 8002826:	4603      	mov	r3, r0
 8002828:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800282a:	e00c      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3324      	adds	r3, #36	; 0x24
 8002830:	2100      	movs	r1, #0
 8002832:	4618      	mov	r0, r3
 8002834:	f001 fa3a 	bl	8003cac <RCCEx_PLL3_Config>
 8002838:	4603      	mov	r3, r0
 800283a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800283c:	e003      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	75fb      	strb	r3, [r7, #23]
      break;
 8002842:	e000      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002844:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002846:	7dfb      	ldrb	r3, [r7, #23]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d109      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800284c:	4b71      	ldr	r3, [pc, #452]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800284e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002850:	f023 0207 	bic.w	r2, r3, #7
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002858:	496e      	ldr	r1, [pc, #440]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800285a:	4313      	orrs	r3, r2
 800285c:	650b      	str	r3, [r1, #80]	; 0x50
 800285e:	e001      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002860:	7dfb      	ldrb	r3, [r7, #23]
 8002862:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800286c:	2b00      	cmp	r3, #0
 800286e:	d042      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002878:	d02b      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800287a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800287e:	d825      	bhi.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002880:	2bc0      	cmp	r3, #192	; 0xc0
 8002882:	d028      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002884:	2bc0      	cmp	r3, #192	; 0xc0
 8002886:	d821      	bhi.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002888:	2b80      	cmp	r3, #128	; 0x80
 800288a:	d016      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800288c:	2b80      	cmp	r3, #128	; 0x80
 800288e:	d81d      	bhi.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002890:	2b00      	cmp	r3, #0
 8002892:	d002      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002894:	2b40      	cmp	r3, #64	; 0x40
 8002896:	d007      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002898:	e018      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800289a:	4b5e      	ldr	r3, [pc, #376]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800289c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289e:	4a5d      	ldr	r2, [pc, #372]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80028a6:	e017      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3304      	adds	r3, #4
 80028ac:	2100      	movs	r1, #0
 80028ae:	4618      	mov	r0, r3
 80028b0:	f001 f94a 	bl	8003b48 <RCCEx_PLL2_Config>
 80028b4:	4603      	mov	r3, r0
 80028b6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80028b8:	e00e      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3324      	adds	r3, #36	; 0x24
 80028be:	2100      	movs	r1, #0
 80028c0:	4618      	mov	r0, r3
 80028c2:	f001 f9f3 	bl	8003cac <RCCEx_PLL3_Config>
 80028c6:	4603      	mov	r3, r0
 80028c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80028ca:	e005      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	75fb      	strb	r3, [r7, #23]
      break;
 80028d0:	e002      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80028d2:	bf00      	nop
 80028d4:	e000      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80028d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028d8:	7dfb      	ldrb	r3, [r7, #23]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d109      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80028de:	4b4d      	ldr	r3, [pc, #308]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ea:	494a      	ldr	r1, [pc, #296]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	650b      	str	r3, [r1, #80]	; 0x50
 80028f0:	e001      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f2:	7dfb      	ldrb	r3, [r7, #23]
 80028f4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d049      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002908:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800290c:	d030      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800290e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002912:	d82a      	bhi.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002914:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002918:	d02c      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800291a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800291e:	d824      	bhi.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002920:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002924:	d018      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002926:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800292a:	d81e      	bhi.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002930:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002934:	d007      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002936:	e018      	b.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002938:	4b36      	ldr	r3, [pc, #216]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	4a35      	ldr	r2, [pc, #212]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800293e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002942:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002944:	e017      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3304      	adds	r3, #4
 800294a:	2100      	movs	r1, #0
 800294c:	4618      	mov	r0, r3
 800294e:	f001 f8fb 	bl	8003b48 <RCCEx_PLL2_Config>
 8002952:	4603      	mov	r3, r0
 8002954:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002956:	e00e      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3324      	adds	r3, #36	; 0x24
 800295c:	2100      	movs	r1, #0
 800295e:	4618      	mov	r0, r3
 8002960:	f001 f9a4 	bl	8003cac <RCCEx_PLL3_Config>
 8002964:	4603      	mov	r3, r0
 8002966:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002968:	e005      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	75fb      	strb	r3, [r7, #23]
      break;
 800296e:	e002      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002970:	bf00      	nop
 8002972:	e000      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002974:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002976:	7dfb      	ldrb	r3, [r7, #23]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10a      	bne.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800297c:	4b25      	ldr	r3, [pc, #148]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800297e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002980:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800298a:	4922      	ldr	r1, [pc, #136]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800298c:	4313      	orrs	r3, r2
 800298e:	658b      	str	r3, [r1, #88]	; 0x58
 8002990:	e001      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002992:	7dfb      	ldrb	r3, [r7, #23]
 8002994:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d04b      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80029a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029ac:	d030      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80029ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029b2:	d82a      	bhi.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80029b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029b8:	d02e      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80029ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029be:	d824      	bhi.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80029c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029c4:	d018      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80029c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029ca:	d81e      	bhi.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80029d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029d4:	d007      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80029d6:	e018      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029d8:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	4a0d      	ldr	r2, [pc, #52]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029e4:	e019      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3304      	adds	r3, #4
 80029ea:	2100      	movs	r1, #0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f001 f8ab 	bl	8003b48 <RCCEx_PLL2_Config>
 80029f2:	4603      	mov	r3, r0
 80029f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80029f6:	e010      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3324      	adds	r3, #36	; 0x24
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f001 f954 	bl	8003cac <RCCEx_PLL3_Config>
 8002a04:	4603      	mov	r3, r0
 8002a06:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a08:	e007      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8002a0e:	e004      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002a10:	bf00      	nop
 8002a12:	e002      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002a14:	58024400 	.word	0x58024400
      break;
 8002a18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a1a:	7dfb      	ldrb	r3, [r7, #23]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10a      	bne.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002a20:	4b99      	ldr	r3, [pc, #612]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a24:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002a2e:	4996      	ldr	r1, [pc, #600]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	658b      	str	r3, [r1, #88]	; 0x58
 8002a34:	e001      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a36:	7dfb      	ldrb	r3, [r7, #23]
 8002a38:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d032      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a4a:	2b30      	cmp	r3, #48	; 0x30
 8002a4c:	d01c      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002a4e:	2b30      	cmp	r3, #48	; 0x30
 8002a50:	d817      	bhi.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002a52:	2b20      	cmp	r3, #32
 8002a54:	d00c      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002a56:	2b20      	cmp	r3, #32
 8002a58:	d813      	bhi.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d016      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002a5e:	2b10      	cmp	r3, #16
 8002a60:	d10f      	bne.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a62:	4b89      	ldr	r3, [pc, #548]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a66:	4a88      	ldr	r2, [pc, #544]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002a6e:	e00e      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3304      	adds	r3, #4
 8002a74:	2102      	movs	r1, #2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f001 f866 	bl	8003b48 <RCCEx_PLL2_Config>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002a80:	e005      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	75fb      	strb	r3, [r7, #23]
      break;
 8002a86:	e002      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002a88:	bf00      	nop
 8002a8a:	e000      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002a8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a8e:	7dfb      	ldrb	r3, [r7, #23]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d109      	bne.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002a94:	4b7c      	ldr	r3, [pc, #496]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa0:	4979      	ldr	r1, [pc, #484]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002aa6:	e001      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa8:	7dfb      	ldrb	r3, [r7, #23]
 8002aaa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d047      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ac0:	d030      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002ac2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ac6:	d82a      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002ac8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002acc:	d02c      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002ace:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ad2:	d824      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ad8:	d018      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ade:	d81e      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae8:	d007      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002aea:	e018      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aec:	4b66      	ldr	r3, [pc, #408]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af0:	4a65      	ldr	r2, [pc, #404]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002af8:	e017      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3304      	adds	r3, #4
 8002afe:	2100      	movs	r1, #0
 8002b00:	4618      	mov	r0, r3
 8002b02:	f001 f821 	bl	8003b48 <RCCEx_PLL2_Config>
 8002b06:	4603      	mov	r3, r0
 8002b08:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b0a:	e00e      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3324      	adds	r3, #36	; 0x24
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f001 f8ca 	bl	8003cac <RCCEx_PLL3_Config>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b1c:	e005      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	75fb      	strb	r3, [r7, #23]
      break;
 8002b22:	e002      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002b24:	bf00      	nop
 8002b26:	e000      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002b28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b2a:	7dfb      	ldrb	r3, [r7, #23]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d109      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002b30:	4b55      	ldr	r3, [pc, #340]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b34:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3c:	4952      	ldr	r1, [pc, #328]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	650b      	str	r3, [r1, #80]	; 0x50
 8002b42:	e001      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b44:	7dfb      	ldrb	r3, [r7, #23]
 8002b46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d049      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b5c:	d02e      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002b5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b62:	d828      	bhi.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002b64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b68:	d02a      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002b6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b6e:	d822      	bhi.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002b70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b74:	d026      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002b76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b7a:	d81c      	bhi.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002b7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b80:	d010      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002b82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b86:	d816      	bhi.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d01d      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b90:	d111      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3304      	adds	r3, #4
 8002b96:	2101      	movs	r1, #1
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 ffd5 	bl	8003b48 <RCCEx_PLL2_Config>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002ba2:	e012      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3324      	adds	r3, #36	; 0x24
 8002ba8:	2101      	movs	r1, #1
 8002baa:	4618      	mov	r0, r3
 8002bac:	f001 f87e 	bl	8003cac <RCCEx_PLL3_Config>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002bb4:	e009      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8002bba:	e006      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002bbc:	bf00      	nop
 8002bbe:	e004      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002bc0:	bf00      	nop
 8002bc2:	e002      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002bc4:	bf00      	nop
 8002bc6:	e000      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002bc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bca:	7dfb      	ldrb	r3, [r7, #23]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d109      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002bd0:	4b2d      	ldr	r3, [pc, #180]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bdc:	492a      	ldr	r1, [pc, #168]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	650b      	str	r3, [r1, #80]	; 0x50
 8002be2:	e001      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
 8002be6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d04d      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002bfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bfe:	d02e      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c04:	d828      	bhi.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0a:	d02a      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c10:	d822      	bhi.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002c12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c16:	d026      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002c18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c1c:	d81c      	bhi.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002c1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c22:	d010      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c28:	d816      	bhi.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d01d      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002c2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c32:	d111      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3304      	adds	r3, #4
 8002c38:	2101      	movs	r1, #1
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 ff84 	bl	8003b48 <RCCEx_PLL2_Config>
 8002c40:	4603      	mov	r3, r0
 8002c42:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002c44:	e012      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3324      	adds	r3, #36	; 0x24
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f001 f82d 	bl	8003cac <RCCEx_PLL3_Config>
 8002c52:	4603      	mov	r3, r0
 8002c54:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002c56:	e009      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c5c:	e006      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002c5e:	bf00      	nop
 8002c60:	e004      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002c62:	bf00      	nop
 8002c64:	e002      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002c66:	bf00      	nop
 8002c68:	e000      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002c6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c6c:	7dfb      	ldrb	r3, [r7, #23]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10c      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002c72:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c76:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002c80:	4901      	ldr	r1, [pc, #4]	; (8002c88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	658b      	str	r3, [r1, #88]	; 0x58
 8002c86:	e003      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002c88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c8c:	7dfb      	ldrb	r3, [r7, #23]
 8002c8e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d02f      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ca4:	d00e      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002ca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002caa:	d814      	bhi.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d015      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002cb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cb4:	d10f      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cb6:	4baf      	ldr	r3, [pc, #700]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	4aae      	ldr	r2, [pc, #696]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002cc2:	e00c      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	2101      	movs	r1, #1
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 ff3c 	bl	8003b48 <RCCEx_PLL2_Config>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002cd4:	e003      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	75fb      	strb	r3, [r7, #23]
      break;
 8002cda:	e000      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002cdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cde:	7dfb      	ldrb	r3, [r7, #23]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d109      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ce4:	4ba3      	ldr	r3, [pc, #652]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cf0:	49a0      	ldr	r1, [pc, #640]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	650b      	str	r3, [r1, #80]	; 0x50
 8002cf6:	e001      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf8:	7dfb      	ldrb	r3, [r7, #23]
 8002cfa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d032      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d81b      	bhi.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002d10:	a201      	add	r2, pc, #4	; (adr r2, 8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d16:	bf00      	nop
 8002d18:	08002d4f 	.word	0x08002d4f
 8002d1c:	08002d29 	.word	0x08002d29
 8002d20:	08002d37 	.word	0x08002d37
 8002d24:	08002d4f 	.word	0x08002d4f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d28:	4b92      	ldr	r3, [pc, #584]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	4a91      	ldr	r2, [pc, #580]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002d34:	e00c      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	2102      	movs	r1, #2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 ff03 	bl	8003b48 <RCCEx_PLL2_Config>
 8002d42:	4603      	mov	r3, r0
 8002d44:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002d46:	e003      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d4c:	e000      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002d4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d50:	7dfb      	ldrb	r3, [r7, #23]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d109      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002d56:	4b87      	ldr	r3, [pc, #540]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5a:	f023 0203 	bic.w	r2, r3, #3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	4984      	ldr	r1, [pc, #528]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002d68:	e001      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d6a:	7dfb      	ldrb	r3, [r7, #23]
 8002d6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 8086 	beq.w	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d7c:	4b7e      	ldr	r3, [pc, #504]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a7d      	ldr	r2, [pc, #500]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d88:	f7fe fa00 	bl	800118c <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d8e:	e009      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d90:	f7fe f9fc 	bl	800118c <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	; 0x64
 8002d9c:	d902      	bls.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	75fb      	strb	r3, [r7, #23]
        break;
 8002da2:	e005      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002da4:	4b74      	ldr	r3, [pc, #464]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0ef      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002db0:	7dfb      	ldrb	r3, [r7, #23]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d166      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002db6:	4b6f      	ldr	r3, [pc, #444]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002db8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002dc0:	4053      	eors	r3, r2
 8002dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d013      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dca:	4b6a      	ldr	r3, [pc, #424]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dd4:	4b67      	ldr	r3, [pc, #412]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd8:	4a66      	ldr	r2, [pc, #408]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dde:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002de0:	4b64      	ldr	r3, [pc, #400]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de4:	4a63      	ldr	r2, [pc, #396]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dea:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002dec:	4a61      	ldr	r2, [pc, #388]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dfc:	d115      	bne.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfe:	f7fe f9c5 	bl	800118c <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e04:	e00b      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e06:	f7fe f9c1 	bl	800118c <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d902      	bls.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	75fb      	strb	r3, [r7, #23]
            break;
 8002e1c:	e005      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e1e:	4b55      	ldr	r3, [pc, #340]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0ed      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002e2a:	7dfb      	ldrb	r3, [r7, #23]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d126      	bne.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e3e:	d10d      	bne.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002e40:	4b4c      	ldr	r3, [pc, #304]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e4e:	0919      	lsrs	r1, r3, #4
 8002e50:	4b4a      	ldr	r3, [pc, #296]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002e52:	400b      	ands	r3, r1
 8002e54:	4947      	ldr	r1, [pc, #284]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	610b      	str	r3, [r1, #16]
 8002e5a:	e005      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002e5c:	4b45      	ldr	r3, [pc, #276]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	4a44      	ldr	r2, [pc, #272]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e62:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002e66:	6113      	str	r3, [r2, #16]
 8002e68:	4b42      	ldr	r3, [pc, #264]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e76:	493f      	ldr	r1, [pc, #252]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	670b      	str	r3, [r1, #112]	; 0x70
 8002e7c:	e004      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e7e:	7dfb      	ldrb	r3, [r7, #23]
 8002e80:	75bb      	strb	r3, [r7, #22]
 8002e82:	e001      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e84:	7dfb      	ldrb	r3, [r7, #23]
 8002e86:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 8085 	beq.w	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e9a:	2b28      	cmp	r3, #40	; 0x28
 8002e9c:	d866      	bhi.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002e9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea4:	08002f81 	.word	0x08002f81
 8002ea8:	08002f6d 	.word	0x08002f6d
 8002eac:	08002f6d 	.word	0x08002f6d
 8002eb0:	08002f6d 	.word	0x08002f6d
 8002eb4:	08002f6d 	.word	0x08002f6d
 8002eb8:	08002f6d 	.word	0x08002f6d
 8002ebc:	08002f6d 	.word	0x08002f6d
 8002ec0:	08002f6d 	.word	0x08002f6d
 8002ec4:	08002f49 	.word	0x08002f49
 8002ec8:	08002f6d 	.word	0x08002f6d
 8002ecc:	08002f6d 	.word	0x08002f6d
 8002ed0:	08002f6d 	.word	0x08002f6d
 8002ed4:	08002f6d 	.word	0x08002f6d
 8002ed8:	08002f6d 	.word	0x08002f6d
 8002edc:	08002f6d 	.word	0x08002f6d
 8002ee0:	08002f6d 	.word	0x08002f6d
 8002ee4:	08002f5b 	.word	0x08002f5b
 8002ee8:	08002f6d 	.word	0x08002f6d
 8002eec:	08002f6d 	.word	0x08002f6d
 8002ef0:	08002f6d 	.word	0x08002f6d
 8002ef4:	08002f6d 	.word	0x08002f6d
 8002ef8:	08002f6d 	.word	0x08002f6d
 8002efc:	08002f6d 	.word	0x08002f6d
 8002f00:	08002f6d 	.word	0x08002f6d
 8002f04:	08002f81 	.word	0x08002f81
 8002f08:	08002f6d 	.word	0x08002f6d
 8002f0c:	08002f6d 	.word	0x08002f6d
 8002f10:	08002f6d 	.word	0x08002f6d
 8002f14:	08002f6d 	.word	0x08002f6d
 8002f18:	08002f6d 	.word	0x08002f6d
 8002f1c:	08002f6d 	.word	0x08002f6d
 8002f20:	08002f6d 	.word	0x08002f6d
 8002f24:	08002f81 	.word	0x08002f81
 8002f28:	08002f6d 	.word	0x08002f6d
 8002f2c:	08002f6d 	.word	0x08002f6d
 8002f30:	08002f6d 	.word	0x08002f6d
 8002f34:	08002f6d 	.word	0x08002f6d
 8002f38:	08002f6d 	.word	0x08002f6d
 8002f3c:	08002f6d 	.word	0x08002f6d
 8002f40:	08002f6d 	.word	0x08002f6d
 8002f44:	08002f81 	.word	0x08002f81
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 fdfa 	bl	8003b48 <RCCEx_PLL2_Config>
 8002f54:	4603      	mov	r3, r0
 8002f56:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002f58:	e013      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3324      	adds	r3, #36	; 0x24
 8002f5e:	2101      	movs	r1, #1
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 fea3 	bl	8003cac <RCCEx_PLL3_Config>
 8002f66:	4603      	mov	r3, r0
 8002f68:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002f6a:	e00a      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8002f70:	e007      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002f72:	bf00      	nop
 8002f74:	58024400 	.word	0x58024400
 8002f78:	58024800 	.word	0x58024800
 8002f7c:	00ffffcf 	.word	0x00ffffcf
      break;
 8002f80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f82:	7dfb      	ldrb	r3, [r7, #23]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d109      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002f88:	4b96      	ldr	r3, [pc, #600]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f94:	4993      	ldr	r1, [pc, #588]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	654b      	str	r3, [r1, #84]	; 0x54
 8002f9a:	e001      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f9c:	7dfb      	ldrb	r3, [r7, #23]
 8002f9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d038      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb0:	2b05      	cmp	r3, #5
 8002fb2:	d821      	bhi.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002fb4:	a201      	add	r2, pc, #4	; (adr r2, 8002fbc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fba:	bf00      	nop
 8002fbc:	08002fff 	.word	0x08002fff
 8002fc0:	08002fd5 	.word	0x08002fd5
 8002fc4:	08002fe7 	.word	0x08002fe7
 8002fc8:	08002fff 	.word	0x08002fff
 8002fcc:	08002fff 	.word	0x08002fff
 8002fd0:	08002fff 	.word	0x08002fff
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	2101      	movs	r1, #1
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 fdb4 	bl	8003b48 <RCCEx_PLL2_Config>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002fe4:	e00c      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3324      	adds	r3, #36	; 0x24
 8002fea:	2101      	movs	r1, #1
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 fe5d 	bl	8003cac <RCCEx_PLL3_Config>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002ff6:	e003      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	75fb      	strb	r3, [r7, #23]
      break;
 8002ffc:	e000      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8002ffe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003000:	7dfb      	ldrb	r3, [r7, #23]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d109      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003006:	4b77      	ldr	r3, [pc, #476]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300a:	f023 0207 	bic.w	r2, r3, #7
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003012:	4974      	ldr	r1, [pc, #464]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003014:	4313      	orrs	r3, r2
 8003016:	654b      	str	r3, [r1, #84]	; 0x54
 8003018:	e001      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800301a:	7dfb      	ldrb	r3, [r7, #23]
 800301c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	2b00      	cmp	r3, #0
 8003028:	d03a      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003030:	2b05      	cmp	r3, #5
 8003032:	d821      	bhi.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003034:	a201      	add	r2, pc, #4	; (adr r2, 800303c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303a:	bf00      	nop
 800303c:	0800307f 	.word	0x0800307f
 8003040:	08003055 	.word	0x08003055
 8003044:	08003067 	.word	0x08003067
 8003048:	0800307f 	.word	0x0800307f
 800304c:	0800307f 	.word	0x0800307f
 8003050:	0800307f 	.word	0x0800307f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3304      	adds	r3, #4
 8003058:	2101      	movs	r1, #1
 800305a:	4618      	mov	r0, r3
 800305c:	f000 fd74 	bl	8003b48 <RCCEx_PLL2_Config>
 8003060:	4603      	mov	r3, r0
 8003062:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003064:	e00c      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3324      	adds	r3, #36	; 0x24
 800306a:	2101      	movs	r1, #1
 800306c:	4618      	mov	r0, r3
 800306e:	f000 fe1d 	bl	8003cac <RCCEx_PLL3_Config>
 8003072:	4603      	mov	r3, r0
 8003074:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003076:	e003      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	75fb      	strb	r3, [r7, #23]
      break;
 800307c:	e000      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800307e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003080:	7dfb      	ldrb	r3, [r7, #23]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10a      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003086:	4b57      	ldr	r3, [pc, #348]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308a:	f023 0207 	bic.w	r2, r3, #7
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003094:	4953      	ldr	r1, [pc, #332]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003096:	4313      	orrs	r3, r2
 8003098:	658b      	str	r3, [r1, #88]	; 0x58
 800309a:	e001      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800309c:	7dfb      	ldrb	r3, [r7, #23]
 800309e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0320 	and.w	r3, r3, #32
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d04b      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030b6:	d02e      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80030b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030bc:	d828      	bhi.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80030be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c2:	d02a      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80030c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c8:	d822      	bhi.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80030ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030ce:	d026      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80030d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030d4:	d81c      	bhi.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80030d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030da:	d010      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80030dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030e0:	d816      	bhi.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d01d      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80030e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030ea:	d111      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3304      	adds	r3, #4
 80030f0:	2100      	movs	r1, #0
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fd28 	bl	8003b48 <RCCEx_PLL2_Config>
 80030f8:	4603      	mov	r3, r0
 80030fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80030fc:	e012      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3324      	adds	r3, #36	; 0x24
 8003102:	2102      	movs	r1, #2
 8003104:	4618      	mov	r0, r3
 8003106:	f000 fdd1 	bl	8003cac <RCCEx_PLL3_Config>
 800310a:	4603      	mov	r3, r0
 800310c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800310e:	e009      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	75fb      	strb	r3, [r7, #23]
      break;
 8003114:	e006      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003116:	bf00      	nop
 8003118:	e004      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800311a:	bf00      	nop
 800311c:	e002      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800311e:	bf00      	nop
 8003120:	e000      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003122:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003124:	7dfb      	ldrb	r3, [r7, #23]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10a      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800312a:	4b2e      	ldr	r3, [pc, #184]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800312c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003138:	492a      	ldr	r1, [pc, #168]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800313a:	4313      	orrs	r3, r2
 800313c:	654b      	str	r3, [r1, #84]	; 0x54
 800313e:	e001      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003140:	7dfb      	ldrb	r3, [r7, #23]
 8003142:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314c:	2b00      	cmp	r3, #0
 800314e:	d04d      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003156:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800315a:	d02e      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800315c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003160:	d828      	bhi.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003166:	d02a      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800316c:	d822      	bhi.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800316e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003172:	d026      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003174:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003178:	d81c      	bhi.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800317a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800317e:	d010      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003184:	d816      	bhi.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003186:	2b00      	cmp	r3, #0
 8003188:	d01d      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800318a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800318e:	d111      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3304      	adds	r3, #4
 8003194:	2100      	movs	r1, #0
 8003196:	4618      	mov	r0, r3
 8003198:	f000 fcd6 	bl	8003b48 <RCCEx_PLL2_Config>
 800319c:	4603      	mov	r3, r0
 800319e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80031a0:	e012      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3324      	adds	r3, #36	; 0x24
 80031a6:	2102      	movs	r1, #2
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 fd7f 	bl	8003cac <RCCEx_PLL3_Config>
 80031ae:	4603      	mov	r3, r0
 80031b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80031b2:	e009      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	75fb      	strb	r3, [r7, #23]
      break;
 80031b8:	e006      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80031ba:	bf00      	nop
 80031bc:	e004      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80031be:	bf00      	nop
 80031c0:	e002      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80031c2:	bf00      	nop
 80031c4:	e000      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80031c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031c8:	7dfb      	ldrb	r3, [r7, #23]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10c      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031ce:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031dc:	4901      	ldr	r1, [pc, #4]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	658b      	str	r3, [r1, #88]	; 0x58
 80031e2:	e003      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80031e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e8:	7dfb      	ldrb	r3, [r7, #23]
 80031ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d04b      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003202:	d02e      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003204:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003208:	d828      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800320a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800320e:	d02a      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003214:	d822      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003216:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800321a:	d026      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800321c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003220:	d81c      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003222:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003226:	d010      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003228:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800322c:	d816      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800322e:	2b00      	cmp	r3, #0
 8003230:	d01d      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003236:	d111      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3304      	adds	r3, #4
 800323c:	2100      	movs	r1, #0
 800323e:	4618      	mov	r0, r3
 8003240:	f000 fc82 	bl	8003b48 <RCCEx_PLL2_Config>
 8003244:	4603      	mov	r3, r0
 8003246:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003248:	e012      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3324      	adds	r3, #36	; 0x24
 800324e:	2102      	movs	r1, #2
 8003250:	4618      	mov	r0, r3
 8003252:	f000 fd2b 	bl	8003cac <RCCEx_PLL3_Config>
 8003256:	4603      	mov	r3, r0
 8003258:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800325a:	e009      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	75fb      	strb	r3, [r7, #23]
      break;
 8003260:	e006      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003262:	bf00      	nop
 8003264:	e004      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003266:	bf00      	nop
 8003268:	e002      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800326a:	bf00      	nop
 800326c:	e000      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800326e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003270:	7dfb      	ldrb	r3, [r7, #23]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10a      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003276:	4b9d      	ldr	r3, [pc, #628]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003284:	4999      	ldr	r1, [pc, #612]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003286:	4313      	orrs	r3, r2
 8003288:	658b      	str	r3, [r1, #88]	; 0x58
 800328a:	e001      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800328c:	7dfb      	ldrb	r3, [r7, #23]
 800328e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b00      	cmp	r3, #0
 800329a:	d01a      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a6:	d10a      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3324      	adds	r3, #36	; 0x24
 80032ac:	2102      	movs	r1, #2
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fcfc 	bl	8003cac <RCCEx_PLL3_Config>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80032be:	4b8b      	ldr	r3, [pc, #556]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032cc:	4987      	ldr	r1, [pc, #540]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0310 	and.w	r3, r3, #16
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d01a      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032e8:	d10a      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3324      	adds	r3, #36	; 0x24
 80032ee:	2102      	movs	r1, #2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 fcdb 	bl	8003cac <RCCEx_PLL3_Config>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003300:	4b7a      	ldr	r3, [pc, #488]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003304:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800330e:	4977      	ldr	r1, [pc, #476]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003310:	4313      	orrs	r3, r2
 8003312:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d034      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003326:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800332a:	d01d      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800332c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003330:	d817      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800333a:	d009      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800333c:	e011      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3304      	adds	r3, #4
 8003342:	2100      	movs	r1, #0
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fbff 	bl	8003b48 <RCCEx_PLL2_Config>
 800334a:	4603      	mov	r3, r0
 800334c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800334e:	e00c      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3324      	adds	r3, #36	; 0x24
 8003354:	2102      	movs	r1, #2
 8003356:	4618      	mov	r0, r3
 8003358:	f000 fca8 	bl	8003cac <RCCEx_PLL3_Config>
 800335c:	4603      	mov	r3, r0
 800335e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003360:	e003      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	75fb      	strb	r3, [r7, #23]
      break;
 8003366:	e000      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003368:	bf00      	nop
    }

    if(ret == HAL_OK)
 800336a:	7dfb      	ldrb	r3, [r7, #23]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10a      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003370:	4b5e      	ldr	r3, [pc, #376]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003374:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800337e:	495b      	ldr	r1, [pc, #364]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003380:	4313      	orrs	r3, r2
 8003382:	658b      	str	r3, [r1, #88]	; 0x58
 8003384:	e001      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003386:	7dfb      	ldrb	r3, [r7, #23]
 8003388:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d033      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800339c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033a0:	d01c      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80033a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033a6:	d816      	bhi.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80033a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ac:	d003      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80033ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033b2:	d007      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80033b4:	e00f      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033b6:	4b4d      	ldr	r3, [pc, #308]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	4a4c      	ldr	r2, [pc, #304]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80033c2:	e00c      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3324      	adds	r3, #36	; 0x24
 80033c8:	2101      	movs	r1, #1
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 fc6e 	bl	8003cac <RCCEx_PLL3_Config>
 80033d0:	4603      	mov	r3, r0
 80033d2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80033d4:	e003      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	75fb      	strb	r3, [r7, #23]
      break;
 80033da:	e000      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80033dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033de:	7dfb      	ldrb	r3, [r7, #23]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10a      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033e4:	4b41      	ldr	r3, [pc, #260]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033f2:	493e      	ldr	r1, [pc, #248]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	654b      	str	r3, [r1, #84]	; 0x54
 80033f8:	e001      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033fa:	7dfb      	ldrb	r3, [r7, #23]
 80033fc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d029      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003412:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003416:	d007      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003418:	e00f      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800341a:	4b34      	ldr	r3, [pc, #208]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	4a33      	ldr	r2, [pc, #204]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003424:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003426:	e00b      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3304      	adds	r3, #4
 800342c:	2102      	movs	r1, #2
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fb8a 	bl	8003b48 <RCCEx_PLL2_Config>
 8003434:	4603      	mov	r3, r0
 8003436:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003438:	e002      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	75fb      	strb	r3, [r7, #23]
      break;
 800343e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003440:	7dfb      	ldrb	r3, [r7, #23]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d109      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003446:	4b29      	ldr	r3, [pc, #164]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003452:	4926      	ldr	r1, [pc, #152]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003454:	4313      	orrs	r3, r2
 8003456:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003458:	e001      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800345a:	7dfb      	ldrb	r3, [r7, #23]
 800345c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3324      	adds	r3, #36	; 0x24
 800346e:	2102      	movs	r1, #2
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fc1b 	bl	8003cac <RCCEx_PLL3_Config>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d033      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003490:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003494:	d017      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003496:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800349a:	d811      	bhi.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800349c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a0:	d013      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80034a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a6:	d80b      	bhi.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d010      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80034ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034b0:	d106      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034b2:	4b0e      	ldr	r3, [pc, #56]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	4a0d      	ldr	r2, [pc, #52]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80034be:	e007      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	75fb      	strb	r3, [r7, #23]
      break;
 80034c4:	e004      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80034c6:	bf00      	nop
 80034c8:	e002      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80034ca:	bf00      	nop
 80034cc:	e000      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80034ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034d0:	7dfb      	ldrb	r3, [r7, #23]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10c      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034e2:	4902      	ldr	r1, [pc, #8]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	654b      	str	r3, [r1, #84]	; 0x54
 80034e8:	e004      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80034ea:	bf00      	nop
 80034ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
 80034f2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003500:	4b31      	ldr	r3, [pc, #196]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003504:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350c:	492e      	ldr	r1, [pc, #184]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800350e:	4313      	orrs	r3, r2
 8003510:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d009      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800351e:	4b2a      	ldr	r3, [pc, #168]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800352c:	4926      	ldr	r1, [pc, #152]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800352e:	4313      	orrs	r3, r2
 8003530:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d008      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800353e:	4b22      	ldr	r3, [pc, #136]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003542:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800354a:	491f      	ldr	r1, [pc, #124]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800354c:	4313      	orrs	r3, r2
 800354e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00d      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800355c:	4b1a      	ldr	r3, [pc, #104]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	4a19      	ldr	r2, [pc, #100]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003562:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003566:	6113      	str	r3, [r2, #16]
 8003568:	4b17      	ldr	r3, [pc, #92]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003572:	4915      	ldr	r1, [pc, #84]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003574:	4313      	orrs	r3, r2
 8003576:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	da08      	bge.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003580:	4b11      	ldr	r3, [pc, #68]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003584:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358c:	490e      	ldr	r1, [pc, #56]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800358e:	4313      	orrs	r3, r2
 8003590:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d009      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800359e:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ac:	4906      	ldr	r1, [pc, #24]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80035b2:	7dbb      	ldrb	r3, [r7, #22]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	e000      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	58024400 	.word	0x58024400

080035cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80035d0:	f7ff f85a 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 80035d4:	4602      	mov	r2, r0
 80035d6:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	091b      	lsrs	r3, r3, #4
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	4904      	ldr	r1, [pc, #16]	; (80035f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80035e2:	5ccb      	ldrb	r3, [r1, r3]
 80035e4:	f003 031f 	and.w	r3, r3, #31
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	58024400 	.word	0x58024400
 80035f4:	08006de0 	.word	0x08006de0

080035f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b089      	sub	sp, #36	; 0x24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003600:	4ba1      	ldr	r3, [pc, #644]	; (8003888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003604:	f003 0303 	and.w	r3, r3, #3
 8003608:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800360a:	4b9f      	ldr	r3, [pc, #636]	; (8003888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	0b1b      	lsrs	r3, r3, #12
 8003610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003614:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003616:	4b9c      	ldr	r3, [pc, #624]	; (8003888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361a:	091b      	lsrs	r3, r3, #4
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003622:	4b99      	ldr	r3, [pc, #612]	; (8003888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003626:	08db      	lsrs	r3, r3, #3
 8003628:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	fb02 f303 	mul.w	r3, r2, r3
 8003632:	ee07 3a90 	vmov	s15, r3
 8003636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800363a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 8111 	beq.w	8003868 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	2b02      	cmp	r3, #2
 800364a:	f000 8083 	beq.w	8003754 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	2b02      	cmp	r3, #2
 8003652:	f200 80a1 	bhi.w	8003798 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d056      	beq.n	8003710 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003662:	e099      	b.n	8003798 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003664:	4b88      	ldr	r3, [pc, #544]	; (8003888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	2b00      	cmp	r3, #0
 800366e:	d02d      	beq.n	80036cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003670:	4b85      	ldr	r3, [pc, #532]	; (8003888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	08db      	lsrs	r3, r3, #3
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	4a84      	ldr	r2, [pc, #528]	; (800388c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800367c:	fa22 f303 	lsr.w	r3, r2, r3
 8003680:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	ee07 3a90 	vmov	s15, r3
 8003688:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	ee07 3a90 	vmov	s15, r3
 8003692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800369a:	4b7b      	ldr	r3, [pc, #492]	; (8003888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a2:	ee07 3a90 	vmov	s15, r3
 80036a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80036ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003890 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80036b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80036ca:	e087      	b.n	80037dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	ee07 3a90 	vmov	s15, r3
 80036d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003894 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80036da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036de:	4b6a      	ldr	r3, [pc, #424]	; (8003888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036e6:	ee07 3a90 	vmov	s15, r3
 80036ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80036f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003890 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80036f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800370a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800370e:	e065      	b.n	80037dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	ee07 3a90 	vmov	s15, r3
 8003716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800371a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003898 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800371e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003722:	4b59      	ldr	r3, [pc, #356]	; (8003888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800372a:	ee07 3a90 	vmov	s15, r3
 800372e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003732:	ed97 6a03 	vldr	s12, [r7, #12]
 8003736:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003890 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800373a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800373e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800374a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800374e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003752:	e043      	b.n	80037dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	ee07 3a90 	vmov	s15, r3
 800375a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800375e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800389c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003766:	4b48      	ldr	r3, [pc, #288]	; (8003888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800376e:	ee07 3a90 	vmov	s15, r3
 8003772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003776:	ed97 6a03 	vldr	s12, [r7, #12]
 800377a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003890 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800377e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800378a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800378e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003792:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003796:	e021      	b.n	80037dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	ee07 3a90 	vmov	s15, r3
 800379e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003898 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80037a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037aa:	4b37      	ldr	r3, [pc, #220]	; (8003888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b2:	ee07 3a90 	vmov	s15, r3
 80037b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80037be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003890 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80037dc:	4b2a      	ldr	r3, [pc, #168]	; (8003888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e0:	0a5b      	lsrs	r3, r3, #9
 80037e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037e6:	ee07 3a90 	vmov	s15, r3
 80037ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80037fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003802:	ee17 2a90 	vmov	r2, s15
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800380a:	4b1f      	ldr	r3, [pc, #124]	; (8003888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800380c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380e:	0c1b      	lsrs	r3, r3, #16
 8003810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003814:	ee07 3a90 	vmov	s15, r3
 8003818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800381c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003820:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003824:	edd7 6a07 	vldr	s13, [r7, #28]
 8003828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800382c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003830:	ee17 2a90 	vmov	r2, s15
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003838:	4b13      	ldr	r3, [pc, #76]	; (8003888 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800383a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383c:	0e1b      	lsrs	r3, r3, #24
 800383e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003842:	ee07 3a90 	vmov	s15, r3
 8003846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800384a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800384e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003852:	edd7 6a07 	vldr	s13, [r7, #28]
 8003856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800385a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800385e:	ee17 2a90 	vmov	r2, s15
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003866:	e008      	b.n	800387a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	609a      	str	r2, [r3, #8]
}
 800387a:	bf00      	nop
 800387c:	3724      	adds	r7, #36	; 0x24
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	58024400 	.word	0x58024400
 800388c:	03d09000 	.word	0x03d09000
 8003890:	46000000 	.word	0x46000000
 8003894:	4c742400 	.word	0x4c742400
 8003898:	4a742400 	.word	0x4a742400
 800389c:	4af42400 	.word	0x4af42400

080038a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b089      	sub	sp, #36	; 0x24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038a8:	4ba1      	ldr	r3, [pc, #644]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ac:	f003 0303 	and.w	r3, r3, #3
 80038b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80038b2:	4b9f      	ldr	r3, [pc, #636]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b6:	0d1b      	lsrs	r3, r3, #20
 80038b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80038be:	4b9c      	ldr	r3, [pc, #624]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c2:	0a1b      	lsrs	r3, r3, #8
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80038ca:	4b99      	ldr	r3, [pc, #612]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	08db      	lsrs	r3, r3, #3
 80038d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	fb02 f303 	mul.w	r3, r2, r3
 80038da:	ee07 3a90 	vmov	s15, r3
 80038de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 8111 	beq.w	8003b10 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	f000 8083 	beq.w	80039fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	f200 80a1 	bhi.w	8003a40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d056      	beq.n	80039b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800390a:	e099      	b.n	8003a40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800390c:	4b88      	ldr	r3, [pc, #544]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b00      	cmp	r3, #0
 8003916:	d02d      	beq.n	8003974 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003918:	4b85      	ldr	r3, [pc, #532]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	08db      	lsrs	r3, r3, #3
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	4a84      	ldr	r2, [pc, #528]	; (8003b34 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003924:	fa22 f303 	lsr.w	r3, r2, r3
 8003928:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	ee07 3a90 	vmov	s15, r3
 8003930:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	ee07 3a90 	vmov	s15, r3
 800393a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800393e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003942:	4b7b      	ldr	r3, [pc, #492]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394a:	ee07 3a90 	vmov	s15, r3
 800394e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003952:	ed97 6a03 	vldr	s12, [r7, #12]
 8003956:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003b38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800395a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800395e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800396a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800396e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003972:	e087      	b.n	8003a84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800397e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003b3c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003986:	4b6a      	ldr	r3, [pc, #424]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800398e:	ee07 3a90 	vmov	s15, r3
 8003992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003996:	ed97 6a03 	vldr	s12, [r7, #12]
 800399a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003b38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800399e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039b6:	e065      	b.n	8003a84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	ee07 3a90 	vmov	s15, r3
 80039be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003b40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80039c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ca:	4b59      	ldr	r3, [pc, #356]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d2:	ee07 3a90 	vmov	s15, r3
 80039d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039da:	ed97 6a03 	vldr	s12, [r7, #12]
 80039de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003b38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80039e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039fa:	e043      	b.n	8003a84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	ee07 3a90 	vmov	s15, r3
 8003a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003b44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a0e:	4b48      	ldr	r3, [pc, #288]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a16:	ee07 3a90 	vmov	s15, r3
 8003a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a22:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003b38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a3e:	e021      	b.n	8003a84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	ee07 3a90 	vmov	s15, r3
 8003a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003b40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a52:	4b37      	ldr	r3, [pc, #220]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a5a:	ee07 3a90 	vmov	s15, r3
 8003a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a66:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003b38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a82:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003a84:	4b2a      	ldr	r3, [pc, #168]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	0a5b      	lsrs	r3, r3, #9
 8003a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a8e:	ee07 3a90 	vmov	s15, r3
 8003a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003aa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aaa:	ee17 2a90 	vmov	r2, s15
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003ab2:	4b1f      	ldr	r3, [pc, #124]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	0c1b      	lsrs	r3, r3, #16
 8003ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003abc:	ee07 3a90 	vmov	s15, r3
 8003ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ac4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ac8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003acc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ad8:	ee17 2a90 	vmov	r2, s15
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003ae0:	4b13      	ldr	r3, [pc, #76]	; (8003b30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	0e1b      	lsrs	r3, r3, #24
 8003ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aea:	ee07 3a90 	vmov	s15, r3
 8003aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003af6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003afa:	edd7 6a07 	vldr	s13, [r7, #28]
 8003afe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b06:	ee17 2a90 	vmov	r2, s15
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003b0e:	e008      	b.n	8003b22 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	609a      	str	r2, [r3, #8]
}
 8003b22:	bf00      	nop
 8003b24:	3724      	adds	r7, #36	; 0x24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	58024400 	.word	0x58024400
 8003b34:	03d09000 	.word	0x03d09000
 8003b38:	46000000 	.word	0x46000000
 8003b3c:	4c742400 	.word	0x4c742400
 8003b40:	4a742400 	.word	0x4a742400
 8003b44:	4af42400 	.word	0x4af42400

08003b48 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b56:	4b53      	ldr	r3, [pc, #332]	; (8003ca4 <RCCEx_PLL2_Config+0x15c>)
 8003b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	2b03      	cmp	r3, #3
 8003b60:	d101      	bne.n	8003b66 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e099      	b.n	8003c9a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003b66:	4b4f      	ldr	r3, [pc, #316]	; (8003ca4 <RCCEx_PLL2_Config+0x15c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a4e      	ldr	r2, [pc, #312]	; (8003ca4 <RCCEx_PLL2_Config+0x15c>)
 8003b6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b72:	f7fd fb0b 	bl	800118c <HAL_GetTick>
 8003b76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b78:	e008      	b.n	8003b8c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003b7a:	f7fd fb07 	bl	800118c <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e086      	b.n	8003c9a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b8c:	4b45      	ldr	r3, [pc, #276]	; (8003ca4 <RCCEx_PLL2_Config+0x15c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1f0      	bne.n	8003b7a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003b98:	4b42      	ldr	r3, [pc, #264]	; (8003ca4 <RCCEx_PLL2_Config+0x15c>)
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	031b      	lsls	r3, r3, #12
 8003ba6:	493f      	ldr	r1, [pc, #252]	; (8003ca4 <RCCEx_PLL2_Config+0x15c>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	628b      	str	r3, [r1, #40]	; 0x28
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	025b      	lsls	r3, r3, #9
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	041b      	lsls	r3, r3, #16
 8003bca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	061b      	lsls	r3, r3, #24
 8003bd8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003bdc:	4931      	ldr	r1, [pc, #196]	; (8003ca4 <RCCEx_PLL2_Config+0x15c>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003be2:	4b30      	ldr	r3, [pc, #192]	; (8003ca4 <RCCEx_PLL2_Config+0x15c>)
 8003be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	492d      	ldr	r1, [pc, #180]	; (8003ca4 <RCCEx_PLL2_Config+0x15c>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003bf4:	4b2b      	ldr	r3, [pc, #172]	; (8003ca4 <RCCEx_PLL2_Config+0x15c>)
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	f023 0220 	bic.w	r2, r3, #32
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	4928      	ldr	r1, [pc, #160]	; (8003ca4 <RCCEx_PLL2_Config+0x15c>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003c06:	4b27      	ldr	r3, [pc, #156]	; (8003ca4 <RCCEx_PLL2_Config+0x15c>)
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0a:	4a26      	ldr	r2, [pc, #152]	; (8003ca4 <RCCEx_PLL2_Config+0x15c>)
 8003c0c:	f023 0310 	bic.w	r3, r3, #16
 8003c10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003c12:	4b24      	ldr	r3, [pc, #144]	; (8003ca4 <RCCEx_PLL2_Config+0x15c>)
 8003c14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c16:	4b24      	ldr	r3, [pc, #144]	; (8003ca8 <RCCEx_PLL2_Config+0x160>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	69d2      	ldr	r2, [r2, #28]
 8003c1e:	00d2      	lsls	r2, r2, #3
 8003c20:	4920      	ldr	r1, [pc, #128]	; (8003ca4 <RCCEx_PLL2_Config+0x15c>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003c26:	4b1f      	ldr	r3, [pc, #124]	; (8003ca4 <RCCEx_PLL2_Config+0x15c>)
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	4a1e      	ldr	r2, [pc, #120]	; (8003ca4 <RCCEx_PLL2_Config+0x15c>)
 8003c2c:	f043 0310 	orr.w	r3, r3, #16
 8003c30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d106      	bne.n	8003c46 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003c38:	4b1a      	ldr	r3, [pc, #104]	; (8003ca4 <RCCEx_PLL2_Config+0x15c>)
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	4a19      	ldr	r2, [pc, #100]	; (8003ca4 <RCCEx_PLL2_Config+0x15c>)
 8003c3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c44:	e00f      	b.n	8003c66 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d106      	bne.n	8003c5a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003c4c:	4b15      	ldr	r3, [pc, #84]	; (8003ca4 <RCCEx_PLL2_Config+0x15c>)
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	4a14      	ldr	r2, [pc, #80]	; (8003ca4 <RCCEx_PLL2_Config+0x15c>)
 8003c52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c58:	e005      	b.n	8003c66 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003c5a:	4b12      	ldr	r3, [pc, #72]	; (8003ca4 <RCCEx_PLL2_Config+0x15c>)
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	4a11      	ldr	r2, [pc, #68]	; (8003ca4 <RCCEx_PLL2_Config+0x15c>)
 8003c60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003c66:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <RCCEx_PLL2_Config+0x15c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a0e      	ldr	r2, [pc, #56]	; (8003ca4 <RCCEx_PLL2_Config+0x15c>)
 8003c6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c72:	f7fd fa8b 	bl	800118c <HAL_GetTick>
 8003c76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003c78:	e008      	b.n	8003c8c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003c7a:	f7fd fa87 	bl	800118c <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e006      	b.n	8003c9a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003c8c:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <RCCEx_PLL2_Config+0x15c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0f0      	beq.n	8003c7a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	58024400 	.word	0x58024400
 8003ca8:	ffff0007 	.word	0xffff0007

08003cac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003cba:	4b53      	ldr	r3, [pc, #332]	; (8003e08 <RCCEx_PLL3_Config+0x15c>)
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	f003 0303 	and.w	r3, r3, #3
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d101      	bne.n	8003cca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e099      	b.n	8003dfe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003cca:	4b4f      	ldr	r3, [pc, #316]	; (8003e08 <RCCEx_PLL3_Config+0x15c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a4e      	ldr	r2, [pc, #312]	; (8003e08 <RCCEx_PLL3_Config+0x15c>)
 8003cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd6:	f7fd fa59 	bl	800118c <HAL_GetTick>
 8003cda:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003cdc:	e008      	b.n	8003cf0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003cde:	f7fd fa55 	bl	800118c <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e086      	b.n	8003dfe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003cf0:	4b45      	ldr	r3, [pc, #276]	; (8003e08 <RCCEx_PLL3_Config+0x15c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1f0      	bne.n	8003cde <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003cfc:	4b42      	ldr	r3, [pc, #264]	; (8003e08 <RCCEx_PLL3_Config+0x15c>)
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d00:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	051b      	lsls	r3, r3, #20
 8003d0a:	493f      	ldr	r1, [pc, #252]	; (8003e08 <RCCEx_PLL3_Config+0x15c>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	628b      	str	r3, [r1, #40]	; 0x28
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	3b01      	subs	r3, #1
 8003d16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	025b      	lsls	r3, r3, #9
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	431a      	orrs	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	041b      	lsls	r3, r3, #16
 8003d2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	061b      	lsls	r3, r3, #24
 8003d3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d40:	4931      	ldr	r1, [pc, #196]	; (8003e08 <RCCEx_PLL3_Config+0x15c>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003d46:	4b30      	ldr	r3, [pc, #192]	; (8003e08 <RCCEx_PLL3_Config+0x15c>)
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	492d      	ldr	r1, [pc, #180]	; (8003e08 <RCCEx_PLL3_Config+0x15c>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003d58:	4b2b      	ldr	r3, [pc, #172]	; (8003e08 <RCCEx_PLL3_Config+0x15c>)
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	4928      	ldr	r1, [pc, #160]	; (8003e08 <RCCEx_PLL3_Config+0x15c>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003d6a:	4b27      	ldr	r3, [pc, #156]	; (8003e08 <RCCEx_PLL3_Config+0x15c>)
 8003d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6e:	4a26      	ldr	r2, [pc, #152]	; (8003e08 <RCCEx_PLL3_Config+0x15c>)
 8003d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003d76:	4b24      	ldr	r3, [pc, #144]	; (8003e08 <RCCEx_PLL3_Config+0x15c>)
 8003d78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d7a:	4b24      	ldr	r3, [pc, #144]	; (8003e0c <RCCEx_PLL3_Config+0x160>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	69d2      	ldr	r2, [r2, #28]
 8003d82:	00d2      	lsls	r2, r2, #3
 8003d84:	4920      	ldr	r1, [pc, #128]	; (8003e08 <RCCEx_PLL3_Config+0x15c>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003d8a:	4b1f      	ldr	r3, [pc, #124]	; (8003e08 <RCCEx_PLL3_Config+0x15c>)
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8e:	4a1e      	ldr	r2, [pc, #120]	; (8003e08 <RCCEx_PLL3_Config+0x15c>)
 8003d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d106      	bne.n	8003daa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003d9c:	4b1a      	ldr	r3, [pc, #104]	; (8003e08 <RCCEx_PLL3_Config+0x15c>)
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	4a19      	ldr	r2, [pc, #100]	; (8003e08 <RCCEx_PLL3_Config+0x15c>)
 8003da2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003da6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003da8:	e00f      	b.n	8003dca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d106      	bne.n	8003dbe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003db0:	4b15      	ldr	r3, [pc, #84]	; (8003e08 <RCCEx_PLL3_Config+0x15c>)
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	4a14      	ldr	r2, [pc, #80]	; (8003e08 <RCCEx_PLL3_Config+0x15c>)
 8003db6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003dba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003dbc:	e005      	b.n	8003dca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003dbe:	4b12      	ldr	r3, [pc, #72]	; (8003e08 <RCCEx_PLL3_Config+0x15c>)
 8003dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc2:	4a11      	ldr	r2, [pc, #68]	; (8003e08 <RCCEx_PLL3_Config+0x15c>)
 8003dc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dc8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003dca:	4b0f      	ldr	r3, [pc, #60]	; (8003e08 <RCCEx_PLL3_Config+0x15c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a0e      	ldr	r2, [pc, #56]	; (8003e08 <RCCEx_PLL3_Config+0x15c>)
 8003dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd6:	f7fd f9d9 	bl	800118c <HAL_GetTick>
 8003dda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ddc:	e008      	b.n	8003df0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003dde:	f7fd f9d5 	bl	800118c <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e006      	b.n	8003dfe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003df0:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <RCCEx_PLL3_Config+0x15c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0f0      	beq.n	8003dde <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	58024400 	.word	0x58024400
 8003e0c:	ffff0007 	.word	0xffff0007

08003e10 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e0f1      	b.n	8004006 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a78      	ldr	r2, [pc, #480]	; (8004010 <HAL_SPI_Init+0x200>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00f      	beq.n	8003e52 <HAL_SPI_Init+0x42>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a77      	ldr	r2, [pc, #476]	; (8004014 <HAL_SPI_Init+0x204>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d00a      	beq.n	8003e52 <HAL_SPI_Init+0x42>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a75      	ldr	r2, [pc, #468]	; (8004018 <HAL_SPI_Init+0x208>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d005      	beq.n	8003e52 <HAL_SPI_Init+0x42>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	2b0f      	cmp	r3, #15
 8003e4c:	d901      	bls.n	8003e52 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e0d9      	b.n	8004006 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 ff66 	bl	8004d24 <SPI_GetPacketSize>
 8003e58:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a6c      	ldr	r2, [pc, #432]	; (8004010 <HAL_SPI_Init+0x200>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d00c      	beq.n	8003e7e <HAL_SPI_Init+0x6e>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a6a      	ldr	r2, [pc, #424]	; (8004014 <HAL_SPI_Init+0x204>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d007      	beq.n	8003e7e <HAL_SPI_Init+0x6e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a69      	ldr	r2, [pc, #420]	; (8004018 <HAL_SPI_Init+0x208>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d002      	beq.n	8003e7e <HAL_SPI_Init+0x6e>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d811      	bhi.n	8003ea2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003e82:	4a63      	ldr	r2, [pc, #396]	; (8004010 <HAL_SPI_Init+0x200>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d009      	beq.n	8003e9c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a61      	ldr	r2, [pc, #388]	; (8004014 <HAL_SPI_Init+0x204>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d004      	beq.n	8003e9c <HAL_SPI_Init+0x8c>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a60      	ldr	r2, [pc, #384]	; (8004018 <HAL_SPI_Init+0x208>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d104      	bne.n	8003ea6 <HAL_SPI_Init+0x96>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2b10      	cmp	r3, #16
 8003ea0:	d901      	bls.n	8003ea6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e0af      	b.n	8004006 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fc ff3a 	bl	8000d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0201 	bic.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8003ee2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eec:	d119      	bne.n	8003f22 <HAL_SPI_Init+0x112>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ef6:	d103      	bne.n	8003f00 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d008      	beq.n	8003f12 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10c      	bne.n	8003f22 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003f0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f10:	d107      	bne.n	8003f22 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f20:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69da      	ldr	r2, [r3, #28]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f34:	ea42 0103 	orr.w	r1, r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f82:	ea42 0103 	orr.w	r1, r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d113      	bne.n	8003fc2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fac:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fc0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0201 	bic.w	r2, r2, #1
 8003fd0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40013000 	.word	0x40013000
 8004014:	40003800 	.word	0x40003800
 8004018:	40003c00 	.word	0x40003c00

0800401c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08a      	sub	sp, #40	; 0x28
 8004020:	af02      	add	r7, sp, #8
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3320      	adds	r3, #32
 8004032:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004034:	2300      	movs	r3, #0
 8004036:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800403e:	2b01      	cmp	r3, #1
 8004040:	d101      	bne.n	8004046 <HAL_SPI_Transmit+0x2a>
 8004042:	2302      	movs	r3, #2
 8004044:	e1d7      	b.n	80043f6 <HAL_SPI_Transmit+0x3da>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800404e:	f7fd f89d 	bl	800118c <HAL_GetTick>
 8004052:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b01      	cmp	r3, #1
 800405e:	d007      	beq.n	8004070 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8004060:	2302      	movs	r3, #2
 8004062:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800406c:	7efb      	ldrb	r3, [r7, #27]
 800406e:	e1c2      	b.n	80043f6 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <HAL_SPI_Transmit+0x60>
 8004076:	88fb      	ldrh	r3, [r7, #6]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d107      	bne.n	800408c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004088:	7efb      	ldrb	r3, [r7, #27]
 800408a:	e1b4      	b.n	80043f6 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2203      	movs	r2, #3
 8004090:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	88fa      	ldrh	r2, [r7, #6]
 80040a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	88fa      	ldrh	r2, [r7, #6]
 80040ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80040dc:	d107      	bne.n	80040ee <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	4b96      	ldr	r3, [pc, #600]	; (8004350 <HAL_SPI_Transmit+0x334>)
 80040f6:	4013      	ands	r3, r2
 80040f8:	88f9      	ldrh	r1, [r7, #6]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	6812      	ldr	r2, [r2, #0]
 80040fe:	430b      	orrs	r3, r1
 8004100:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f042 0201 	orr.w	r2, r2, #1
 8004110:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800411a:	d107      	bne.n	800412c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	2b0f      	cmp	r3, #15
 8004132:	d947      	bls.n	80041c4 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004134:	e03f      	b.n	80041b6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b02      	cmp	r3, #2
 8004142:	d114      	bne.n	800416e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6812      	ldr	r2, [r2, #0]
 800414e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004154:	1d1a      	adds	r2, r3, #4
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004160:	b29b      	uxth	r3, r3
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800416c:	e023      	b.n	80041b6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800416e:	f7fd f80d 	bl	800118c <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d803      	bhi.n	8004186 <HAL_SPI_Transmit+0x16a>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004184:	d102      	bne.n	800418c <HAL_SPI_Transmit+0x170>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d114      	bne.n	80041b6 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 fcfb 	bl	8004b88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e11f      	b.n	80043f6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1b9      	bne.n	8004136 <HAL_SPI_Transmit+0x11a>
 80041c2:	e0f2      	b.n	80043aa <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	2b07      	cmp	r3, #7
 80041ca:	f240 80e7 	bls.w	800439c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80041ce:	e05d      	b.n	800428c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d132      	bne.n	8004244 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d918      	bls.n	800421c <HAL_SPI_Transmit+0x200>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d014      	beq.n	800421c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6812      	ldr	r2, [r2, #0]
 80041fc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004202:	1d1a      	adds	r2, r3, #4
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b02      	subs	r3, #2
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800421a:	e037      	b.n	800428c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004220:	881a      	ldrh	r2, [r3, #0]
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422a:	1c9a      	adds	r2, r3, #2
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004242:	e023      	b.n	800428c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004244:	f7fc ffa2 	bl	800118c <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	429a      	cmp	r2, r3
 8004252:	d803      	bhi.n	800425c <HAL_SPI_Transmit+0x240>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425a:	d102      	bne.n	8004262 <HAL_SPI_Transmit+0x246>
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d114      	bne.n	800428c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 fc90 	bl	8004b88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004276:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e0b4      	b.n	80043f6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004292:	b29b      	uxth	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d19b      	bne.n	80041d0 <HAL_SPI_Transmit+0x1b4>
 8004298:	e087      	b.n	80043aa <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d155      	bne.n	8004354 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d918      	bls.n	80042e6 <HAL_SPI_Transmit+0x2ca>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b8:	2b40      	cmp	r3, #64	; 0x40
 80042ba:	d914      	bls.n	80042e6 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6812      	ldr	r2, [r2, #0]
 80042c6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042cc:	1d1a      	adds	r2, r3, #4
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80042d8:	b29b      	uxth	r3, r3
 80042da:	3b04      	subs	r3, #4
 80042dc:	b29a      	uxth	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80042e4:	e05a      	b.n	800439c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d917      	bls.n	8004322 <HAL_SPI_Transmit+0x306>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d013      	beq.n	8004322 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fe:	881a      	ldrh	r2, [r3, #0]
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004308:	1c9a      	adds	r2, r3, #2
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004314:	b29b      	uxth	r3, r3
 8004316:	3b02      	subs	r3, #2
 8004318:	b29a      	uxth	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004320:	e03c      	b.n	800439c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3320      	adds	r3, #32
 800432c:	7812      	ldrb	r2, [r2, #0]
 800432e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004340:	b29b      	uxth	r3, r3
 8004342:	3b01      	subs	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800434c:	e026      	b.n	800439c <HAL_SPI_Transmit+0x380>
 800434e:	bf00      	nop
 8004350:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004354:	f7fc ff1a 	bl	800118c <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d803      	bhi.n	800436c <HAL_SPI_Transmit+0x350>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436a:	d102      	bne.n	8004372 <HAL_SPI_Transmit+0x356>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d114      	bne.n	800439c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 fc08 	bl	8004b88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004386:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e02c      	b.n	80043f6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f47f af78 	bne.w	800429a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2200      	movs	r2, #0
 80043b2:	2108      	movs	r1, #8
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 fc87 	bl	8004cc8 <SPI_WaitOnFlagUntilTimeout>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d007      	beq.n	80043d0 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043c6:	f043 0220 	orr.w	r2, r3, #32
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 fbd9 	bl	8004b88 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80043f4:	7efb      	ldrb	r3, [r7, #27]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3720      	adds	r7, #32
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop

08004400 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08a      	sub	sp, #40	; 0x28
 8004404:	af02      	add	r7, sp, #8
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	603b      	str	r3, [r7, #0]
 800440c:	4613      	mov	r3, r2
 800440e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004410:	2300      	movs	r3, #0
 8004412:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3330      	adds	r3, #48	; 0x30
 800441a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004424:	d112      	bne.n	800444c <HAL_SPI_Receive+0x4c>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10e      	bne.n	800444c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2204      	movs	r2, #4
 8004432:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004436:	88fa      	ldrh	r2, [r7, #6]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	4613      	mov	r3, r2
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	68b9      	ldr	r1, [r7, #8]
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f978 	bl	8004738 <HAL_SPI_TransmitReceive>
 8004448:	4603      	mov	r3, r0
 800444a:	e16f      	b.n	800472c <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_SPI_Receive+0x5a>
 8004456:	2302      	movs	r3, #2
 8004458:	e168      	b.n	800472c <HAL_SPI_Receive+0x32c>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004462:	f7fc fe93 	bl	800118c <HAL_GetTick>
 8004466:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d007      	beq.n	8004484 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8004474:	2302      	movs	r3, #2
 8004476:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004480:	7ffb      	ldrb	r3, [r7, #31]
 8004482:	e153      	b.n	800472c <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <HAL_SPI_Receive+0x90>
 800448a:	88fb      	ldrh	r3, [r7, #6]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d107      	bne.n	80044a0 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800449c:	7ffb      	ldrb	r3, [r7, #31]
 800449e:	e145      	b.n	800472c <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2204      	movs	r2, #4
 80044a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	88fa      	ldrh	r2, [r7, #6]
 80044ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	88fa      	ldrh	r2, [r7, #6]
 80044c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80044f0:	d107      	bne.n	8004502 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004500:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	4b8a      	ldr	r3, [pc, #552]	; (8004734 <HAL_SPI_Receive+0x334>)
 800450a:	4013      	ands	r3, r2
 800450c:	88f9      	ldrh	r1, [r7, #6]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	6812      	ldr	r2, [r2, #0]
 8004512:	430b      	orrs	r3, r1
 8004514:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0201 	orr.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800452e:	d107      	bne.n	8004540 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	2b0f      	cmp	r3, #15
 8004546:	d948      	bls.n	80045da <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004548:	e040      	b.n	80045cc <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	695a      	ldr	r2, [r3, #20]
 8004550:	f248 0308 	movw	r3, #32776	; 0x8008
 8004554:	4013      	ands	r3, r2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d014      	beq.n	8004584 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004562:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004564:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800456a:	1d1a      	adds	r2, r3, #4
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004576:	b29b      	uxth	r3, r3
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004582:	e023      	b.n	80045cc <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004584:	f7fc fe02 	bl	800118c <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d803      	bhi.n	800459c <HAL_SPI_Receive+0x19c>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459a:	d102      	bne.n	80045a2 <HAL_SPI_Receive+0x1a2>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d114      	bne.n	80045cc <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 faf0 	bl	8004b88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e0af      	b.n	800472c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1b8      	bne.n	800454a <HAL_SPI_Receive+0x14a>
 80045d8:	e095      	b.n	8004706 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	2b07      	cmp	r3, #7
 80045e0:	f240 808b 	bls.w	80046fa <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80045e4:	e03f      	b.n	8004666 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d114      	bne.n	800461e <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	8812      	ldrh	r2, [r2, #0]
 80045fc:	b292      	uxth	r2, r2
 80045fe:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004604:	1c9a      	adds	r2, r3, #2
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004610:	b29b      	uxth	r3, r3
 8004612:	3b01      	subs	r3, #1
 8004614:	b29a      	uxth	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800461c:	e023      	b.n	8004666 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800461e:	f7fc fdb5 	bl	800118c <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	429a      	cmp	r2, r3
 800462c:	d803      	bhi.n	8004636 <HAL_SPI_Receive+0x236>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004634:	d102      	bne.n	800463c <HAL_SPI_Receive+0x23c>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d114      	bne.n	8004666 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 faa3 	bl	8004b88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004650:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e062      	b.n	800472c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1b9      	bne.n	80045e6 <HAL_SPI_Receive+0x1e6>
 8004672:	e048      	b.n	8004706 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b01      	cmp	r3, #1
 8004680:	d117      	bne.n	80046b2 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800468e:	7812      	ldrb	r2, [r2, #0]
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80046b0:	e023      	b.n	80046fa <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046b2:	f7fc fd6b 	bl	800118c <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d803      	bhi.n	80046ca <HAL_SPI_Receive+0x2ca>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c8:	d102      	bne.n	80046d0 <HAL_SPI_Receive+0x2d0>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d114      	bne.n	80046fa <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 fa59 	bl	8004b88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e018      	b.n	800472c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004700:	b29b      	uxth	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1b6      	bne.n	8004674 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 fa3e 	bl	8004b88 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800472a:	7ffb      	ldrb	r3, [r7, #31]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3720      	adds	r7, #32
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	ffff0000 	.word	0xffff0000

08004738 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08e      	sub	sp, #56	; 0x38
 800473c:	af02      	add	r7, sp, #8
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3320      	adds	r3, #32
 8004752:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3330      	adds	r3, #48	; 0x30
 800475a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004762:	2b01      	cmp	r3, #1
 8004764:	d101      	bne.n	800476a <HAL_SPI_TransmitReceive+0x32>
 8004766:	2302      	movs	r3, #2
 8004768:	e209      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x446>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004772:	f7fc fd0b 	bl	800118c <HAL_GetTick>
 8004776:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8004778:	887b      	ldrh	r3, [r7, #2]
 800477a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800477c:	887b      	ldrh	r3, [r7, #2]
 800477e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004786:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800478e:	7efb      	ldrb	r3, [r7, #27]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d014      	beq.n	80047be <HAL_SPI_TransmitReceive+0x86>
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800479a:	d106      	bne.n	80047aa <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d102      	bne.n	80047aa <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80047a4:	7efb      	ldrb	r3, [r7, #27]
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d009      	beq.n	80047be <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
 80047ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80047b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047bc:	e1df      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <HAL_SPI_TransmitReceive+0x98>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <HAL_SPI_TransmitReceive+0x98>
 80047ca:	887b      	ldrh	r3, [r7, #2]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d109      	bne.n	80047e4 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80047de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047e2:	e1cc      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d003      	beq.n	80047f8 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2205      	movs	r2, #5
 80047f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	887a      	ldrh	r2, [r7, #2]
 800480a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	887a      	ldrh	r2, [r7, #2]
 8004812:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	887a      	ldrh	r2, [r7, #2]
 8004820:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	887a      	ldrh	r2, [r7, #2]
 8004828:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	4b82      	ldr	r3, [pc, #520]	; (8004a48 <HAL_SPI_TransmitReceive+0x310>)
 8004840:	4013      	ands	r3, r2
 8004842:	8879      	ldrh	r1, [r7, #2]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	6812      	ldr	r2, [r2, #0]
 8004848:	430b      	orrs	r3, r1
 800484a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004864:	d107      	bne.n	8004876 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004874:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	2b0f      	cmp	r3, #15
 800487c:	d970      	bls.n	8004960 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800487e:	e068      	b.n	8004952 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b02      	cmp	r3, #2
 800488c:	d11a      	bne.n	80048c4 <HAL_SPI_TransmitReceive+0x18c>
 800488e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004890:	2b00      	cmp	r3, #0
 8004892:	d017      	beq.n	80048c4 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6812      	ldr	r2, [r2, #0]
 800489e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a4:	1d1a      	adds	r2, r3, #4
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80048c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695a      	ldr	r2, [r3, #20]
 80048ca:	f248 0308 	movw	r3, #32776	; 0x8008
 80048ce:	4013      	ands	r3, r2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d01a      	beq.n	800490a <HAL_SPI_TransmitReceive+0x1d2>
 80048d4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d017      	beq.n	800490a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80048e4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048ea:	1d1a      	adds	r2, r3, #4
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004908:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800490a:	f7fc fc3f 	bl	800118c <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004916:	429a      	cmp	r2, r3
 8004918:	d803      	bhi.n	8004922 <HAL_SPI_TransmitReceive+0x1ea>
 800491a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004920:	d102      	bne.n	8004928 <HAL_SPI_TransmitReceive+0x1f0>
 8004922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004924:	2b00      	cmp	r3, #0
 8004926:	d114      	bne.n	8004952 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 f92d 	bl	8004b88 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800493c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e115      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004952:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004954:	2b00      	cmp	r3, #0
 8004956:	d193      	bne.n	8004880 <HAL_SPI_TransmitReceive+0x148>
 8004958:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800495a:	2b00      	cmp	r3, #0
 800495c:	d190      	bne.n	8004880 <HAL_SPI_TransmitReceive+0x148>
 800495e:	e0e7      	b.n	8004b30 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	2b07      	cmp	r3, #7
 8004966:	f240 80dd 	bls.w	8004b24 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800496a:	e066      	b.n	8004a3a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b02      	cmp	r3, #2
 8004978:	d119      	bne.n	80049ae <HAL_SPI_TransmitReceive+0x276>
 800497a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800497c:	2b00      	cmp	r3, #0
 800497e:	d016      	beq.n	80049ae <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004984:	881a      	ldrh	r2, [r3, #0]
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498e:	1c9a      	adds	r2, r3, #2
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800499a:	b29b      	uxth	r3, r3
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80049ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d11a      	bne.n	80049f2 <HAL_SPI_TransmitReceive+0x2ba>
 80049bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d017      	beq.n	80049f2 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049c6:	6a3a      	ldr	r2, [r7, #32]
 80049c8:	8812      	ldrh	r2, [r2, #0]
 80049ca:	b292      	uxth	r2, r2
 80049cc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049d2:	1c9a      	adds	r2, r3, #2
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80049de:	b29b      	uxth	r3, r3
 80049e0:	3b01      	subs	r3, #1
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80049f0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049f2:	f7fc fbcb 	bl	800118c <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d803      	bhi.n	8004a0a <HAL_SPI_TransmitReceive+0x2d2>
 8004a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a08:	d102      	bne.n	8004a10 <HAL_SPI_TransmitReceive+0x2d8>
 8004a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d114      	bne.n	8004a3a <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 f8b9 	bl	8004b88 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e0a1      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004a3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d195      	bne.n	800496c <HAL_SPI_TransmitReceive+0x234>
 8004a40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d192      	bne.n	800496c <HAL_SPI_TransmitReceive+0x234>
 8004a46:	e073      	b.n	8004b30 <HAL_SPI_TransmitReceive+0x3f8>
 8004a48:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d11b      	bne.n	8004a92 <HAL_SPI_TransmitReceive+0x35a>
 8004a5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d018      	beq.n	8004a92 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3320      	adds	r3, #32
 8004a6a:	7812      	ldrb	r2, [r2, #0]
 8004a6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004a90:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d11d      	bne.n	8004adc <HAL_SPI_TransmitReceive+0x3a4>
 8004aa0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d01a      	beq.n	8004adc <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ab2:	7812      	ldrb	r2, [r2, #0]
 8004ab4:	b2d2      	uxtb	r2, r2
 8004ab6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	3b01      	subs	r3, #1
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004ada:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004adc:	f7fc fb56 	bl	800118c <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d803      	bhi.n	8004af4 <HAL_SPI_TransmitReceive+0x3bc>
 8004aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af2:	d102      	bne.n	8004afa <HAL_SPI_TransmitReceive+0x3c2>
 8004af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d114      	bne.n	8004b24 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 f844 	bl	8004b88 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e02c      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004b24:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d190      	bne.n	8004a4c <HAL_SPI_TransmitReceive+0x314>
 8004b2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d18d      	bne.n	8004a4c <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8004b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	2200      	movs	r2, #0
 8004b38:	2108      	movs	r1, #8
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 f8c4 	bl	8004cc8 <SPI_WaitOnFlagUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d007      	beq.n	8004b56 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b4c:	f043 0220 	orr.w	r2, r3, #32
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 f816 	bl	8004b88 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e001      	b.n	8004b7e <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8004b7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3730      	adds	r7, #48	; 0x30
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop

08004b88 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699a      	ldr	r2, [r3, #24]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0208 	orr.w	r2, r2, #8
 8004ba6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699a      	ldr	r2, [r3, #24]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0210 	orr.w	r2, r2, #16
 8004bb6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 0201 	bic.w	r2, r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6919      	ldr	r1, [r3, #16]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	4b3c      	ldr	r3, [pc, #240]	; (8004cc4 <SPI_CloseTransfer+0x13c>)
 8004bd4:	400b      	ands	r3, r1
 8004bd6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689a      	ldr	r2, [r3, #8]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004be6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b04      	cmp	r3, #4
 8004bf2:	d014      	beq.n	8004c1e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00f      	beq.n	8004c1e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	699a      	ldr	r2, [r3, #24]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f042 0220 	orr.w	r2, r2, #32
 8004c1c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b03      	cmp	r3, #3
 8004c28:	d014      	beq.n	8004c54 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00f      	beq.n	8004c54 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c3a:	f043 0204 	orr.w	r2, r3, #4
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c52:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00f      	beq.n	8004c7e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c64:	f043 0201 	orr.w	r2, r3, #1
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	699a      	ldr	r2, [r3, #24]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c7c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00f      	beq.n	8004ca8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c8e:	f043 0208 	orr.w	r2, r3, #8
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699a      	ldr	r2, [r3, #24]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ca6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8004cb8:	bf00      	nop
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr
 8004cc4:	fffffc90 	.word	0xfffffc90

08004cc8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004cd8:	e010      	b.n	8004cfc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cda:	f7fc fa57 	bl	800118c <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d803      	bhi.n	8004cf2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf0:	d102      	bne.n	8004cf8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e00f      	b.n	8004d1c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	695a      	ldr	r2, [r3, #20]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	4013      	ands	r3, r2
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	bf0c      	ite	eq
 8004d0c:	2301      	moveq	r3, #1
 8004d0e:	2300      	movne	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	461a      	mov	r2, r3
 8004d14:	79fb      	ldrb	r3, [r7, #7]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d0df      	beq.n	8004cda <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d30:	095b      	lsrs	r3, r3, #5
 8004d32:	3301      	adds	r3, #1
 8004d34:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	3307      	adds	r3, #7
 8004d42:	08db      	lsrs	r3, r3, #3
 8004d44:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	fb02 f303 	mul.w	r3, r2, r3
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b082      	sub	sp, #8
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e042      	b.n	8004df2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d106      	bne.n	8004d84 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7fc f83c 	bl	8000dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2224      	movs	r2, #36	; 0x24
 8004d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0201 	bic.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f82d 	bl	8004dfc <UART_SetConfig>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d101      	bne.n	8004dac <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e022      	b.n	8004df2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 fd89 	bl	80058cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dc8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dd8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f042 0201 	orr.w	r2, r2, #1
 8004de8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 fe10 	bl	8005a10 <UART_CheckIdleState>
 8004df0:	4603      	mov	r3, r0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
	...

08004dfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e00:	b092      	sub	sp, #72	; 0x48
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	431a      	orrs	r2, r3
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	4bbe      	ldr	r3, [pc, #760]	; (8005124 <UART_SetConfig+0x328>)
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	6812      	ldr	r2, [r2, #0]
 8004e32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e34:	430b      	orrs	r3, r1
 8004e36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	68da      	ldr	r2, [r3, #12]
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4ab3      	ldr	r2, [pc, #716]	; (8005128 <UART_SetConfig+0x32c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d004      	beq.n	8004e68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e64:	4313      	orrs	r3, r2
 8004e66:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	4baf      	ldr	r3, [pc, #700]	; (800512c <UART_SetConfig+0x330>)
 8004e70:	4013      	ands	r3, r2
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	6812      	ldr	r2, [r2, #0]
 8004e76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e78:	430b      	orrs	r3, r1
 8004e7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e82:	f023 010f 	bic.w	r1, r3, #15
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4aa6      	ldr	r2, [pc, #664]	; (8005130 <UART_SetConfig+0x334>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d177      	bne.n	8004f8c <UART_SetConfig+0x190>
 8004e9c:	4ba5      	ldr	r3, [pc, #660]	; (8005134 <UART_SetConfig+0x338>)
 8004e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ea4:	2b28      	cmp	r3, #40	; 0x28
 8004ea6:	d86d      	bhi.n	8004f84 <UART_SetConfig+0x188>
 8004ea8:	a201      	add	r2, pc, #4	; (adr r2, 8004eb0 <UART_SetConfig+0xb4>)
 8004eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eae:	bf00      	nop
 8004eb0:	08004f55 	.word	0x08004f55
 8004eb4:	08004f85 	.word	0x08004f85
 8004eb8:	08004f85 	.word	0x08004f85
 8004ebc:	08004f85 	.word	0x08004f85
 8004ec0:	08004f85 	.word	0x08004f85
 8004ec4:	08004f85 	.word	0x08004f85
 8004ec8:	08004f85 	.word	0x08004f85
 8004ecc:	08004f85 	.word	0x08004f85
 8004ed0:	08004f5d 	.word	0x08004f5d
 8004ed4:	08004f85 	.word	0x08004f85
 8004ed8:	08004f85 	.word	0x08004f85
 8004edc:	08004f85 	.word	0x08004f85
 8004ee0:	08004f85 	.word	0x08004f85
 8004ee4:	08004f85 	.word	0x08004f85
 8004ee8:	08004f85 	.word	0x08004f85
 8004eec:	08004f85 	.word	0x08004f85
 8004ef0:	08004f65 	.word	0x08004f65
 8004ef4:	08004f85 	.word	0x08004f85
 8004ef8:	08004f85 	.word	0x08004f85
 8004efc:	08004f85 	.word	0x08004f85
 8004f00:	08004f85 	.word	0x08004f85
 8004f04:	08004f85 	.word	0x08004f85
 8004f08:	08004f85 	.word	0x08004f85
 8004f0c:	08004f85 	.word	0x08004f85
 8004f10:	08004f6d 	.word	0x08004f6d
 8004f14:	08004f85 	.word	0x08004f85
 8004f18:	08004f85 	.word	0x08004f85
 8004f1c:	08004f85 	.word	0x08004f85
 8004f20:	08004f85 	.word	0x08004f85
 8004f24:	08004f85 	.word	0x08004f85
 8004f28:	08004f85 	.word	0x08004f85
 8004f2c:	08004f85 	.word	0x08004f85
 8004f30:	08004f75 	.word	0x08004f75
 8004f34:	08004f85 	.word	0x08004f85
 8004f38:	08004f85 	.word	0x08004f85
 8004f3c:	08004f85 	.word	0x08004f85
 8004f40:	08004f85 	.word	0x08004f85
 8004f44:	08004f85 	.word	0x08004f85
 8004f48:	08004f85 	.word	0x08004f85
 8004f4c:	08004f85 	.word	0x08004f85
 8004f50:	08004f7d 	.word	0x08004f7d
 8004f54:	2301      	movs	r3, #1
 8004f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f5a:	e222      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8004f5c:	2304      	movs	r3, #4
 8004f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f62:	e21e      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8004f64:	2308      	movs	r3, #8
 8004f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f6a:	e21a      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8004f6c:	2310      	movs	r3, #16
 8004f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f72:	e216      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8004f74:	2320      	movs	r3, #32
 8004f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f7a:	e212      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8004f7c:	2340      	movs	r3, #64	; 0x40
 8004f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f82:	e20e      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8004f84:	2380      	movs	r3, #128	; 0x80
 8004f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f8a:	e20a      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a69      	ldr	r2, [pc, #420]	; (8005138 <UART_SetConfig+0x33c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d130      	bne.n	8004ff8 <UART_SetConfig+0x1fc>
 8004f96:	4b67      	ldr	r3, [pc, #412]	; (8005134 <UART_SetConfig+0x338>)
 8004f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	2b05      	cmp	r3, #5
 8004fa0:	d826      	bhi.n	8004ff0 <UART_SetConfig+0x1f4>
 8004fa2:	a201      	add	r2, pc, #4	; (adr r2, 8004fa8 <UART_SetConfig+0x1ac>)
 8004fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa8:	08004fc1 	.word	0x08004fc1
 8004fac:	08004fc9 	.word	0x08004fc9
 8004fb0:	08004fd1 	.word	0x08004fd1
 8004fb4:	08004fd9 	.word	0x08004fd9
 8004fb8:	08004fe1 	.word	0x08004fe1
 8004fbc:	08004fe9 	.word	0x08004fe9
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fc6:	e1ec      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8004fc8:	2304      	movs	r3, #4
 8004fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fce:	e1e8      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8004fd0:	2308      	movs	r3, #8
 8004fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fd6:	e1e4      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8004fd8:	2310      	movs	r3, #16
 8004fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fde:	e1e0      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8004fe0:	2320      	movs	r3, #32
 8004fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fe6:	e1dc      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8004fe8:	2340      	movs	r3, #64	; 0x40
 8004fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fee:	e1d8      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8004ff0:	2380      	movs	r3, #128	; 0x80
 8004ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ff6:	e1d4      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a4f      	ldr	r2, [pc, #316]	; (800513c <UART_SetConfig+0x340>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d130      	bne.n	8005064 <UART_SetConfig+0x268>
 8005002:	4b4c      	ldr	r3, [pc, #304]	; (8005134 <UART_SetConfig+0x338>)
 8005004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	2b05      	cmp	r3, #5
 800500c:	d826      	bhi.n	800505c <UART_SetConfig+0x260>
 800500e:	a201      	add	r2, pc, #4	; (adr r2, 8005014 <UART_SetConfig+0x218>)
 8005010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005014:	0800502d 	.word	0x0800502d
 8005018:	08005035 	.word	0x08005035
 800501c:	0800503d 	.word	0x0800503d
 8005020:	08005045 	.word	0x08005045
 8005024:	0800504d 	.word	0x0800504d
 8005028:	08005055 	.word	0x08005055
 800502c:	2300      	movs	r3, #0
 800502e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005032:	e1b6      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8005034:	2304      	movs	r3, #4
 8005036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800503a:	e1b2      	b.n	80053a2 <UART_SetConfig+0x5a6>
 800503c:	2308      	movs	r3, #8
 800503e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005042:	e1ae      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8005044:	2310      	movs	r3, #16
 8005046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800504a:	e1aa      	b.n	80053a2 <UART_SetConfig+0x5a6>
 800504c:	2320      	movs	r3, #32
 800504e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005052:	e1a6      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8005054:	2340      	movs	r3, #64	; 0x40
 8005056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800505a:	e1a2      	b.n	80053a2 <UART_SetConfig+0x5a6>
 800505c:	2380      	movs	r3, #128	; 0x80
 800505e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005062:	e19e      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a35      	ldr	r2, [pc, #212]	; (8005140 <UART_SetConfig+0x344>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d130      	bne.n	80050d0 <UART_SetConfig+0x2d4>
 800506e:	4b31      	ldr	r3, [pc, #196]	; (8005134 <UART_SetConfig+0x338>)
 8005070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005072:	f003 0307 	and.w	r3, r3, #7
 8005076:	2b05      	cmp	r3, #5
 8005078:	d826      	bhi.n	80050c8 <UART_SetConfig+0x2cc>
 800507a:	a201      	add	r2, pc, #4	; (adr r2, 8005080 <UART_SetConfig+0x284>)
 800507c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005080:	08005099 	.word	0x08005099
 8005084:	080050a1 	.word	0x080050a1
 8005088:	080050a9 	.word	0x080050a9
 800508c:	080050b1 	.word	0x080050b1
 8005090:	080050b9 	.word	0x080050b9
 8005094:	080050c1 	.word	0x080050c1
 8005098:	2300      	movs	r3, #0
 800509a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800509e:	e180      	b.n	80053a2 <UART_SetConfig+0x5a6>
 80050a0:	2304      	movs	r3, #4
 80050a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050a6:	e17c      	b.n	80053a2 <UART_SetConfig+0x5a6>
 80050a8:	2308      	movs	r3, #8
 80050aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ae:	e178      	b.n	80053a2 <UART_SetConfig+0x5a6>
 80050b0:	2310      	movs	r3, #16
 80050b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050b6:	e174      	b.n	80053a2 <UART_SetConfig+0x5a6>
 80050b8:	2320      	movs	r3, #32
 80050ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050be:	e170      	b.n	80053a2 <UART_SetConfig+0x5a6>
 80050c0:	2340      	movs	r3, #64	; 0x40
 80050c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050c6:	e16c      	b.n	80053a2 <UART_SetConfig+0x5a6>
 80050c8:	2380      	movs	r3, #128	; 0x80
 80050ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ce:	e168      	b.n	80053a2 <UART_SetConfig+0x5a6>
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a1b      	ldr	r2, [pc, #108]	; (8005144 <UART_SetConfig+0x348>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d142      	bne.n	8005160 <UART_SetConfig+0x364>
 80050da:	4b16      	ldr	r3, [pc, #88]	; (8005134 <UART_SetConfig+0x338>)
 80050dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050de:	f003 0307 	and.w	r3, r3, #7
 80050e2:	2b05      	cmp	r3, #5
 80050e4:	d838      	bhi.n	8005158 <UART_SetConfig+0x35c>
 80050e6:	a201      	add	r2, pc, #4	; (adr r2, 80050ec <UART_SetConfig+0x2f0>)
 80050e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ec:	08005105 	.word	0x08005105
 80050f0:	0800510d 	.word	0x0800510d
 80050f4:	08005115 	.word	0x08005115
 80050f8:	0800511d 	.word	0x0800511d
 80050fc:	08005149 	.word	0x08005149
 8005100:	08005151 	.word	0x08005151
 8005104:	2300      	movs	r3, #0
 8005106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800510a:	e14a      	b.n	80053a2 <UART_SetConfig+0x5a6>
 800510c:	2304      	movs	r3, #4
 800510e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005112:	e146      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8005114:	2308      	movs	r3, #8
 8005116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800511a:	e142      	b.n	80053a2 <UART_SetConfig+0x5a6>
 800511c:	2310      	movs	r3, #16
 800511e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005122:	e13e      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8005124:	cfff69f3 	.word	0xcfff69f3
 8005128:	58000c00 	.word	0x58000c00
 800512c:	11fff4ff 	.word	0x11fff4ff
 8005130:	40011000 	.word	0x40011000
 8005134:	58024400 	.word	0x58024400
 8005138:	40004400 	.word	0x40004400
 800513c:	40004800 	.word	0x40004800
 8005140:	40004c00 	.word	0x40004c00
 8005144:	40005000 	.word	0x40005000
 8005148:	2320      	movs	r3, #32
 800514a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800514e:	e128      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8005150:	2340      	movs	r3, #64	; 0x40
 8005152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005156:	e124      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8005158:	2380      	movs	r3, #128	; 0x80
 800515a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800515e:	e120      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4acb      	ldr	r2, [pc, #812]	; (8005494 <UART_SetConfig+0x698>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d176      	bne.n	8005258 <UART_SetConfig+0x45c>
 800516a:	4bcb      	ldr	r3, [pc, #812]	; (8005498 <UART_SetConfig+0x69c>)
 800516c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005172:	2b28      	cmp	r3, #40	; 0x28
 8005174:	d86c      	bhi.n	8005250 <UART_SetConfig+0x454>
 8005176:	a201      	add	r2, pc, #4	; (adr r2, 800517c <UART_SetConfig+0x380>)
 8005178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517c:	08005221 	.word	0x08005221
 8005180:	08005251 	.word	0x08005251
 8005184:	08005251 	.word	0x08005251
 8005188:	08005251 	.word	0x08005251
 800518c:	08005251 	.word	0x08005251
 8005190:	08005251 	.word	0x08005251
 8005194:	08005251 	.word	0x08005251
 8005198:	08005251 	.word	0x08005251
 800519c:	08005229 	.word	0x08005229
 80051a0:	08005251 	.word	0x08005251
 80051a4:	08005251 	.word	0x08005251
 80051a8:	08005251 	.word	0x08005251
 80051ac:	08005251 	.word	0x08005251
 80051b0:	08005251 	.word	0x08005251
 80051b4:	08005251 	.word	0x08005251
 80051b8:	08005251 	.word	0x08005251
 80051bc:	08005231 	.word	0x08005231
 80051c0:	08005251 	.word	0x08005251
 80051c4:	08005251 	.word	0x08005251
 80051c8:	08005251 	.word	0x08005251
 80051cc:	08005251 	.word	0x08005251
 80051d0:	08005251 	.word	0x08005251
 80051d4:	08005251 	.word	0x08005251
 80051d8:	08005251 	.word	0x08005251
 80051dc:	08005239 	.word	0x08005239
 80051e0:	08005251 	.word	0x08005251
 80051e4:	08005251 	.word	0x08005251
 80051e8:	08005251 	.word	0x08005251
 80051ec:	08005251 	.word	0x08005251
 80051f0:	08005251 	.word	0x08005251
 80051f4:	08005251 	.word	0x08005251
 80051f8:	08005251 	.word	0x08005251
 80051fc:	08005241 	.word	0x08005241
 8005200:	08005251 	.word	0x08005251
 8005204:	08005251 	.word	0x08005251
 8005208:	08005251 	.word	0x08005251
 800520c:	08005251 	.word	0x08005251
 8005210:	08005251 	.word	0x08005251
 8005214:	08005251 	.word	0x08005251
 8005218:	08005251 	.word	0x08005251
 800521c:	08005249 	.word	0x08005249
 8005220:	2301      	movs	r3, #1
 8005222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005226:	e0bc      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8005228:	2304      	movs	r3, #4
 800522a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800522e:	e0b8      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8005230:	2308      	movs	r3, #8
 8005232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005236:	e0b4      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8005238:	2310      	movs	r3, #16
 800523a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800523e:	e0b0      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8005240:	2320      	movs	r3, #32
 8005242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005246:	e0ac      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8005248:	2340      	movs	r3, #64	; 0x40
 800524a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800524e:	e0a8      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8005250:	2380      	movs	r3, #128	; 0x80
 8005252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005256:	e0a4      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a8f      	ldr	r2, [pc, #572]	; (800549c <UART_SetConfig+0x6a0>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d130      	bne.n	80052c4 <UART_SetConfig+0x4c8>
 8005262:	4b8d      	ldr	r3, [pc, #564]	; (8005498 <UART_SetConfig+0x69c>)
 8005264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	2b05      	cmp	r3, #5
 800526c:	d826      	bhi.n	80052bc <UART_SetConfig+0x4c0>
 800526e:	a201      	add	r2, pc, #4	; (adr r2, 8005274 <UART_SetConfig+0x478>)
 8005270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005274:	0800528d 	.word	0x0800528d
 8005278:	08005295 	.word	0x08005295
 800527c:	0800529d 	.word	0x0800529d
 8005280:	080052a5 	.word	0x080052a5
 8005284:	080052ad 	.word	0x080052ad
 8005288:	080052b5 	.word	0x080052b5
 800528c:	2300      	movs	r3, #0
 800528e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005292:	e086      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8005294:	2304      	movs	r3, #4
 8005296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800529a:	e082      	b.n	80053a2 <UART_SetConfig+0x5a6>
 800529c:	2308      	movs	r3, #8
 800529e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052a2:	e07e      	b.n	80053a2 <UART_SetConfig+0x5a6>
 80052a4:	2310      	movs	r3, #16
 80052a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052aa:	e07a      	b.n	80053a2 <UART_SetConfig+0x5a6>
 80052ac:	2320      	movs	r3, #32
 80052ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052b2:	e076      	b.n	80053a2 <UART_SetConfig+0x5a6>
 80052b4:	2340      	movs	r3, #64	; 0x40
 80052b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ba:	e072      	b.n	80053a2 <UART_SetConfig+0x5a6>
 80052bc:	2380      	movs	r3, #128	; 0x80
 80052be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052c2:	e06e      	b.n	80053a2 <UART_SetConfig+0x5a6>
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a75      	ldr	r2, [pc, #468]	; (80054a0 <UART_SetConfig+0x6a4>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d130      	bne.n	8005330 <UART_SetConfig+0x534>
 80052ce:	4b72      	ldr	r3, [pc, #456]	; (8005498 <UART_SetConfig+0x69c>)
 80052d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	2b05      	cmp	r3, #5
 80052d8:	d826      	bhi.n	8005328 <UART_SetConfig+0x52c>
 80052da:	a201      	add	r2, pc, #4	; (adr r2, 80052e0 <UART_SetConfig+0x4e4>)
 80052dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e0:	080052f9 	.word	0x080052f9
 80052e4:	08005301 	.word	0x08005301
 80052e8:	08005309 	.word	0x08005309
 80052ec:	08005311 	.word	0x08005311
 80052f0:	08005319 	.word	0x08005319
 80052f4:	08005321 	.word	0x08005321
 80052f8:	2300      	movs	r3, #0
 80052fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052fe:	e050      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8005300:	2304      	movs	r3, #4
 8005302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005306:	e04c      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8005308:	2308      	movs	r3, #8
 800530a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800530e:	e048      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8005310:	2310      	movs	r3, #16
 8005312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005316:	e044      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8005318:	2320      	movs	r3, #32
 800531a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800531e:	e040      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8005320:	2340      	movs	r3, #64	; 0x40
 8005322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005326:	e03c      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8005328:	2380      	movs	r3, #128	; 0x80
 800532a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800532e:	e038      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a5b      	ldr	r2, [pc, #364]	; (80054a4 <UART_SetConfig+0x6a8>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d130      	bne.n	800539c <UART_SetConfig+0x5a0>
 800533a:	4b57      	ldr	r3, [pc, #348]	; (8005498 <UART_SetConfig+0x69c>)
 800533c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	2b05      	cmp	r3, #5
 8005344:	d826      	bhi.n	8005394 <UART_SetConfig+0x598>
 8005346:	a201      	add	r2, pc, #4	; (adr r2, 800534c <UART_SetConfig+0x550>)
 8005348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800534c:	08005365 	.word	0x08005365
 8005350:	0800536d 	.word	0x0800536d
 8005354:	08005375 	.word	0x08005375
 8005358:	0800537d 	.word	0x0800537d
 800535c:	08005385 	.word	0x08005385
 8005360:	0800538d 	.word	0x0800538d
 8005364:	2302      	movs	r3, #2
 8005366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800536a:	e01a      	b.n	80053a2 <UART_SetConfig+0x5a6>
 800536c:	2304      	movs	r3, #4
 800536e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005372:	e016      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8005374:	2308      	movs	r3, #8
 8005376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800537a:	e012      	b.n	80053a2 <UART_SetConfig+0x5a6>
 800537c:	2310      	movs	r3, #16
 800537e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005382:	e00e      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8005384:	2320      	movs	r3, #32
 8005386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800538a:	e00a      	b.n	80053a2 <UART_SetConfig+0x5a6>
 800538c:	2340      	movs	r3, #64	; 0x40
 800538e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005392:	e006      	b.n	80053a2 <UART_SetConfig+0x5a6>
 8005394:	2380      	movs	r3, #128	; 0x80
 8005396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800539a:	e002      	b.n	80053a2 <UART_SetConfig+0x5a6>
 800539c:	2380      	movs	r3, #128	; 0x80
 800539e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a3f      	ldr	r2, [pc, #252]	; (80054a4 <UART_SetConfig+0x6a8>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	f040 80f8 	bne.w	800559e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80053b2:	2b20      	cmp	r3, #32
 80053b4:	dc46      	bgt.n	8005444 <UART_SetConfig+0x648>
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	f2c0 8082 	blt.w	80054c0 <UART_SetConfig+0x6c4>
 80053bc:	3b02      	subs	r3, #2
 80053be:	2b1e      	cmp	r3, #30
 80053c0:	d87e      	bhi.n	80054c0 <UART_SetConfig+0x6c4>
 80053c2:	a201      	add	r2, pc, #4	; (adr r2, 80053c8 <UART_SetConfig+0x5cc>)
 80053c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c8:	0800544b 	.word	0x0800544b
 80053cc:	080054c1 	.word	0x080054c1
 80053d0:	08005453 	.word	0x08005453
 80053d4:	080054c1 	.word	0x080054c1
 80053d8:	080054c1 	.word	0x080054c1
 80053dc:	080054c1 	.word	0x080054c1
 80053e0:	08005463 	.word	0x08005463
 80053e4:	080054c1 	.word	0x080054c1
 80053e8:	080054c1 	.word	0x080054c1
 80053ec:	080054c1 	.word	0x080054c1
 80053f0:	080054c1 	.word	0x080054c1
 80053f4:	080054c1 	.word	0x080054c1
 80053f8:	080054c1 	.word	0x080054c1
 80053fc:	080054c1 	.word	0x080054c1
 8005400:	08005473 	.word	0x08005473
 8005404:	080054c1 	.word	0x080054c1
 8005408:	080054c1 	.word	0x080054c1
 800540c:	080054c1 	.word	0x080054c1
 8005410:	080054c1 	.word	0x080054c1
 8005414:	080054c1 	.word	0x080054c1
 8005418:	080054c1 	.word	0x080054c1
 800541c:	080054c1 	.word	0x080054c1
 8005420:	080054c1 	.word	0x080054c1
 8005424:	080054c1 	.word	0x080054c1
 8005428:	080054c1 	.word	0x080054c1
 800542c:	080054c1 	.word	0x080054c1
 8005430:	080054c1 	.word	0x080054c1
 8005434:	080054c1 	.word	0x080054c1
 8005438:	080054c1 	.word	0x080054c1
 800543c:	080054c1 	.word	0x080054c1
 8005440:	080054b3 	.word	0x080054b3
 8005444:	2b40      	cmp	r3, #64	; 0x40
 8005446:	d037      	beq.n	80054b8 <UART_SetConfig+0x6bc>
 8005448:	e03a      	b.n	80054c0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800544a:	f7fe f8bf 	bl	80035cc <HAL_RCCEx_GetD3PCLK1Freq>
 800544e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005450:	e03c      	b.n	80054cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005456:	4618      	mov	r0, r3
 8005458:	f7fe f8ce 	bl	80035f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005460:	e034      	b.n	80054cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005462:	f107 0318 	add.w	r3, r7, #24
 8005466:	4618      	mov	r0, r3
 8005468:	f7fe fa1a 	bl	80038a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005470:	e02c      	b.n	80054cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005472:	4b09      	ldr	r3, [pc, #36]	; (8005498 <UART_SetConfig+0x69c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0320 	and.w	r3, r3, #32
 800547a:	2b00      	cmp	r3, #0
 800547c:	d016      	beq.n	80054ac <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800547e:	4b06      	ldr	r3, [pc, #24]	; (8005498 <UART_SetConfig+0x69c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	08db      	lsrs	r3, r3, #3
 8005484:	f003 0303 	and.w	r3, r3, #3
 8005488:	4a07      	ldr	r2, [pc, #28]	; (80054a8 <UART_SetConfig+0x6ac>)
 800548a:	fa22 f303 	lsr.w	r3, r2, r3
 800548e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005490:	e01c      	b.n	80054cc <UART_SetConfig+0x6d0>
 8005492:	bf00      	nop
 8005494:	40011400 	.word	0x40011400
 8005498:	58024400 	.word	0x58024400
 800549c:	40007800 	.word	0x40007800
 80054a0:	40007c00 	.word	0x40007c00
 80054a4:	58000c00 	.word	0x58000c00
 80054a8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80054ac:	4b9d      	ldr	r3, [pc, #628]	; (8005724 <UART_SetConfig+0x928>)
 80054ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054b0:	e00c      	b.n	80054cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80054b2:	4b9d      	ldr	r3, [pc, #628]	; (8005728 <UART_SetConfig+0x92c>)
 80054b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054b6:	e009      	b.n	80054cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054be:	e005      	b.n	80054cc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80054ca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f000 81de 	beq.w	8005890 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	4a94      	ldr	r2, [pc, #592]	; (800572c <UART_SetConfig+0x930>)
 80054da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054de:	461a      	mov	r2, r3
 80054e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80054e6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	4613      	mov	r3, r2
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	4413      	add	r3, r2
 80054f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d305      	bcc.n	8005504 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005500:	429a      	cmp	r2, r3
 8005502:	d903      	bls.n	800550c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800550a:	e1c1      	b.n	8005890 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800550c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800550e:	2200      	movs	r2, #0
 8005510:	60bb      	str	r3, [r7, #8]
 8005512:	60fa      	str	r2, [r7, #12]
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	4a84      	ldr	r2, [pc, #528]	; (800572c <UART_SetConfig+0x930>)
 800551a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800551e:	b29b      	uxth	r3, r3
 8005520:	2200      	movs	r2, #0
 8005522:	603b      	str	r3, [r7, #0]
 8005524:	607a      	str	r2, [r7, #4]
 8005526:	e9d7 2300 	ldrd	r2, r3, [r7]
 800552a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800552e:	f7fa ff27 	bl	8000380 <__aeabi_uldivmod>
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	4610      	mov	r0, r2
 8005538:	4619      	mov	r1, r3
 800553a:	f04f 0200 	mov.w	r2, #0
 800553e:	f04f 0300 	mov.w	r3, #0
 8005542:	020b      	lsls	r3, r1, #8
 8005544:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005548:	0202      	lsls	r2, r0, #8
 800554a:	6979      	ldr	r1, [r7, #20]
 800554c:	6849      	ldr	r1, [r1, #4]
 800554e:	0849      	lsrs	r1, r1, #1
 8005550:	2000      	movs	r0, #0
 8005552:	460c      	mov	r4, r1
 8005554:	4605      	mov	r5, r0
 8005556:	eb12 0804 	adds.w	r8, r2, r4
 800555a:	eb43 0905 	adc.w	r9, r3, r5
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	469a      	mov	sl, r3
 8005566:	4693      	mov	fp, r2
 8005568:	4652      	mov	r2, sl
 800556a:	465b      	mov	r3, fp
 800556c:	4640      	mov	r0, r8
 800556e:	4649      	mov	r1, r9
 8005570:	f7fa ff06 	bl	8000380 <__aeabi_uldivmod>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	4613      	mov	r3, r2
 800557a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800557c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005582:	d308      	bcc.n	8005596 <UART_SetConfig+0x79a>
 8005584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800558a:	d204      	bcs.n	8005596 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005592:	60da      	str	r2, [r3, #12]
 8005594:	e17c      	b.n	8005890 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800559c:	e178      	b.n	8005890 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055a6:	f040 80c5 	bne.w	8005734 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80055aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80055ae:	2b20      	cmp	r3, #32
 80055b0:	dc48      	bgt.n	8005644 <UART_SetConfig+0x848>
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	db7b      	blt.n	80056ae <UART_SetConfig+0x8b2>
 80055b6:	2b20      	cmp	r3, #32
 80055b8:	d879      	bhi.n	80056ae <UART_SetConfig+0x8b2>
 80055ba:	a201      	add	r2, pc, #4	; (adr r2, 80055c0 <UART_SetConfig+0x7c4>)
 80055bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c0:	0800564b 	.word	0x0800564b
 80055c4:	08005653 	.word	0x08005653
 80055c8:	080056af 	.word	0x080056af
 80055cc:	080056af 	.word	0x080056af
 80055d0:	0800565b 	.word	0x0800565b
 80055d4:	080056af 	.word	0x080056af
 80055d8:	080056af 	.word	0x080056af
 80055dc:	080056af 	.word	0x080056af
 80055e0:	0800566b 	.word	0x0800566b
 80055e4:	080056af 	.word	0x080056af
 80055e8:	080056af 	.word	0x080056af
 80055ec:	080056af 	.word	0x080056af
 80055f0:	080056af 	.word	0x080056af
 80055f4:	080056af 	.word	0x080056af
 80055f8:	080056af 	.word	0x080056af
 80055fc:	080056af 	.word	0x080056af
 8005600:	0800567b 	.word	0x0800567b
 8005604:	080056af 	.word	0x080056af
 8005608:	080056af 	.word	0x080056af
 800560c:	080056af 	.word	0x080056af
 8005610:	080056af 	.word	0x080056af
 8005614:	080056af 	.word	0x080056af
 8005618:	080056af 	.word	0x080056af
 800561c:	080056af 	.word	0x080056af
 8005620:	080056af 	.word	0x080056af
 8005624:	080056af 	.word	0x080056af
 8005628:	080056af 	.word	0x080056af
 800562c:	080056af 	.word	0x080056af
 8005630:	080056af 	.word	0x080056af
 8005634:	080056af 	.word	0x080056af
 8005638:	080056af 	.word	0x080056af
 800563c:	080056af 	.word	0x080056af
 8005640:	080056a1 	.word	0x080056a1
 8005644:	2b40      	cmp	r3, #64	; 0x40
 8005646:	d02e      	beq.n	80056a6 <UART_SetConfig+0x8aa>
 8005648:	e031      	b.n	80056ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800564a:	f7fd f84d 	bl	80026e8 <HAL_RCC_GetPCLK1Freq>
 800564e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005650:	e033      	b.n	80056ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005652:	f7fd f85f 	bl	8002714 <HAL_RCC_GetPCLK2Freq>
 8005656:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005658:	e02f      	b.n	80056ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800565a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800565e:	4618      	mov	r0, r3
 8005660:	f7fd ffca 	bl	80035f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005666:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005668:	e027      	b.n	80056ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800566a:	f107 0318 	add.w	r3, r7, #24
 800566e:	4618      	mov	r0, r3
 8005670:	f7fe f916 	bl	80038a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005678:	e01f      	b.n	80056ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800567a:	4b2d      	ldr	r3, [pc, #180]	; (8005730 <UART_SetConfig+0x934>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0320 	and.w	r3, r3, #32
 8005682:	2b00      	cmp	r3, #0
 8005684:	d009      	beq.n	800569a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005686:	4b2a      	ldr	r3, [pc, #168]	; (8005730 <UART_SetConfig+0x934>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	08db      	lsrs	r3, r3, #3
 800568c:	f003 0303 	and.w	r3, r3, #3
 8005690:	4a24      	ldr	r2, [pc, #144]	; (8005724 <UART_SetConfig+0x928>)
 8005692:	fa22 f303 	lsr.w	r3, r2, r3
 8005696:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005698:	e00f      	b.n	80056ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800569a:	4b22      	ldr	r3, [pc, #136]	; (8005724 <UART_SetConfig+0x928>)
 800569c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800569e:	e00c      	b.n	80056ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80056a0:	4b21      	ldr	r3, [pc, #132]	; (8005728 <UART_SetConfig+0x92c>)
 80056a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056a4:	e009      	b.n	80056ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056ac:	e005      	b.n	80056ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80056b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 80e7 	beq.w	8005890 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	4a19      	ldr	r2, [pc, #100]	; (800572c <UART_SetConfig+0x930>)
 80056c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056cc:	461a      	mov	r2, r3
 80056ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80056d4:	005a      	lsls	r2, r3, #1
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	085b      	lsrs	r3, r3, #1
 80056dc:	441a      	add	r2, r3
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ea:	2b0f      	cmp	r3, #15
 80056ec:	d916      	bls.n	800571c <UART_SetConfig+0x920>
 80056ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f4:	d212      	bcs.n	800571c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	f023 030f 	bic.w	r3, r3, #15
 80056fe:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005702:	085b      	lsrs	r3, r3, #1
 8005704:	b29b      	uxth	r3, r3
 8005706:	f003 0307 	and.w	r3, r3, #7
 800570a:	b29a      	uxth	r2, r3
 800570c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800570e:	4313      	orrs	r3, r2
 8005710:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005718:	60da      	str	r2, [r3, #12]
 800571a:	e0b9      	b.n	8005890 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005722:	e0b5      	b.n	8005890 <UART_SetConfig+0xa94>
 8005724:	03d09000 	.word	0x03d09000
 8005728:	003d0900 	.word	0x003d0900
 800572c:	08006df0 	.word	0x08006df0
 8005730:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005734:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005738:	2b20      	cmp	r3, #32
 800573a:	dc49      	bgt.n	80057d0 <UART_SetConfig+0x9d4>
 800573c:	2b00      	cmp	r3, #0
 800573e:	db7c      	blt.n	800583a <UART_SetConfig+0xa3e>
 8005740:	2b20      	cmp	r3, #32
 8005742:	d87a      	bhi.n	800583a <UART_SetConfig+0xa3e>
 8005744:	a201      	add	r2, pc, #4	; (adr r2, 800574c <UART_SetConfig+0x950>)
 8005746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574a:	bf00      	nop
 800574c:	080057d7 	.word	0x080057d7
 8005750:	080057df 	.word	0x080057df
 8005754:	0800583b 	.word	0x0800583b
 8005758:	0800583b 	.word	0x0800583b
 800575c:	080057e7 	.word	0x080057e7
 8005760:	0800583b 	.word	0x0800583b
 8005764:	0800583b 	.word	0x0800583b
 8005768:	0800583b 	.word	0x0800583b
 800576c:	080057f7 	.word	0x080057f7
 8005770:	0800583b 	.word	0x0800583b
 8005774:	0800583b 	.word	0x0800583b
 8005778:	0800583b 	.word	0x0800583b
 800577c:	0800583b 	.word	0x0800583b
 8005780:	0800583b 	.word	0x0800583b
 8005784:	0800583b 	.word	0x0800583b
 8005788:	0800583b 	.word	0x0800583b
 800578c:	08005807 	.word	0x08005807
 8005790:	0800583b 	.word	0x0800583b
 8005794:	0800583b 	.word	0x0800583b
 8005798:	0800583b 	.word	0x0800583b
 800579c:	0800583b 	.word	0x0800583b
 80057a0:	0800583b 	.word	0x0800583b
 80057a4:	0800583b 	.word	0x0800583b
 80057a8:	0800583b 	.word	0x0800583b
 80057ac:	0800583b 	.word	0x0800583b
 80057b0:	0800583b 	.word	0x0800583b
 80057b4:	0800583b 	.word	0x0800583b
 80057b8:	0800583b 	.word	0x0800583b
 80057bc:	0800583b 	.word	0x0800583b
 80057c0:	0800583b 	.word	0x0800583b
 80057c4:	0800583b 	.word	0x0800583b
 80057c8:	0800583b 	.word	0x0800583b
 80057cc:	0800582d 	.word	0x0800582d
 80057d0:	2b40      	cmp	r3, #64	; 0x40
 80057d2:	d02e      	beq.n	8005832 <UART_SetConfig+0xa36>
 80057d4:	e031      	b.n	800583a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057d6:	f7fc ff87 	bl	80026e8 <HAL_RCC_GetPCLK1Freq>
 80057da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80057dc:	e033      	b.n	8005846 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057de:	f7fc ff99 	bl	8002714 <HAL_RCC_GetPCLK2Freq>
 80057e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80057e4:	e02f      	b.n	8005846 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fd ff04 	bl	80035f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057f4:	e027      	b.n	8005846 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057f6:	f107 0318 	add.w	r3, r7, #24
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fe f850 	bl	80038a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005804:	e01f      	b.n	8005846 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005806:	4b2d      	ldr	r3, [pc, #180]	; (80058bc <UART_SetConfig+0xac0>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0320 	and.w	r3, r3, #32
 800580e:	2b00      	cmp	r3, #0
 8005810:	d009      	beq.n	8005826 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005812:	4b2a      	ldr	r3, [pc, #168]	; (80058bc <UART_SetConfig+0xac0>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	08db      	lsrs	r3, r3, #3
 8005818:	f003 0303 	and.w	r3, r3, #3
 800581c:	4a28      	ldr	r2, [pc, #160]	; (80058c0 <UART_SetConfig+0xac4>)
 800581e:	fa22 f303 	lsr.w	r3, r2, r3
 8005822:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005824:	e00f      	b.n	8005846 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005826:	4b26      	ldr	r3, [pc, #152]	; (80058c0 <UART_SetConfig+0xac4>)
 8005828:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800582a:	e00c      	b.n	8005846 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800582c:	4b25      	ldr	r3, [pc, #148]	; (80058c4 <UART_SetConfig+0xac8>)
 800582e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005830:	e009      	b.n	8005846 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005836:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005838:	e005      	b.n	8005846 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005844:	bf00      	nop
    }

    if (pclk != 0U)
 8005846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005848:	2b00      	cmp	r3, #0
 800584a:	d021      	beq.n	8005890 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005850:	4a1d      	ldr	r2, [pc, #116]	; (80058c8 <UART_SetConfig+0xacc>)
 8005852:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005856:	461a      	mov	r2, r3
 8005858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800585a:	fbb3 f2f2 	udiv	r2, r3, r2
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	085b      	lsrs	r3, r3, #1
 8005864:	441a      	add	r2, r3
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	fbb2 f3f3 	udiv	r3, r2, r3
 800586e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005872:	2b0f      	cmp	r3, #15
 8005874:	d909      	bls.n	800588a <UART_SetConfig+0xa8e>
 8005876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800587c:	d205      	bcs.n	800588a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800587e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005880:	b29a      	uxth	r2, r3
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	60da      	str	r2, [r3, #12]
 8005888:	e002      	b.n	8005890 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	2201      	movs	r2, #1
 8005894:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	2201      	movs	r2, #1
 800589c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2200      	movs	r2, #0
 80058a4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2200      	movs	r2, #0
 80058aa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80058ac:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3748      	adds	r7, #72	; 0x48
 80058b4:	46bd      	mov	sp, r7
 80058b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058ba:	bf00      	nop
 80058bc:	58024400 	.word	0x58024400
 80058c0:	03d09000 	.word	0x03d09000
 80058c4:	003d0900 	.word	0x003d0900
 80058c8:	08006df0 	.word	0x08006df0

080058cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00a      	beq.n	80058f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00a      	beq.n	800593a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593e:	f003 0308 	and.w	r3, r3, #8
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005960:	f003 0310 	and.w	r3, r3, #16
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00a      	beq.n	800597e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	430a      	orrs	r2, r1
 800597c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005982:	f003 0320 	and.w	r3, r3, #32
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00a      	beq.n	80059a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01a      	beq.n	80059e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059ca:	d10a      	bne.n	80059e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	605a      	str	r2, [r3, #4]
  }
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af02      	add	r7, sp, #8
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a20:	f7fb fbb4 	bl	800118c <HAL_GetTick>
 8005a24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0308 	and.w	r3, r3, #8
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d10e      	bne.n	8005a52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f82f 	bl	8005aa6 <UART_WaitOnFlagUntilTimeout>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e025      	b.n	8005a9e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0304 	and.w	r3, r3, #4
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d10e      	bne.n	8005a7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f819 	bl	8005aa6 <UART_WaitOnFlagUntilTimeout>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e00f      	b.n	8005a9e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2220      	movs	r2, #32
 8005a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b09c      	sub	sp, #112	; 0x70
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	60f8      	str	r0, [r7, #12]
 8005aae:	60b9      	str	r1, [r7, #8]
 8005ab0:	603b      	str	r3, [r7, #0]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ab6:	e0a9      	b.n	8005c0c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005abe:	f000 80a5 	beq.w	8005c0c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ac2:	f7fb fb63 	bl	800118c <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d302      	bcc.n	8005ad8 <UART_WaitOnFlagUntilTimeout+0x32>
 8005ad2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d140      	bne.n	8005b5a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ae0:	e853 3f00 	ldrex	r3, [r3]
 8005ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ae8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005aec:	667b      	str	r3, [r7, #100]	; 0x64
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	461a      	mov	r2, r3
 8005af4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005af6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005af8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005afc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005afe:	e841 2300 	strex	r3, r2, [r1]
 8005b02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1e6      	bne.n	8005ad8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3308      	adds	r3, #8
 8005b10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b14:	e853 3f00 	ldrex	r3, [r3]
 8005b18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1c:	f023 0301 	bic.w	r3, r3, #1
 8005b20:	663b      	str	r3, [r7, #96]	; 0x60
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3308      	adds	r3, #8
 8005b28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b32:	e841 2300 	strex	r3, r2, [r1]
 8005b36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1e5      	bne.n	8005b0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2220      	movs	r2, #32
 8005b42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e069      	b.n	8005c2e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0304 	and.w	r3, r3, #4
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d051      	beq.n	8005c0c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b76:	d149      	bne.n	8005c0c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b80:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8a:	e853 3f00 	ldrex	r3, [r3]
 8005b8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ba2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ba8:	e841 2300 	strex	r3, r2, [r1]
 8005bac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1e6      	bne.n	8005b82 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3308      	adds	r3, #8
 8005bba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	e853 3f00 	ldrex	r3, [r3]
 8005bc2:	613b      	str	r3, [r7, #16]
   return(result);
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	f023 0301 	bic.w	r3, r3, #1
 8005bca:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3308      	adds	r3, #8
 8005bd2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005bd4:	623a      	str	r2, [r7, #32]
 8005bd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd8:	69f9      	ldr	r1, [r7, #28]
 8005bda:	6a3a      	ldr	r2, [r7, #32]
 8005bdc:	e841 2300 	strex	r3, r2, [r1]
 8005be0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1e5      	bne.n	8005bb4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2220      	movs	r2, #32
 8005bec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e010      	b.n	8005c2e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	69da      	ldr	r2, [r3, #28]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	4013      	ands	r3, r2
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	bf0c      	ite	eq
 8005c1c:	2301      	moveq	r3, #1
 8005c1e:	2300      	movne	r3, #0
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	461a      	mov	r2, r3
 8005c24:	79fb      	ldrb	r3, [r7, #7]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	f43f af46 	beq.w	8005ab8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3770      	adds	r7, #112	; 0x70
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b085      	sub	sp, #20
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d101      	bne.n	8005c4c <HAL_UARTEx_DisableFifoMode+0x16>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	e027      	b.n	8005c9c <HAL_UARTEx_DisableFifoMode+0x66>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2224      	movs	r2, #36	; 0x24
 8005c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 0201 	bic.w	r2, r2, #1
 8005c72:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005c7a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e02d      	b.n	8005d1c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2224      	movs	r2, #36	; 0x24
 8005ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 0201 	bic.w	r2, r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f84f 	bl	8005da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d101      	bne.n	8005d3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d38:	2302      	movs	r3, #2
 8005d3a:	e02d      	b.n	8005d98 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2224      	movs	r2, #36	; 0x24
 8005d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f022 0201 	bic.w	r2, r2, #1
 8005d62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f811 	bl	8005da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2220      	movs	r2, #32
 8005d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d108      	bne.n	8005dc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005dc0:	e031      	b.n	8005e26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005dc2:	2310      	movs	r3, #16
 8005dc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005dc6:	2310      	movs	r3, #16
 8005dc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	0e5b      	lsrs	r3, r3, #25
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	f003 0307 	and.w	r3, r3, #7
 8005dd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	0f5b      	lsrs	r3, r3, #29
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	f003 0307 	and.w	r3, r3, #7
 8005de8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005dea:	7bbb      	ldrb	r3, [r7, #14]
 8005dec:	7b3a      	ldrb	r2, [r7, #12]
 8005dee:	4911      	ldr	r1, [pc, #68]	; (8005e34 <UARTEx_SetNbDataToProcess+0x94>)
 8005df0:	5c8a      	ldrb	r2, [r1, r2]
 8005df2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005df6:	7b3a      	ldrb	r2, [r7, #12]
 8005df8:	490f      	ldr	r1, [pc, #60]	; (8005e38 <UARTEx_SetNbDataToProcess+0x98>)
 8005dfa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005dfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e08:	7bfb      	ldrb	r3, [r7, #15]
 8005e0a:	7b7a      	ldrb	r2, [r7, #13]
 8005e0c:	4909      	ldr	r1, [pc, #36]	; (8005e34 <UARTEx_SetNbDataToProcess+0x94>)
 8005e0e:	5c8a      	ldrb	r2, [r1, r2]
 8005e10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e14:	7b7a      	ldrb	r2, [r7, #13]
 8005e16:	4908      	ldr	r1, [pc, #32]	; (8005e38 <UARTEx_SetNbDataToProcess+0x98>)
 8005e18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005e26:	bf00      	nop
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	08006e08 	.word	0x08006e08
 8005e38:	08006e10 	.word	0x08006e10

08005e3c <__errno>:
 8005e3c:	4b01      	ldr	r3, [pc, #4]	; (8005e44 <__errno+0x8>)
 8005e3e:	6818      	ldr	r0, [r3, #0]
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	24000010 	.word	0x24000010

08005e48 <__libc_init_array>:
 8005e48:	b570      	push	{r4, r5, r6, lr}
 8005e4a:	4d0d      	ldr	r5, [pc, #52]	; (8005e80 <__libc_init_array+0x38>)
 8005e4c:	4c0d      	ldr	r4, [pc, #52]	; (8005e84 <__libc_init_array+0x3c>)
 8005e4e:	1b64      	subs	r4, r4, r5
 8005e50:	10a4      	asrs	r4, r4, #2
 8005e52:	2600      	movs	r6, #0
 8005e54:	42a6      	cmp	r6, r4
 8005e56:	d109      	bne.n	8005e6c <__libc_init_array+0x24>
 8005e58:	4d0b      	ldr	r5, [pc, #44]	; (8005e88 <__libc_init_array+0x40>)
 8005e5a:	4c0c      	ldr	r4, [pc, #48]	; (8005e8c <__libc_init_array+0x44>)
 8005e5c:	f000 ffae 	bl	8006dbc <_init>
 8005e60:	1b64      	subs	r4, r4, r5
 8005e62:	10a4      	asrs	r4, r4, #2
 8005e64:	2600      	movs	r6, #0
 8005e66:	42a6      	cmp	r6, r4
 8005e68:	d105      	bne.n	8005e76 <__libc_init_array+0x2e>
 8005e6a:	bd70      	pop	{r4, r5, r6, pc}
 8005e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e70:	4798      	blx	r3
 8005e72:	3601      	adds	r6, #1
 8005e74:	e7ee      	b.n	8005e54 <__libc_init_array+0xc>
 8005e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e7a:	4798      	blx	r3
 8005e7c:	3601      	adds	r6, #1
 8005e7e:	e7f2      	b.n	8005e66 <__libc_init_array+0x1e>
 8005e80:	08006eb8 	.word	0x08006eb8
 8005e84:	08006eb8 	.word	0x08006eb8
 8005e88:	08006eb8 	.word	0x08006eb8
 8005e8c:	08006ebc 	.word	0x08006ebc

08005e90 <memset>:
 8005e90:	4402      	add	r2, r0
 8005e92:	4603      	mov	r3, r0
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d100      	bne.n	8005e9a <memset+0xa>
 8005e98:	4770      	bx	lr
 8005e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e9e:	e7f9      	b.n	8005e94 <memset+0x4>

08005ea0 <iprintf>:
 8005ea0:	b40f      	push	{r0, r1, r2, r3}
 8005ea2:	4b0a      	ldr	r3, [pc, #40]	; (8005ecc <iprintf+0x2c>)
 8005ea4:	b513      	push	{r0, r1, r4, lr}
 8005ea6:	681c      	ldr	r4, [r3, #0]
 8005ea8:	b124      	cbz	r4, 8005eb4 <iprintf+0x14>
 8005eaa:	69a3      	ldr	r3, [r4, #24]
 8005eac:	b913      	cbnz	r3, 8005eb4 <iprintf+0x14>
 8005eae:	4620      	mov	r0, r4
 8005eb0:	f000 f866 	bl	8005f80 <__sinit>
 8005eb4:	ab05      	add	r3, sp, #20
 8005eb6:	9a04      	ldr	r2, [sp, #16]
 8005eb8:	68a1      	ldr	r1, [r4, #8]
 8005eba:	9301      	str	r3, [sp, #4]
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f000 f9bd 	bl	800623c <_vfiprintf_r>
 8005ec2:	b002      	add	sp, #8
 8005ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ec8:	b004      	add	sp, #16
 8005eca:	4770      	bx	lr
 8005ecc:	24000010 	.word	0x24000010

08005ed0 <std>:
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	b510      	push	{r4, lr}
 8005ed4:	4604      	mov	r4, r0
 8005ed6:	e9c0 3300 	strd	r3, r3, [r0]
 8005eda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ede:	6083      	str	r3, [r0, #8]
 8005ee0:	8181      	strh	r1, [r0, #12]
 8005ee2:	6643      	str	r3, [r0, #100]	; 0x64
 8005ee4:	81c2      	strh	r2, [r0, #14]
 8005ee6:	6183      	str	r3, [r0, #24]
 8005ee8:	4619      	mov	r1, r3
 8005eea:	2208      	movs	r2, #8
 8005eec:	305c      	adds	r0, #92	; 0x5c
 8005eee:	f7ff ffcf 	bl	8005e90 <memset>
 8005ef2:	4b05      	ldr	r3, [pc, #20]	; (8005f08 <std+0x38>)
 8005ef4:	6263      	str	r3, [r4, #36]	; 0x24
 8005ef6:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <std+0x3c>)
 8005ef8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005efa:	4b05      	ldr	r3, [pc, #20]	; (8005f10 <std+0x40>)
 8005efc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005efe:	4b05      	ldr	r3, [pc, #20]	; (8005f14 <std+0x44>)
 8005f00:	6224      	str	r4, [r4, #32]
 8005f02:	6323      	str	r3, [r4, #48]	; 0x30
 8005f04:	bd10      	pop	{r4, pc}
 8005f06:	bf00      	nop
 8005f08:	080067e5 	.word	0x080067e5
 8005f0c:	08006807 	.word	0x08006807
 8005f10:	0800683f 	.word	0x0800683f
 8005f14:	08006863 	.word	0x08006863

08005f18 <_cleanup_r>:
 8005f18:	4901      	ldr	r1, [pc, #4]	; (8005f20 <_cleanup_r+0x8>)
 8005f1a:	f000 b8af 	b.w	800607c <_fwalk_reent>
 8005f1e:	bf00      	nop
 8005f20:	08006b3d 	.word	0x08006b3d

08005f24 <__sfmoreglue>:
 8005f24:	b570      	push	{r4, r5, r6, lr}
 8005f26:	2268      	movs	r2, #104	; 0x68
 8005f28:	1e4d      	subs	r5, r1, #1
 8005f2a:	4355      	muls	r5, r2
 8005f2c:	460e      	mov	r6, r1
 8005f2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f32:	f000 f8e5 	bl	8006100 <_malloc_r>
 8005f36:	4604      	mov	r4, r0
 8005f38:	b140      	cbz	r0, 8005f4c <__sfmoreglue+0x28>
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	e9c0 1600 	strd	r1, r6, [r0]
 8005f40:	300c      	adds	r0, #12
 8005f42:	60a0      	str	r0, [r4, #8]
 8005f44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f48:	f7ff ffa2 	bl	8005e90 <memset>
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	bd70      	pop	{r4, r5, r6, pc}

08005f50 <__sfp_lock_acquire>:
 8005f50:	4801      	ldr	r0, [pc, #4]	; (8005f58 <__sfp_lock_acquire+0x8>)
 8005f52:	f000 b8b3 	b.w	80060bc <__retarget_lock_acquire_recursive>
 8005f56:	bf00      	nop
 8005f58:	240001b1 	.word	0x240001b1

08005f5c <__sfp_lock_release>:
 8005f5c:	4801      	ldr	r0, [pc, #4]	; (8005f64 <__sfp_lock_release+0x8>)
 8005f5e:	f000 b8ae 	b.w	80060be <__retarget_lock_release_recursive>
 8005f62:	bf00      	nop
 8005f64:	240001b1 	.word	0x240001b1

08005f68 <__sinit_lock_acquire>:
 8005f68:	4801      	ldr	r0, [pc, #4]	; (8005f70 <__sinit_lock_acquire+0x8>)
 8005f6a:	f000 b8a7 	b.w	80060bc <__retarget_lock_acquire_recursive>
 8005f6e:	bf00      	nop
 8005f70:	240001b2 	.word	0x240001b2

08005f74 <__sinit_lock_release>:
 8005f74:	4801      	ldr	r0, [pc, #4]	; (8005f7c <__sinit_lock_release+0x8>)
 8005f76:	f000 b8a2 	b.w	80060be <__retarget_lock_release_recursive>
 8005f7a:	bf00      	nop
 8005f7c:	240001b2 	.word	0x240001b2

08005f80 <__sinit>:
 8005f80:	b510      	push	{r4, lr}
 8005f82:	4604      	mov	r4, r0
 8005f84:	f7ff fff0 	bl	8005f68 <__sinit_lock_acquire>
 8005f88:	69a3      	ldr	r3, [r4, #24]
 8005f8a:	b11b      	cbz	r3, 8005f94 <__sinit+0x14>
 8005f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f90:	f7ff bff0 	b.w	8005f74 <__sinit_lock_release>
 8005f94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f98:	6523      	str	r3, [r4, #80]	; 0x50
 8005f9a:	4b13      	ldr	r3, [pc, #76]	; (8005fe8 <__sinit+0x68>)
 8005f9c:	4a13      	ldr	r2, [pc, #76]	; (8005fec <__sinit+0x6c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	62a2      	str	r2, [r4, #40]	; 0x28
 8005fa2:	42a3      	cmp	r3, r4
 8005fa4:	bf04      	itt	eq
 8005fa6:	2301      	moveq	r3, #1
 8005fa8:	61a3      	streq	r3, [r4, #24]
 8005faa:	4620      	mov	r0, r4
 8005fac:	f000 f820 	bl	8005ff0 <__sfp>
 8005fb0:	6060      	str	r0, [r4, #4]
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f000 f81c 	bl	8005ff0 <__sfp>
 8005fb8:	60a0      	str	r0, [r4, #8]
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f000 f818 	bl	8005ff0 <__sfp>
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	60e0      	str	r0, [r4, #12]
 8005fc4:	2104      	movs	r1, #4
 8005fc6:	6860      	ldr	r0, [r4, #4]
 8005fc8:	f7ff ff82 	bl	8005ed0 <std>
 8005fcc:	68a0      	ldr	r0, [r4, #8]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	2109      	movs	r1, #9
 8005fd2:	f7ff ff7d 	bl	8005ed0 <std>
 8005fd6:	68e0      	ldr	r0, [r4, #12]
 8005fd8:	2202      	movs	r2, #2
 8005fda:	2112      	movs	r1, #18
 8005fdc:	f7ff ff78 	bl	8005ed0 <std>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	61a3      	str	r3, [r4, #24]
 8005fe4:	e7d2      	b.n	8005f8c <__sinit+0xc>
 8005fe6:	bf00      	nop
 8005fe8:	08006e18 	.word	0x08006e18
 8005fec:	08005f19 	.word	0x08005f19

08005ff0 <__sfp>:
 8005ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff2:	4607      	mov	r7, r0
 8005ff4:	f7ff ffac 	bl	8005f50 <__sfp_lock_acquire>
 8005ff8:	4b1e      	ldr	r3, [pc, #120]	; (8006074 <__sfp+0x84>)
 8005ffa:	681e      	ldr	r6, [r3, #0]
 8005ffc:	69b3      	ldr	r3, [r6, #24]
 8005ffe:	b913      	cbnz	r3, 8006006 <__sfp+0x16>
 8006000:	4630      	mov	r0, r6
 8006002:	f7ff ffbd 	bl	8005f80 <__sinit>
 8006006:	3648      	adds	r6, #72	; 0x48
 8006008:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800600c:	3b01      	subs	r3, #1
 800600e:	d503      	bpl.n	8006018 <__sfp+0x28>
 8006010:	6833      	ldr	r3, [r6, #0]
 8006012:	b30b      	cbz	r3, 8006058 <__sfp+0x68>
 8006014:	6836      	ldr	r6, [r6, #0]
 8006016:	e7f7      	b.n	8006008 <__sfp+0x18>
 8006018:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800601c:	b9d5      	cbnz	r5, 8006054 <__sfp+0x64>
 800601e:	4b16      	ldr	r3, [pc, #88]	; (8006078 <__sfp+0x88>)
 8006020:	60e3      	str	r3, [r4, #12]
 8006022:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006026:	6665      	str	r5, [r4, #100]	; 0x64
 8006028:	f000 f847 	bl	80060ba <__retarget_lock_init_recursive>
 800602c:	f7ff ff96 	bl	8005f5c <__sfp_lock_release>
 8006030:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006034:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006038:	6025      	str	r5, [r4, #0]
 800603a:	61a5      	str	r5, [r4, #24]
 800603c:	2208      	movs	r2, #8
 800603e:	4629      	mov	r1, r5
 8006040:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006044:	f7ff ff24 	bl	8005e90 <memset>
 8006048:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800604c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006050:	4620      	mov	r0, r4
 8006052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006054:	3468      	adds	r4, #104	; 0x68
 8006056:	e7d9      	b.n	800600c <__sfp+0x1c>
 8006058:	2104      	movs	r1, #4
 800605a:	4638      	mov	r0, r7
 800605c:	f7ff ff62 	bl	8005f24 <__sfmoreglue>
 8006060:	4604      	mov	r4, r0
 8006062:	6030      	str	r0, [r6, #0]
 8006064:	2800      	cmp	r0, #0
 8006066:	d1d5      	bne.n	8006014 <__sfp+0x24>
 8006068:	f7ff ff78 	bl	8005f5c <__sfp_lock_release>
 800606c:	230c      	movs	r3, #12
 800606e:	603b      	str	r3, [r7, #0]
 8006070:	e7ee      	b.n	8006050 <__sfp+0x60>
 8006072:	bf00      	nop
 8006074:	08006e18 	.word	0x08006e18
 8006078:	ffff0001 	.word	0xffff0001

0800607c <_fwalk_reent>:
 800607c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006080:	4606      	mov	r6, r0
 8006082:	4688      	mov	r8, r1
 8006084:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006088:	2700      	movs	r7, #0
 800608a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800608e:	f1b9 0901 	subs.w	r9, r9, #1
 8006092:	d505      	bpl.n	80060a0 <_fwalk_reent+0x24>
 8006094:	6824      	ldr	r4, [r4, #0]
 8006096:	2c00      	cmp	r4, #0
 8006098:	d1f7      	bne.n	800608a <_fwalk_reent+0xe>
 800609a:	4638      	mov	r0, r7
 800609c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060a0:	89ab      	ldrh	r3, [r5, #12]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d907      	bls.n	80060b6 <_fwalk_reent+0x3a>
 80060a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060aa:	3301      	adds	r3, #1
 80060ac:	d003      	beq.n	80060b6 <_fwalk_reent+0x3a>
 80060ae:	4629      	mov	r1, r5
 80060b0:	4630      	mov	r0, r6
 80060b2:	47c0      	blx	r8
 80060b4:	4307      	orrs	r7, r0
 80060b6:	3568      	adds	r5, #104	; 0x68
 80060b8:	e7e9      	b.n	800608e <_fwalk_reent+0x12>

080060ba <__retarget_lock_init_recursive>:
 80060ba:	4770      	bx	lr

080060bc <__retarget_lock_acquire_recursive>:
 80060bc:	4770      	bx	lr

080060be <__retarget_lock_release_recursive>:
 80060be:	4770      	bx	lr

080060c0 <sbrk_aligned>:
 80060c0:	b570      	push	{r4, r5, r6, lr}
 80060c2:	4e0e      	ldr	r6, [pc, #56]	; (80060fc <sbrk_aligned+0x3c>)
 80060c4:	460c      	mov	r4, r1
 80060c6:	6831      	ldr	r1, [r6, #0]
 80060c8:	4605      	mov	r5, r0
 80060ca:	b911      	cbnz	r1, 80060d2 <sbrk_aligned+0x12>
 80060cc:	f000 fb7a 	bl	80067c4 <_sbrk_r>
 80060d0:	6030      	str	r0, [r6, #0]
 80060d2:	4621      	mov	r1, r4
 80060d4:	4628      	mov	r0, r5
 80060d6:	f000 fb75 	bl	80067c4 <_sbrk_r>
 80060da:	1c43      	adds	r3, r0, #1
 80060dc:	d00a      	beq.n	80060f4 <sbrk_aligned+0x34>
 80060de:	1cc4      	adds	r4, r0, #3
 80060e0:	f024 0403 	bic.w	r4, r4, #3
 80060e4:	42a0      	cmp	r0, r4
 80060e6:	d007      	beq.n	80060f8 <sbrk_aligned+0x38>
 80060e8:	1a21      	subs	r1, r4, r0
 80060ea:	4628      	mov	r0, r5
 80060ec:	f000 fb6a 	bl	80067c4 <_sbrk_r>
 80060f0:	3001      	adds	r0, #1
 80060f2:	d101      	bne.n	80060f8 <sbrk_aligned+0x38>
 80060f4:	f04f 34ff 	mov.w	r4, #4294967295
 80060f8:	4620      	mov	r0, r4
 80060fa:	bd70      	pop	{r4, r5, r6, pc}
 80060fc:	240001b8 	.word	0x240001b8

08006100 <_malloc_r>:
 8006100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006104:	1ccd      	adds	r5, r1, #3
 8006106:	f025 0503 	bic.w	r5, r5, #3
 800610a:	3508      	adds	r5, #8
 800610c:	2d0c      	cmp	r5, #12
 800610e:	bf38      	it	cc
 8006110:	250c      	movcc	r5, #12
 8006112:	2d00      	cmp	r5, #0
 8006114:	4607      	mov	r7, r0
 8006116:	db01      	blt.n	800611c <_malloc_r+0x1c>
 8006118:	42a9      	cmp	r1, r5
 800611a:	d905      	bls.n	8006128 <_malloc_r+0x28>
 800611c:	230c      	movs	r3, #12
 800611e:	603b      	str	r3, [r7, #0]
 8006120:	2600      	movs	r6, #0
 8006122:	4630      	mov	r0, r6
 8006124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006128:	4e2e      	ldr	r6, [pc, #184]	; (80061e4 <_malloc_r+0xe4>)
 800612a:	f000 fdbb 	bl	8006ca4 <__malloc_lock>
 800612e:	6833      	ldr	r3, [r6, #0]
 8006130:	461c      	mov	r4, r3
 8006132:	bb34      	cbnz	r4, 8006182 <_malloc_r+0x82>
 8006134:	4629      	mov	r1, r5
 8006136:	4638      	mov	r0, r7
 8006138:	f7ff ffc2 	bl	80060c0 <sbrk_aligned>
 800613c:	1c43      	adds	r3, r0, #1
 800613e:	4604      	mov	r4, r0
 8006140:	d14d      	bne.n	80061de <_malloc_r+0xde>
 8006142:	6834      	ldr	r4, [r6, #0]
 8006144:	4626      	mov	r6, r4
 8006146:	2e00      	cmp	r6, #0
 8006148:	d140      	bne.n	80061cc <_malloc_r+0xcc>
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	4631      	mov	r1, r6
 800614e:	4638      	mov	r0, r7
 8006150:	eb04 0803 	add.w	r8, r4, r3
 8006154:	f000 fb36 	bl	80067c4 <_sbrk_r>
 8006158:	4580      	cmp	r8, r0
 800615a:	d13a      	bne.n	80061d2 <_malloc_r+0xd2>
 800615c:	6821      	ldr	r1, [r4, #0]
 800615e:	3503      	adds	r5, #3
 8006160:	1a6d      	subs	r5, r5, r1
 8006162:	f025 0503 	bic.w	r5, r5, #3
 8006166:	3508      	adds	r5, #8
 8006168:	2d0c      	cmp	r5, #12
 800616a:	bf38      	it	cc
 800616c:	250c      	movcc	r5, #12
 800616e:	4629      	mov	r1, r5
 8006170:	4638      	mov	r0, r7
 8006172:	f7ff ffa5 	bl	80060c0 <sbrk_aligned>
 8006176:	3001      	adds	r0, #1
 8006178:	d02b      	beq.n	80061d2 <_malloc_r+0xd2>
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	442b      	add	r3, r5
 800617e:	6023      	str	r3, [r4, #0]
 8006180:	e00e      	b.n	80061a0 <_malloc_r+0xa0>
 8006182:	6822      	ldr	r2, [r4, #0]
 8006184:	1b52      	subs	r2, r2, r5
 8006186:	d41e      	bmi.n	80061c6 <_malloc_r+0xc6>
 8006188:	2a0b      	cmp	r2, #11
 800618a:	d916      	bls.n	80061ba <_malloc_r+0xba>
 800618c:	1961      	adds	r1, r4, r5
 800618e:	42a3      	cmp	r3, r4
 8006190:	6025      	str	r5, [r4, #0]
 8006192:	bf18      	it	ne
 8006194:	6059      	strne	r1, [r3, #4]
 8006196:	6863      	ldr	r3, [r4, #4]
 8006198:	bf08      	it	eq
 800619a:	6031      	streq	r1, [r6, #0]
 800619c:	5162      	str	r2, [r4, r5]
 800619e:	604b      	str	r3, [r1, #4]
 80061a0:	4638      	mov	r0, r7
 80061a2:	f104 060b 	add.w	r6, r4, #11
 80061a6:	f000 fd83 	bl	8006cb0 <__malloc_unlock>
 80061aa:	f026 0607 	bic.w	r6, r6, #7
 80061ae:	1d23      	adds	r3, r4, #4
 80061b0:	1af2      	subs	r2, r6, r3
 80061b2:	d0b6      	beq.n	8006122 <_malloc_r+0x22>
 80061b4:	1b9b      	subs	r3, r3, r6
 80061b6:	50a3      	str	r3, [r4, r2]
 80061b8:	e7b3      	b.n	8006122 <_malloc_r+0x22>
 80061ba:	6862      	ldr	r2, [r4, #4]
 80061bc:	42a3      	cmp	r3, r4
 80061be:	bf0c      	ite	eq
 80061c0:	6032      	streq	r2, [r6, #0]
 80061c2:	605a      	strne	r2, [r3, #4]
 80061c4:	e7ec      	b.n	80061a0 <_malloc_r+0xa0>
 80061c6:	4623      	mov	r3, r4
 80061c8:	6864      	ldr	r4, [r4, #4]
 80061ca:	e7b2      	b.n	8006132 <_malloc_r+0x32>
 80061cc:	4634      	mov	r4, r6
 80061ce:	6876      	ldr	r6, [r6, #4]
 80061d0:	e7b9      	b.n	8006146 <_malloc_r+0x46>
 80061d2:	230c      	movs	r3, #12
 80061d4:	603b      	str	r3, [r7, #0]
 80061d6:	4638      	mov	r0, r7
 80061d8:	f000 fd6a 	bl	8006cb0 <__malloc_unlock>
 80061dc:	e7a1      	b.n	8006122 <_malloc_r+0x22>
 80061de:	6025      	str	r5, [r4, #0]
 80061e0:	e7de      	b.n	80061a0 <_malloc_r+0xa0>
 80061e2:	bf00      	nop
 80061e4:	240001b4 	.word	0x240001b4

080061e8 <__sfputc_r>:
 80061e8:	6893      	ldr	r3, [r2, #8]
 80061ea:	3b01      	subs	r3, #1
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	b410      	push	{r4}
 80061f0:	6093      	str	r3, [r2, #8]
 80061f2:	da08      	bge.n	8006206 <__sfputc_r+0x1e>
 80061f4:	6994      	ldr	r4, [r2, #24]
 80061f6:	42a3      	cmp	r3, r4
 80061f8:	db01      	blt.n	80061fe <__sfputc_r+0x16>
 80061fa:	290a      	cmp	r1, #10
 80061fc:	d103      	bne.n	8006206 <__sfputc_r+0x1e>
 80061fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006202:	f000 bb33 	b.w	800686c <__swbuf_r>
 8006206:	6813      	ldr	r3, [r2, #0]
 8006208:	1c58      	adds	r0, r3, #1
 800620a:	6010      	str	r0, [r2, #0]
 800620c:	7019      	strb	r1, [r3, #0]
 800620e:	4608      	mov	r0, r1
 8006210:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006214:	4770      	bx	lr

08006216 <__sfputs_r>:
 8006216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006218:	4606      	mov	r6, r0
 800621a:	460f      	mov	r7, r1
 800621c:	4614      	mov	r4, r2
 800621e:	18d5      	adds	r5, r2, r3
 8006220:	42ac      	cmp	r4, r5
 8006222:	d101      	bne.n	8006228 <__sfputs_r+0x12>
 8006224:	2000      	movs	r0, #0
 8006226:	e007      	b.n	8006238 <__sfputs_r+0x22>
 8006228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800622c:	463a      	mov	r2, r7
 800622e:	4630      	mov	r0, r6
 8006230:	f7ff ffda 	bl	80061e8 <__sfputc_r>
 8006234:	1c43      	adds	r3, r0, #1
 8006236:	d1f3      	bne.n	8006220 <__sfputs_r+0xa>
 8006238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800623c <_vfiprintf_r>:
 800623c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006240:	460d      	mov	r5, r1
 8006242:	b09d      	sub	sp, #116	; 0x74
 8006244:	4614      	mov	r4, r2
 8006246:	4698      	mov	r8, r3
 8006248:	4606      	mov	r6, r0
 800624a:	b118      	cbz	r0, 8006254 <_vfiprintf_r+0x18>
 800624c:	6983      	ldr	r3, [r0, #24]
 800624e:	b90b      	cbnz	r3, 8006254 <_vfiprintf_r+0x18>
 8006250:	f7ff fe96 	bl	8005f80 <__sinit>
 8006254:	4b89      	ldr	r3, [pc, #548]	; (800647c <_vfiprintf_r+0x240>)
 8006256:	429d      	cmp	r5, r3
 8006258:	d11b      	bne.n	8006292 <_vfiprintf_r+0x56>
 800625a:	6875      	ldr	r5, [r6, #4]
 800625c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800625e:	07d9      	lsls	r1, r3, #31
 8006260:	d405      	bmi.n	800626e <_vfiprintf_r+0x32>
 8006262:	89ab      	ldrh	r3, [r5, #12]
 8006264:	059a      	lsls	r2, r3, #22
 8006266:	d402      	bmi.n	800626e <_vfiprintf_r+0x32>
 8006268:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800626a:	f7ff ff27 	bl	80060bc <__retarget_lock_acquire_recursive>
 800626e:	89ab      	ldrh	r3, [r5, #12]
 8006270:	071b      	lsls	r3, r3, #28
 8006272:	d501      	bpl.n	8006278 <_vfiprintf_r+0x3c>
 8006274:	692b      	ldr	r3, [r5, #16]
 8006276:	b9eb      	cbnz	r3, 80062b4 <_vfiprintf_r+0x78>
 8006278:	4629      	mov	r1, r5
 800627a:	4630      	mov	r0, r6
 800627c:	f000 fb5a 	bl	8006934 <__swsetup_r>
 8006280:	b1c0      	cbz	r0, 80062b4 <_vfiprintf_r+0x78>
 8006282:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006284:	07dc      	lsls	r4, r3, #31
 8006286:	d50e      	bpl.n	80062a6 <_vfiprintf_r+0x6a>
 8006288:	f04f 30ff 	mov.w	r0, #4294967295
 800628c:	b01d      	add	sp, #116	; 0x74
 800628e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006292:	4b7b      	ldr	r3, [pc, #492]	; (8006480 <_vfiprintf_r+0x244>)
 8006294:	429d      	cmp	r5, r3
 8006296:	d101      	bne.n	800629c <_vfiprintf_r+0x60>
 8006298:	68b5      	ldr	r5, [r6, #8]
 800629a:	e7df      	b.n	800625c <_vfiprintf_r+0x20>
 800629c:	4b79      	ldr	r3, [pc, #484]	; (8006484 <_vfiprintf_r+0x248>)
 800629e:	429d      	cmp	r5, r3
 80062a0:	bf08      	it	eq
 80062a2:	68f5      	ldreq	r5, [r6, #12]
 80062a4:	e7da      	b.n	800625c <_vfiprintf_r+0x20>
 80062a6:	89ab      	ldrh	r3, [r5, #12]
 80062a8:	0598      	lsls	r0, r3, #22
 80062aa:	d4ed      	bmi.n	8006288 <_vfiprintf_r+0x4c>
 80062ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062ae:	f7ff ff06 	bl	80060be <__retarget_lock_release_recursive>
 80062b2:	e7e9      	b.n	8006288 <_vfiprintf_r+0x4c>
 80062b4:	2300      	movs	r3, #0
 80062b6:	9309      	str	r3, [sp, #36]	; 0x24
 80062b8:	2320      	movs	r3, #32
 80062ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062be:	f8cd 800c 	str.w	r8, [sp, #12]
 80062c2:	2330      	movs	r3, #48	; 0x30
 80062c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006488 <_vfiprintf_r+0x24c>
 80062c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062cc:	f04f 0901 	mov.w	r9, #1
 80062d0:	4623      	mov	r3, r4
 80062d2:	469a      	mov	sl, r3
 80062d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062d8:	b10a      	cbz	r2, 80062de <_vfiprintf_r+0xa2>
 80062da:	2a25      	cmp	r2, #37	; 0x25
 80062dc:	d1f9      	bne.n	80062d2 <_vfiprintf_r+0x96>
 80062de:	ebba 0b04 	subs.w	fp, sl, r4
 80062e2:	d00b      	beq.n	80062fc <_vfiprintf_r+0xc0>
 80062e4:	465b      	mov	r3, fp
 80062e6:	4622      	mov	r2, r4
 80062e8:	4629      	mov	r1, r5
 80062ea:	4630      	mov	r0, r6
 80062ec:	f7ff ff93 	bl	8006216 <__sfputs_r>
 80062f0:	3001      	adds	r0, #1
 80062f2:	f000 80aa 	beq.w	800644a <_vfiprintf_r+0x20e>
 80062f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062f8:	445a      	add	r2, fp
 80062fa:	9209      	str	r2, [sp, #36]	; 0x24
 80062fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 80a2 	beq.w	800644a <_vfiprintf_r+0x20e>
 8006306:	2300      	movs	r3, #0
 8006308:	f04f 32ff 	mov.w	r2, #4294967295
 800630c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006310:	f10a 0a01 	add.w	sl, sl, #1
 8006314:	9304      	str	r3, [sp, #16]
 8006316:	9307      	str	r3, [sp, #28]
 8006318:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800631c:	931a      	str	r3, [sp, #104]	; 0x68
 800631e:	4654      	mov	r4, sl
 8006320:	2205      	movs	r2, #5
 8006322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006326:	4858      	ldr	r0, [pc, #352]	; (8006488 <_vfiprintf_r+0x24c>)
 8006328:	f7f9 ffda 	bl	80002e0 <memchr>
 800632c:	9a04      	ldr	r2, [sp, #16]
 800632e:	b9d8      	cbnz	r0, 8006368 <_vfiprintf_r+0x12c>
 8006330:	06d1      	lsls	r1, r2, #27
 8006332:	bf44      	itt	mi
 8006334:	2320      	movmi	r3, #32
 8006336:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800633a:	0713      	lsls	r3, r2, #28
 800633c:	bf44      	itt	mi
 800633e:	232b      	movmi	r3, #43	; 0x2b
 8006340:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006344:	f89a 3000 	ldrb.w	r3, [sl]
 8006348:	2b2a      	cmp	r3, #42	; 0x2a
 800634a:	d015      	beq.n	8006378 <_vfiprintf_r+0x13c>
 800634c:	9a07      	ldr	r2, [sp, #28]
 800634e:	4654      	mov	r4, sl
 8006350:	2000      	movs	r0, #0
 8006352:	f04f 0c0a 	mov.w	ip, #10
 8006356:	4621      	mov	r1, r4
 8006358:	f811 3b01 	ldrb.w	r3, [r1], #1
 800635c:	3b30      	subs	r3, #48	; 0x30
 800635e:	2b09      	cmp	r3, #9
 8006360:	d94e      	bls.n	8006400 <_vfiprintf_r+0x1c4>
 8006362:	b1b0      	cbz	r0, 8006392 <_vfiprintf_r+0x156>
 8006364:	9207      	str	r2, [sp, #28]
 8006366:	e014      	b.n	8006392 <_vfiprintf_r+0x156>
 8006368:	eba0 0308 	sub.w	r3, r0, r8
 800636c:	fa09 f303 	lsl.w	r3, r9, r3
 8006370:	4313      	orrs	r3, r2
 8006372:	9304      	str	r3, [sp, #16]
 8006374:	46a2      	mov	sl, r4
 8006376:	e7d2      	b.n	800631e <_vfiprintf_r+0xe2>
 8006378:	9b03      	ldr	r3, [sp, #12]
 800637a:	1d19      	adds	r1, r3, #4
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	9103      	str	r1, [sp, #12]
 8006380:	2b00      	cmp	r3, #0
 8006382:	bfbb      	ittet	lt
 8006384:	425b      	neglt	r3, r3
 8006386:	f042 0202 	orrlt.w	r2, r2, #2
 800638a:	9307      	strge	r3, [sp, #28]
 800638c:	9307      	strlt	r3, [sp, #28]
 800638e:	bfb8      	it	lt
 8006390:	9204      	strlt	r2, [sp, #16]
 8006392:	7823      	ldrb	r3, [r4, #0]
 8006394:	2b2e      	cmp	r3, #46	; 0x2e
 8006396:	d10c      	bne.n	80063b2 <_vfiprintf_r+0x176>
 8006398:	7863      	ldrb	r3, [r4, #1]
 800639a:	2b2a      	cmp	r3, #42	; 0x2a
 800639c:	d135      	bne.n	800640a <_vfiprintf_r+0x1ce>
 800639e:	9b03      	ldr	r3, [sp, #12]
 80063a0:	1d1a      	adds	r2, r3, #4
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	9203      	str	r2, [sp, #12]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	bfb8      	it	lt
 80063aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80063ae:	3402      	adds	r4, #2
 80063b0:	9305      	str	r3, [sp, #20]
 80063b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006498 <_vfiprintf_r+0x25c>
 80063b6:	7821      	ldrb	r1, [r4, #0]
 80063b8:	2203      	movs	r2, #3
 80063ba:	4650      	mov	r0, sl
 80063bc:	f7f9 ff90 	bl	80002e0 <memchr>
 80063c0:	b140      	cbz	r0, 80063d4 <_vfiprintf_r+0x198>
 80063c2:	2340      	movs	r3, #64	; 0x40
 80063c4:	eba0 000a 	sub.w	r0, r0, sl
 80063c8:	fa03 f000 	lsl.w	r0, r3, r0
 80063cc:	9b04      	ldr	r3, [sp, #16]
 80063ce:	4303      	orrs	r3, r0
 80063d0:	3401      	adds	r4, #1
 80063d2:	9304      	str	r3, [sp, #16]
 80063d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063d8:	482c      	ldr	r0, [pc, #176]	; (800648c <_vfiprintf_r+0x250>)
 80063da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063de:	2206      	movs	r2, #6
 80063e0:	f7f9 ff7e 	bl	80002e0 <memchr>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	d03f      	beq.n	8006468 <_vfiprintf_r+0x22c>
 80063e8:	4b29      	ldr	r3, [pc, #164]	; (8006490 <_vfiprintf_r+0x254>)
 80063ea:	bb1b      	cbnz	r3, 8006434 <_vfiprintf_r+0x1f8>
 80063ec:	9b03      	ldr	r3, [sp, #12]
 80063ee:	3307      	adds	r3, #7
 80063f0:	f023 0307 	bic.w	r3, r3, #7
 80063f4:	3308      	adds	r3, #8
 80063f6:	9303      	str	r3, [sp, #12]
 80063f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063fa:	443b      	add	r3, r7
 80063fc:	9309      	str	r3, [sp, #36]	; 0x24
 80063fe:	e767      	b.n	80062d0 <_vfiprintf_r+0x94>
 8006400:	fb0c 3202 	mla	r2, ip, r2, r3
 8006404:	460c      	mov	r4, r1
 8006406:	2001      	movs	r0, #1
 8006408:	e7a5      	b.n	8006356 <_vfiprintf_r+0x11a>
 800640a:	2300      	movs	r3, #0
 800640c:	3401      	adds	r4, #1
 800640e:	9305      	str	r3, [sp, #20]
 8006410:	4619      	mov	r1, r3
 8006412:	f04f 0c0a 	mov.w	ip, #10
 8006416:	4620      	mov	r0, r4
 8006418:	f810 2b01 	ldrb.w	r2, [r0], #1
 800641c:	3a30      	subs	r2, #48	; 0x30
 800641e:	2a09      	cmp	r2, #9
 8006420:	d903      	bls.n	800642a <_vfiprintf_r+0x1ee>
 8006422:	2b00      	cmp	r3, #0
 8006424:	d0c5      	beq.n	80063b2 <_vfiprintf_r+0x176>
 8006426:	9105      	str	r1, [sp, #20]
 8006428:	e7c3      	b.n	80063b2 <_vfiprintf_r+0x176>
 800642a:	fb0c 2101 	mla	r1, ip, r1, r2
 800642e:	4604      	mov	r4, r0
 8006430:	2301      	movs	r3, #1
 8006432:	e7f0      	b.n	8006416 <_vfiprintf_r+0x1da>
 8006434:	ab03      	add	r3, sp, #12
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	462a      	mov	r2, r5
 800643a:	4b16      	ldr	r3, [pc, #88]	; (8006494 <_vfiprintf_r+0x258>)
 800643c:	a904      	add	r1, sp, #16
 800643e:	4630      	mov	r0, r6
 8006440:	f3af 8000 	nop.w
 8006444:	4607      	mov	r7, r0
 8006446:	1c78      	adds	r0, r7, #1
 8006448:	d1d6      	bne.n	80063f8 <_vfiprintf_r+0x1bc>
 800644a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800644c:	07d9      	lsls	r1, r3, #31
 800644e:	d405      	bmi.n	800645c <_vfiprintf_r+0x220>
 8006450:	89ab      	ldrh	r3, [r5, #12]
 8006452:	059a      	lsls	r2, r3, #22
 8006454:	d402      	bmi.n	800645c <_vfiprintf_r+0x220>
 8006456:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006458:	f7ff fe31 	bl	80060be <__retarget_lock_release_recursive>
 800645c:	89ab      	ldrh	r3, [r5, #12]
 800645e:	065b      	lsls	r3, r3, #25
 8006460:	f53f af12 	bmi.w	8006288 <_vfiprintf_r+0x4c>
 8006464:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006466:	e711      	b.n	800628c <_vfiprintf_r+0x50>
 8006468:	ab03      	add	r3, sp, #12
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	462a      	mov	r2, r5
 800646e:	4b09      	ldr	r3, [pc, #36]	; (8006494 <_vfiprintf_r+0x258>)
 8006470:	a904      	add	r1, sp, #16
 8006472:	4630      	mov	r0, r6
 8006474:	f000 f880 	bl	8006578 <_printf_i>
 8006478:	e7e4      	b.n	8006444 <_vfiprintf_r+0x208>
 800647a:	bf00      	nop
 800647c:	08006e3c 	.word	0x08006e3c
 8006480:	08006e5c 	.word	0x08006e5c
 8006484:	08006e1c 	.word	0x08006e1c
 8006488:	08006e7c 	.word	0x08006e7c
 800648c:	08006e86 	.word	0x08006e86
 8006490:	00000000 	.word	0x00000000
 8006494:	08006217 	.word	0x08006217
 8006498:	08006e82 	.word	0x08006e82

0800649c <_printf_common>:
 800649c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064a0:	4616      	mov	r6, r2
 80064a2:	4699      	mov	r9, r3
 80064a4:	688a      	ldr	r2, [r1, #8]
 80064a6:	690b      	ldr	r3, [r1, #16]
 80064a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064ac:	4293      	cmp	r3, r2
 80064ae:	bfb8      	it	lt
 80064b0:	4613      	movlt	r3, r2
 80064b2:	6033      	str	r3, [r6, #0]
 80064b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064b8:	4607      	mov	r7, r0
 80064ba:	460c      	mov	r4, r1
 80064bc:	b10a      	cbz	r2, 80064c2 <_printf_common+0x26>
 80064be:	3301      	adds	r3, #1
 80064c0:	6033      	str	r3, [r6, #0]
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	0699      	lsls	r1, r3, #26
 80064c6:	bf42      	ittt	mi
 80064c8:	6833      	ldrmi	r3, [r6, #0]
 80064ca:	3302      	addmi	r3, #2
 80064cc:	6033      	strmi	r3, [r6, #0]
 80064ce:	6825      	ldr	r5, [r4, #0]
 80064d0:	f015 0506 	ands.w	r5, r5, #6
 80064d4:	d106      	bne.n	80064e4 <_printf_common+0x48>
 80064d6:	f104 0a19 	add.w	sl, r4, #25
 80064da:	68e3      	ldr	r3, [r4, #12]
 80064dc:	6832      	ldr	r2, [r6, #0]
 80064de:	1a9b      	subs	r3, r3, r2
 80064e0:	42ab      	cmp	r3, r5
 80064e2:	dc26      	bgt.n	8006532 <_printf_common+0x96>
 80064e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064e8:	1e13      	subs	r3, r2, #0
 80064ea:	6822      	ldr	r2, [r4, #0]
 80064ec:	bf18      	it	ne
 80064ee:	2301      	movne	r3, #1
 80064f0:	0692      	lsls	r2, r2, #26
 80064f2:	d42b      	bmi.n	800654c <_printf_common+0xb0>
 80064f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064f8:	4649      	mov	r1, r9
 80064fa:	4638      	mov	r0, r7
 80064fc:	47c0      	blx	r8
 80064fe:	3001      	adds	r0, #1
 8006500:	d01e      	beq.n	8006540 <_printf_common+0xa4>
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	68e5      	ldr	r5, [r4, #12]
 8006506:	6832      	ldr	r2, [r6, #0]
 8006508:	f003 0306 	and.w	r3, r3, #6
 800650c:	2b04      	cmp	r3, #4
 800650e:	bf08      	it	eq
 8006510:	1aad      	subeq	r5, r5, r2
 8006512:	68a3      	ldr	r3, [r4, #8]
 8006514:	6922      	ldr	r2, [r4, #16]
 8006516:	bf0c      	ite	eq
 8006518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800651c:	2500      	movne	r5, #0
 800651e:	4293      	cmp	r3, r2
 8006520:	bfc4      	itt	gt
 8006522:	1a9b      	subgt	r3, r3, r2
 8006524:	18ed      	addgt	r5, r5, r3
 8006526:	2600      	movs	r6, #0
 8006528:	341a      	adds	r4, #26
 800652a:	42b5      	cmp	r5, r6
 800652c:	d11a      	bne.n	8006564 <_printf_common+0xc8>
 800652e:	2000      	movs	r0, #0
 8006530:	e008      	b.n	8006544 <_printf_common+0xa8>
 8006532:	2301      	movs	r3, #1
 8006534:	4652      	mov	r2, sl
 8006536:	4649      	mov	r1, r9
 8006538:	4638      	mov	r0, r7
 800653a:	47c0      	blx	r8
 800653c:	3001      	adds	r0, #1
 800653e:	d103      	bne.n	8006548 <_printf_common+0xac>
 8006540:	f04f 30ff 	mov.w	r0, #4294967295
 8006544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006548:	3501      	adds	r5, #1
 800654a:	e7c6      	b.n	80064da <_printf_common+0x3e>
 800654c:	18e1      	adds	r1, r4, r3
 800654e:	1c5a      	adds	r2, r3, #1
 8006550:	2030      	movs	r0, #48	; 0x30
 8006552:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006556:	4422      	add	r2, r4
 8006558:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800655c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006560:	3302      	adds	r3, #2
 8006562:	e7c7      	b.n	80064f4 <_printf_common+0x58>
 8006564:	2301      	movs	r3, #1
 8006566:	4622      	mov	r2, r4
 8006568:	4649      	mov	r1, r9
 800656a:	4638      	mov	r0, r7
 800656c:	47c0      	blx	r8
 800656e:	3001      	adds	r0, #1
 8006570:	d0e6      	beq.n	8006540 <_printf_common+0xa4>
 8006572:	3601      	adds	r6, #1
 8006574:	e7d9      	b.n	800652a <_printf_common+0x8e>
	...

08006578 <_printf_i>:
 8006578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800657c:	7e0f      	ldrb	r7, [r1, #24]
 800657e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006580:	2f78      	cmp	r7, #120	; 0x78
 8006582:	4691      	mov	r9, r2
 8006584:	4680      	mov	r8, r0
 8006586:	460c      	mov	r4, r1
 8006588:	469a      	mov	sl, r3
 800658a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800658e:	d807      	bhi.n	80065a0 <_printf_i+0x28>
 8006590:	2f62      	cmp	r7, #98	; 0x62
 8006592:	d80a      	bhi.n	80065aa <_printf_i+0x32>
 8006594:	2f00      	cmp	r7, #0
 8006596:	f000 80d8 	beq.w	800674a <_printf_i+0x1d2>
 800659a:	2f58      	cmp	r7, #88	; 0x58
 800659c:	f000 80a3 	beq.w	80066e6 <_printf_i+0x16e>
 80065a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065a8:	e03a      	b.n	8006620 <_printf_i+0xa8>
 80065aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065ae:	2b15      	cmp	r3, #21
 80065b0:	d8f6      	bhi.n	80065a0 <_printf_i+0x28>
 80065b2:	a101      	add	r1, pc, #4	; (adr r1, 80065b8 <_printf_i+0x40>)
 80065b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065b8:	08006611 	.word	0x08006611
 80065bc:	08006625 	.word	0x08006625
 80065c0:	080065a1 	.word	0x080065a1
 80065c4:	080065a1 	.word	0x080065a1
 80065c8:	080065a1 	.word	0x080065a1
 80065cc:	080065a1 	.word	0x080065a1
 80065d0:	08006625 	.word	0x08006625
 80065d4:	080065a1 	.word	0x080065a1
 80065d8:	080065a1 	.word	0x080065a1
 80065dc:	080065a1 	.word	0x080065a1
 80065e0:	080065a1 	.word	0x080065a1
 80065e4:	08006731 	.word	0x08006731
 80065e8:	08006655 	.word	0x08006655
 80065ec:	08006713 	.word	0x08006713
 80065f0:	080065a1 	.word	0x080065a1
 80065f4:	080065a1 	.word	0x080065a1
 80065f8:	08006753 	.word	0x08006753
 80065fc:	080065a1 	.word	0x080065a1
 8006600:	08006655 	.word	0x08006655
 8006604:	080065a1 	.word	0x080065a1
 8006608:	080065a1 	.word	0x080065a1
 800660c:	0800671b 	.word	0x0800671b
 8006610:	682b      	ldr	r3, [r5, #0]
 8006612:	1d1a      	adds	r2, r3, #4
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	602a      	str	r2, [r5, #0]
 8006618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800661c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006620:	2301      	movs	r3, #1
 8006622:	e0a3      	b.n	800676c <_printf_i+0x1f4>
 8006624:	6820      	ldr	r0, [r4, #0]
 8006626:	6829      	ldr	r1, [r5, #0]
 8006628:	0606      	lsls	r6, r0, #24
 800662a:	f101 0304 	add.w	r3, r1, #4
 800662e:	d50a      	bpl.n	8006646 <_printf_i+0xce>
 8006630:	680e      	ldr	r6, [r1, #0]
 8006632:	602b      	str	r3, [r5, #0]
 8006634:	2e00      	cmp	r6, #0
 8006636:	da03      	bge.n	8006640 <_printf_i+0xc8>
 8006638:	232d      	movs	r3, #45	; 0x2d
 800663a:	4276      	negs	r6, r6
 800663c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006640:	485e      	ldr	r0, [pc, #376]	; (80067bc <_printf_i+0x244>)
 8006642:	230a      	movs	r3, #10
 8006644:	e019      	b.n	800667a <_printf_i+0x102>
 8006646:	680e      	ldr	r6, [r1, #0]
 8006648:	602b      	str	r3, [r5, #0]
 800664a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800664e:	bf18      	it	ne
 8006650:	b236      	sxthne	r6, r6
 8006652:	e7ef      	b.n	8006634 <_printf_i+0xbc>
 8006654:	682b      	ldr	r3, [r5, #0]
 8006656:	6820      	ldr	r0, [r4, #0]
 8006658:	1d19      	adds	r1, r3, #4
 800665a:	6029      	str	r1, [r5, #0]
 800665c:	0601      	lsls	r1, r0, #24
 800665e:	d501      	bpl.n	8006664 <_printf_i+0xec>
 8006660:	681e      	ldr	r6, [r3, #0]
 8006662:	e002      	b.n	800666a <_printf_i+0xf2>
 8006664:	0646      	lsls	r6, r0, #25
 8006666:	d5fb      	bpl.n	8006660 <_printf_i+0xe8>
 8006668:	881e      	ldrh	r6, [r3, #0]
 800666a:	4854      	ldr	r0, [pc, #336]	; (80067bc <_printf_i+0x244>)
 800666c:	2f6f      	cmp	r7, #111	; 0x6f
 800666e:	bf0c      	ite	eq
 8006670:	2308      	moveq	r3, #8
 8006672:	230a      	movne	r3, #10
 8006674:	2100      	movs	r1, #0
 8006676:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800667a:	6865      	ldr	r5, [r4, #4]
 800667c:	60a5      	str	r5, [r4, #8]
 800667e:	2d00      	cmp	r5, #0
 8006680:	bfa2      	ittt	ge
 8006682:	6821      	ldrge	r1, [r4, #0]
 8006684:	f021 0104 	bicge.w	r1, r1, #4
 8006688:	6021      	strge	r1, [r4, #0]
 800668a:	b90e      	cbnz	r6, 8006690 <_printf_i+0x118>
 800668c:	2d00      	cmp	r5, #0
 800668e:	d04d      	beq.n	800672c <_printf_i+0x1b4>
 8006690:	4615      	mov	r5, r2
 8006692:	fbb6 f1f3 	udiv	r1, r6, r3
 8006696:	fb03 6711 	mls	r7, r3, r1, r6
 800669a:	5dc7      	ldrb	r7, [r0, r7]
 800669c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80066a0:	4637      	mov	r7, r6
 80066a2:	42bb      	cmp	r3, r7
 80066a4:	460e      	mov	r6, r1
 80066a6:	d9f4      	bls.n	8006692 <_printf_i+0x11a>
 80066a8:	2b08      	cmp	r3, #8
 80066aa:	d10b      	bne.n	80066c4 <_printf_i+0x14c>
 80066ac:	6823      	ldr	r3, [r4, #0]
 80066ae:	07de      	lsls	r6, r3, #31
 80066b0:	d508      	bpl.n	80066c4 <_printf_i+0x14c>
 80066b2:	6923      	ldr	r3, [r4, #16]
 80066b4:	6861      	ldr	r1, [r4, #4]
 80066b6:	4299      	cmp	r1, r3
 80066b8:	bfde      	ittt	le
 80066ba:	2330      	movle	r3, #48	; 0x30
 80066bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066c4:	1b52      	subs	r2, r2, r5
 80066c6:	6122      	str	r2, [r4, #16]
 80066c8:	f8cd a000 	str.w	sl, [sp]
 80066cc:	464b      	mov	r3, r9
 80066ce:	aa03      	add	r2, sp, #12
 80066d0:	4621      	mov	r1, r4
 80066d2:	4640      	mov	r0, r8
 80066d4:	f7ff fee2 	bl	800649c <_printf_common>
 80066d8:	3001      	adds	r0, #1
 80066da:	d14c      	bne.n	8006776 <_printf_i+0x1fe>
 80066dc:	f04f 30ff 	mov.w	r0, #4294967295
 80066e0:	b004      	add	sp, #16
 80066e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066e6:	4835      	ldr	r0, [pc, #212]	; (80067bc <_printf_i+0x244>)
 80066e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80066ec:	6829      	ldr	r1, [r5, #0]
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80066f4:	6029      	str	r1, [r5, #0]
 80066f6:	061d      	lsls	r5, r3, #24
 80066f8:	d514      	bpl.n	8006724 <_printf_i+0x1ac>
 80066fa:	07df      	lsls	r7, r3, #31
 80066fc:	bf44      	itt	mi
 80066fe:	f043 0320 	orrmi.w	r3, r3, #32
 8006702:	6023      	strmi	r3, [r4, #0]
 8006704:	b91e      	cbnz	r6, 800670e <_printf_i+0x196>
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	f023 0320 	bic.w	r3, r3, #32
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	2310      	movs	r3, #16
 8006710:	e7b0      	b.n	8006674 <_printf_i+0xfc>
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	f043 0320 	orr.w	r3, r3, #32
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	2378      	movs	r3, #120	; 0x78
 800671c:	4828      	ldr	r0, [pc, #160]	; (80067c0 <_printf_i+0x248>)
 800671e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006722:	e7e3      	b.n	80066ec <_printf_i+0x174>
 8006724:	0659      	lsls	r1, r3, #25
 8006726:	bf48      	it	mi
 8006728:	b2b6      	uxthmi	r6, r6
 800672a:	e7e6      	b.n	80066fa <_printf_i+0x182>
 800672c:	4615      	mov	r5, r2
 800672e:	e7bb      	b.n	80066a8 <_printf_i+0x130>
 8006730:	682b      	ldr	r3, [r5, #0]
 8006732:	6826      	ldr	r6, [r4, #0]
 8006734:	6961      	ldr	r1, [r4, #20]
 8006736:	1d18      	adds	r0, r3, #4
 8006738:	6028      	str	r0, [r5, #0]
 800673a:	0635      	lsls	r5, r6, #24
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	d501      	bpl.n	8006744 <_printf_i+0x1cc>
 8006740:	6019      	str	r1, [r3, #0]
 8006742:	e002      	b.n	800674a <_printf_i+0x1d2>
 8006744:	0670      	lsls	r0, r6, #25
 8006746:	d5fb      	bpl.n	8006740 <_printf_i+0x1c8>
 8006748:	8019      	strh	r1, [r3, #0]
 800674a:	2300      	movs	r3, #0
 800674c:	6123      	str	r3, [r4, #16]
 800674e:	4615      	mov	r5, r2
 8006750:	e7ba      	b.n	80066c8 <_printf_i+0x150>
 8006752:	682b      	ldr	r3, [r5, #0]
 8006754:	1d1a      	adds	r2, r3, #4
 8006756:	602a      	str	r2, [r5, #0]
 8006758:	681d      	ldr	r5, [r3, #0]
 800675a:	6862      	ldr	r2, [r4, #4]
 800675c:	2100      	movs	r1, #0
 800675e:	4628      	mov	r0, r5
 8006760:	f7f9 fdbe 	bl	80002e0 <memchr>
 8006764:	b108      	cbz	r0, 800676a <_printf_i+0x1f2>
 8006766:	1b40      	subs	r0, r0, r5
 8006768:	6060      	str	r0, [r4, #4]
 800676a:	6863      	ldr	r3, [r4, #4]
 800676c:	6123      	str	r3, [r4, #16]
 800676e:	2300      	movs	r3, #0
 8006770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006774:	e7a8      	b.n	80066c8 <_printf_i+0x150>
 8006776:	6923      	ldr	r3, [r4, #16]
 8006778:	462a      	mov	r2, r5
 800677a:	4649      	mov	r1, r9
 800677c:	4640      	mov	r0, r8
 800677e:	47d0      	blx	sl
 8006780:	3001      	adds	r0, #1
 8006782:	d0ab      	beq.n	80066dc <_printf_i+0x164>
 8006784:	6823      	ldr	r3, [r4, #0]
 8006786:	079b      	lsls	r3, r3, #30
 8006788:	d413      	bmi.n	80067b2 <_printf_i+0x23a>
 800678a:	68e0      	ldr	r0, [r4, #12]
 800678c:	9b03      	ldr	r3, [sp, #12]
 800678e:	4298      	cmp	r0, r3
 8006790:	bfb8      	it	lt
 8006792:	4618      	movlt	r0, r3
 8006794:	e7a4      	b.n	80066e0 <_printf_i+0x168>
 8006796:	2301      	movs	r3, #1
 8006798:	4632      	mov	r2, r6
 800679a:	4649      	mov	r1, r9
 800679c:	4640      	mov	r0, r8
 800679e:	47d0      	blx	sl
 80067a0:	3001      	adds	r0, #1
 80067a2:	d09b      	beq.n	80066dc <_printf_i+0x164>
 80067a4:	3501      	adds	r5, #1
 80067a6:	68e3      	ldr	r3, [r4, #12]
 80067a8:	9903      	ldr	r1, [sp, #12]
 80067aa:	1a5b      	subs	r3, r3, r1
 80067ac:	42ab      	cmp	r3, r5
 80067ae:	dcf2      	bgt.n	8006796 <_printf_i+0x21e>
 80067b0:	e7eb      	b.n	800678a <_printf_i+0x212>
 80067b2:	2500      	movs	r5, #0
 80067b4:	f104 0619 	add.w	r6, r4, #25
 80067b8:	e7f5      	b.n	80067a6 <_printf_i+0x22e>
 80067ba:	bf00      	nop
 80067bc:	08006e8d 	.word	0x08006e8d
 80067c0:	08006e9e 	.word	0x08006e9e

080067c4 <_sbrk_r>:
 80067c4:	b538      	push	{r3, r4, r5, lr}
 80067c6:	4d06      	ldr	r5, [pc, #24]	; (80067e0 <_sbrk_r+0x1c>)
 80067c8:	2300      	movs	r3, #0
 80067ca:	4604      	mov	r4, r0
 80067cc:	4608      	mov	r0, r1
 80067ce:	602b      	str	r3, [r5, #0]
 80067d0:	f7fa fbf6 	bl	8000fc0 <_sbrk>
 80067d4:	1c43      	adds	r3, r0, #1
 80067d6:	d102      	bne.n	80067de <_sbrk_r+0x1a>
 80067d8:	682b      	ldr	r3, [r5, #0]
 80067da:	b103      	cbz	r3, 80067de <_sbrk_r+0x1a>
 80067dc:	6023      	str	r3, [r4, #0]
 80067de:	bd38      	pop	{r3, r4, r5, pc}
 80067e0:	240001bc 	.word	0x240001bc

080067e4 <__sread>:
 80067e4:	b510      	push	{r4, lr}
 80067e6:	460c      	mov	r4, r1
 80067e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ec:	f000 fab2 	bl	8006d54 <_read_r>
 80067f0:	2800      	cmp	r0, #0
 80067f2:	bfab      	itete	ge
 80067f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80067f6:	89a3      	ldrhlt	r3, [r4, #12]
 80067f8:	181b      	addge	r3, r3, r0
 80067fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80067fe:	bfac      	ite	ge
 8006800:	6563      	strge	r3, [r4, #84]	; 0x54
 8006802:	81a3      	strhlt	r3, [r4, #12]
 8006804:	bd10      	pop	{r4, pc}

08006806 <__swrite>:
 8006806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800680a:	461f      	mov	r7, r3
 800680c:	898b      	ldrh	r3, [r1, #12]
 800680e:	05db      	lsls	r3, r3, #23
 8006810:	4605      	mov	r5, r0
 8006812:	460c      	mov	r4, r1
 8006814:	4616      	mov	r6, r2
 8006816:	d505      	bpl.n	8006824 <__swrite+0x1e>
 8006818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800681c:	2302      	movs	r3, #2
 800681e:	2200      	movs	r2, #0
 8006820:	f000 f9c8 	bl	8006bb4 <_lseek_r>
 8006824:	89a3      	ldrh	r3, [r4, #12]
 8006826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800682a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800682e:	81a3      	strh	r3, [r4, #12]
 8006830:	4632      	mov	r2, r6
 8006832:	463b      	mov	r3, r7
 8006834:	4628      	mov	r0, r5
 8006836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800683a:	f000 b869 	b.w	8006910 <_write_r>

0800683e <__sseek>:
 800683e:	b510      	push	{r4, lr}
 8006840:	460c      	mov	r4, r1
 8006842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006846:	f000 f9b5 	bl	8006bb4 <_lseek_r>
 800684a:	1c43      	adds	r3, r0, #1
 800684c:	89a3      	ldrh	r3, [r4, #12]
 800684e:	bf15      	itete	ne
 8006850:	6560      	strne	r0, [r4, #84]	; 0x54
 8006852:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006856:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800685a:	81a3      	strheq	r3, [r4, #12]
 800685c:	bf18      	it	ne
 800685e:	81a3      	strhne	r3, [r4, #12]
 8006860:	bd10      	pop	{r4, pc}

08006862 <__sclose>:
 8006862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006866:	f000 b8d3 	b.w	8006a10 <_close_r>
	...

0800686c <__swbuf_r>:
 800686c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800686e:	460e      	mov	r6, r1
 8006870:	4614      	mov	r4, r2
 8006872:	4605      	mov	r5, r0
 8006874:	b118      	cbz	r0, 800687e <__swbuf_r+0x12>
 8006876:	6983      	ldr	r3, [r0, #24]
 8006878:	b90b      	cbnz	r3, 800687e <__swbuf_r+0x12>
 800687a:	f7ff fb81 	bl	8005f80 <__sinit>
 800687e:	4b21      	ldr	r3, [pc, #132]	; (8006904 <__swbuf_r+0x98>)
 8006880:	429c      	cmp	r4, r3
 8006882:	d12b      	bne.n	80068dc <__swbuf_r+0x70>
 8006884:	686c      	ldr	r4, [r5, #4]
 8006886:	69a3      	ldr	r3, [r4, #24]
 8006888:	60a3      	str	r3, [r4, #8]
 800688a:	89a3      	ldrh	r3, [r4, #12]
 800688c:	071a      	lsls	r2, r3, #28
 800688e:	d52f      	bpl.n	80068f0 <__swbuf_r+0x84>
 8006890:	6923      	ldr	r3, [r4, #16]
 8006892:	b36b      	cbz	r3, 80068f0 <__swbuf_r+0x84>
 8006894:	6923      	ldr	r3, [r4, #16]
 8006896:	6820      	ldr	r0, [r4, #0]
 8006898:	1ac0      	subs	r0, r0, r3
 800689a:	6963      	ldr	r3, [r4, #20]
 800689c:	b2f6      	uxtb	r6, r6
 800689e:	4283      	cmp	r3, r0
 80068a0:	4637      	mov	r7, r6
 80068a2:	dc04      	bgt.n	80068ae <__swbuf_r+0x42>
 80068a4:	4621      	mov	r1, r4
 80068a6:	4628      	mov	r0, r5
 80068a8:	f000 f948 	bl	8006b3c <_fflush_r>
 80068ac:	bb30      	cbnz	r0, 80068fc <__swbuf_r+0x90>
 80068ae:	68a3      	ldr	r3, [r4, #8]
 80068b0:	3b01      	subs	r3, #1
 80068b2:	60a3      	str	r3, [r4, #8]
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	1c5a      	adds	r2, r3, #1
 80068b8:	6022      	str	r2, [r4, #0]
 80068ba:	701e      	strb	r6, [r3, #0]
 80068bc:	6963      	ldr	r3, [r4, #20]
 80068be:	3001      	adds	r0, #1
 80068c0:	4283      	cmp	r3, r0
 80068c2:	d004      	beq.n	80068ce <__swbuf_r+0x62>
 80068c4:	89a3      	ldrh	r3, [r4, #12]
 80068c6:	07db      	lsls	r3, r3, #31
 80068c8:	d506      	bpl.n	80068d8 <__swbuf_r+0x6c>
 80068ca:	2e0a      	cmp	r6, #10
 80068cc:	d104      	bne.n	80068d8 <__swbuf_r+0x6c>
 80068ce:	4621      	mov	r1, r4
 80068d0:	4628      	mov	r0, r5
 80068d2:	f000 f933 	bl	8006b3c <_fflush_r>
 80068d6:	b988      	cbnz	r0, 80068fc <__swbuf_r+0x90>
 80068d8:	4638      	mov	r0, r7
 80068da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068dc:	4b0a      	ldr	r3, [pc, #40]	; (8006908 <__swbuf_r+0x9c>)
 80068de:	429c      	cmp	r4, r3
 80068e0:	d101      	bne.n	80068e6 <__swbuf_r+0x7a>
 80068e2:	68ac      	ldr	r4, [r5, #8]
 80068e4:	e7cf      	b.n	8006886 <__swbuf_r+0x1a>
 80068e6:	4b09      	ldr	r3, [pc, #36]	; (800690c <__swbuf_r+0xa0>)
 80068e8:	429c      	cmp	r4, r3
 80068ea:	bf08      	it	eq
 80068ec:	68ec      	ldreq	r4, [r5, #12]
 80068ee:	e7ca      	b.n	8006886 <__swbuf_r+0x1a>
 80068f0:	4621      	mov	r1, r4
 80068f2:	4628      	mov	r0, r5
 80068f4:	f000 f81e 	bl	8006934 <__swsetup_r>
 80068f8:	2800      	cmp	r0, #0
 80068fa:	d0cb      	beq.n	8006894 <__swbuf_r+0x28>
 80068fc:	f04f 37ff 	mov.w	r7, #4294967295
 8006900:	e7ea      	b.n	80068d8 <__swbuf_r+0x6c>
 8006902:	bf00      	nop
 8006904:	08006e3c 	.word	0x08006e3c
 8006908:	08006e5c 	.word	0x08006e5c
 800690c:	08006e1c 	.word	0x08006e1c

08006910 <_write_r>:
 8006910:	b538      	push	{r3, r4, r5, lr}
 8006912:	4d07      	ldr	r5, [pc, #28]	; (8006930 <_write_r+0x20>)
 8006914:	4604      	mov	r4, r0
 8006916:	4608      	mov	r0, r1
 8006918:	4611      	mov	r1, r2
 800691a:	2200      	movs	r2, #0
 800691c:	602a      	str	r2, [r5, #0]
 800691e:	461a      	mov	r2, r3
 8006920:	f7fa f9cc 	bl	8000cbc <_write>
 8006924:	1c43      	adds	r3, r0, #1
 8006926:	d102      	bne.n	800692e <_write_r+0x1e>
 8006928:	682b      	ldr	r3, [r5, #0]
 800692a:	b103      	cbz	r3, 800692e <_write_r+0x1e>
 800692c:	6023      	str	r3, [r4, #0]
 800692e:	bd38      	pop	{r3, r4, r5, pc}
 8006930:	240001bc 	.word	0x240001bc

08006934 <__swsetup_r>:
 8006934:	4b32      	ldr	r3, [pc, #200]	; (8006a00 <__swsetup_r+0xcc>)
 8006936:	b570      	push	{r4, r5, r6, lr}
 8006938:	681d      	ldr	r5, [r3, #0]
 800693a:	4606      	mov	r6, r0
 800693c:	460c      	mov	r4, r1
 800693e:	b125      	cbz	r5, 800694a <__swsetup_r+0x16>
 8006940:	69ab      	ldr	r3, [r5, #24]
 8006942:	b913      	cbnz	r3, 800694a <__swsetup_r+0x16>
 8006944:	4628      	mov	r0, r5
 8006946:	f7ff fb1b 	bl	8005f80 <__sinit>
 800694a:	4b2e      	ldr	r3, [pc, #184]	; (8006a04 <__swsetup_r+0xd0>)
 800694c:	429c      	cmp	r4, r3
 800694e:	d10f      	bne.n	8006970 <__swsetup_r+0x3c>
 8006950:	686c      	ldr	r4, [r5, #4]
 8006952:	89a3      	ldrh	r3, [r4, #12]
 8006954:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006958:	0719      	lsls	r1, r3, #28
 800695a:	d42c      	bmi.n	80069b6 <__swsetup_r+0x82>
 800695c:	06dd      	lsls	r5, r3, #27
 800695e:	d411      	bmi.n	8006984 <__swsetup_r+0x50>
 8006960:	2309      	movs	r3, #9
 8006962:	6033      	str	r3, [r6, #0]
 8006964:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006968:	81a3      	strh	r3, [r4, #12]
 800696a:	f04f 30ff 	mov.w	r0, #4294967295
 800696e:	e03e      	b.n	80069ee <__swsetup_r+0xba>
 8006970:	4b25      	ldr	r3, [pc, #148]	; (8006a08 <__swsetup_r+0xd4>)
 8006972:	429c      	cmp	r4, r3
 8006974:	d101      	bne.n	800697a <__swsetup_r+0x46>
 8006976:	68ac      	ldr	r4, [r5, #8]
 8006978:	e7eb      	b.n	8006952 <__swsetup_r+0x1e>
 800697a:	4b24      	ldr	r3, [pc, #144]	; (8006a0c <__swsetup_r+0xd8>)
 800697c:	429c      	cmp	r4, r3
 800697e:	bf08      	it	eq
 8006980:	68ec      	ldreq	r4, [r5, #12]
 8006982:	e7e6      	b.n	8006952 <__swsetup_r+0x1e>
 8006984:	0758      	lsls	r0, r3, #29
 8006986:	d512      	bpl.n	80069ae <__swsetup_r+0x7a>
 8006988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800698a:	b141      	cbz	r1, 800699e <__swsetup_r+0x6a>
 800698c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006990:	4299      	cmp	r1, r3
 8006992:	d002      	beq.n	800699a <__swsetup_r+0x66>
 8006994:	4630      	mov	r0, r6
 8006996:	f000 f991 	bl	8006cbc <_free_r>
 800699a:	2300      	movs	r3, #0
 800699c:	6363      	str	r3, [r4, #52]	; 0x34
 800699e:	89a3      	ldrh	r3, [r4, #12]
 80069a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069a4:	81a3      	strh	r3, [r4, #12]
 80069a6:	2300      	movs	r3, #0
 80069a8:	6063      	str	r3, [r4, #4]
 80069aa:	6923      	ldr	r3, [r4, #16]
 80069ac:	6023      	str	r3, [r4, #0]
 80069ae:	89a3      	ldrh	r3, [r4, #12]
 80069b0:	f043 0308 	orr.w	r3, r3, #8
 80069b4:	81a3      	strh	r3, [r4, #12]
 80069b6:	6923      	ldr	r3, [r4, #16]
 80069b8:	b94b      	cbnz	r3, 80069ce <__swsetup_r+0x9a>
 80069ba:	89a3      	ldrh	r3, [r4, #12]
 80069bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069c4:	d003      	beq.n	80069ce <__swsetup_r+0x9a>
 80069c6:	4621      	mov	r1, r4
 80069c8:	4630      	mov	r0, r6
 80069ca:	f000 f92b 	bl	8006c24 <__smakebuf_r>
 80069ce:	89a0      	ldrh	r0, [r4, #12]
 80069d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069d4:	f010 0301 	ands.w	r3, r0, #1
 80069d8:	d00a      	beq.n	80069f0 <__swsetup_r+0xbc>
 80069da:	2300      	movs	r3, #0
 80069dc:	60a3      	str	r3, [r4, #8]
 80069de:	6963      	ldr	r3, [r4, #20]
 80069e0:	425b      	negs	r3, r3
 80069e2:	61a3      	str	r3, [r4, #24]
 80069e4:	6923      	ldr	r3, [r4, #16]
 80069e6:	b943      	cbnz	r3, 80069fa <__swsetup_r+0xc6>
 80069e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069ec:	d1ba      	bne.n	8006964 <__swsetup_r+0x30>
 80069ee:	bd70      	pop	{r4, r5, r6, pc}
 80069f0:	0781      	lsls	r1, r0, #30
 80069f2:	bf58      	it	pl
 80069f4:	6963      	ldrpl	r3, [r4, #20]
 80069f6:	60a3      	str	r3, [r4, #8]
 80069f8:	e7f4      	b.n	80069e4 <__swsetup_r+0xb0>
 80069fa:	2000      	movs	r0, #0
 80069fc:	e7f7      	b.n	80069ee <__swsetup_r+0xba>
 80069fe:	bf00      	nop
 8006a00:	24000010 	.word	0x24000010
 8006a04:	08006e3c 	.word	0x08006e3c
 8006a08:	08006e5c 	.word	0x08006e5c
 8006a0c:	08006e1c 	.word	0x08006e1c

08006a10 <_close_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	4d06      	ldr	r5, [pc, #24]	; (8006a2c <_close_r+0x1c>)
 8006a14:	2300      	movs	r3, #0
 8006a16:	4604      	mov	r4, r0
 8006a18:	4608      	mov	r0, r1
 8006a1a:	602b      	str	r3, [r5, #0]
 8006a1c:	f7fa fa9b 	bl	8000f56 <_close>
 8006a20:	1c43      	adds	r3, r0, #1
 8006a22:	d102      	bne.n	8006a2a <_close_r+0x1a>
 8006a24:	682b      	ldr	r3, [r5, #0]
 8006a26:	b103      	cbz	r3, 8006a2a <_close_r+0x1a>
 8006a28:	6023      	str	r3, [r4, #0]
 8006a2a:	bd38      	pop	{r3, r4, r5, pc}
 8006a2c:	240001bc 	.word	0x240001bc

08006a30 <__sflush_r>:
 8006a30:	898a      	ldrh	r2, [r1, #12]
 8006a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a36:	4605      	mov	r5, r0
 8006a38:	0710      	lsls	r0, r2, #28
 8006a3a:	460c      	mov	r4, r1
 8006a3c:	d458      	bmi.n	8006af0 <__sflush_r+0xc0>
 8006a3e:	684b      	ldr	r3, [r1, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	dc05      	bgt.n	8006a50 <__sflush_r+0x20>
 8006a44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	dc02      	bgt.n	8006a50 <__sflush_r+0x20>
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a52:	2e00      	cmp	r6, #0
 8006a54:	d0f9      	beq.n	8006a4a <__sflush_r+0x1a>
 8006a56:	2300      	movs	r3, #0
 8006a58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a5c:	682f      	ldr	r7, [r5, #0]
 8006a5e:	602b      	str	r3, [r5, #0]
 8006a60:	d032      	beq.n	8006ac8 <__sflush_r+0x98>
 8006a62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a64:	89a3      	ldrh	r3, [r4, #12]
 8006a66:	075a      	lsls	r2, r3, #29
 8006a68:	d505      	bpl.n	8006a76 <__sflush_r+0x46>
 8006a6a:	6863      	ldr	r3, [r4, #4]
 8006a6c:	1ac0      	subs	r0, r0, r3
 8006a6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a70:	b10b      	cbz	r3, 8006a76 <__sflush_r+0x46>
 8006a72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a74:	1ac0      	subs	r0, r0, r3
 8006a76:	2300      	movs	r3, #0
 8006a78:	4602      	mov	r2, r0
 8006a7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a7c:	6a21      	ldr	r1, [r4, #32]
 8006a7e:	4628      	mov	r0, r5
 8006a80:	47b0      	blx	r6
 8006a82:	1c43      	adds	r3, r0, #1
 8006a84:	89a3      	ldrh	r3, [r4, #12]
 8006a86:	d106      	bne.n	8006a96 <__sflush_r+0x66>
 8006a88:	6829      	ldr	r1, [r5, #0]
 8006a8a:	291d      	cmp	r1, #29
 8006a8c:	d82c      	bhi.n	8006ae8 <__sflush_r+0xb8>
 8006a8e:	4a2a      	ldr	r2, [pc, #168]	; (8006b38 <__sflush_r+0x108>)
 8006a90:	40ca      	lsrs	r2, r1
 8006a92:	07d6      	lsls	r6, r2, #31
 8006a94:	d528      	bpl.n	8006ae8 <__sflush_r+0xb8>
 8006a96:	2200      	movs	r2, #0
 8006a98:	6062      	str	r2, [r4, #4]
 8006a9a:	04d9      	lsls	r1, r3, #19
 8006a9c:	6922      	ldr	r2, [r4, #16]
 8006a9e:	6022      	str	r2, [r4, #0]
 8006aa0:	d504      	bpl.n	8006aac <__sflush_r+0x7c>
 8006aa2:	1c42      	adds	r2, r0, #1
 8006aa4:	d101      	bne.n	8006aaa <__sflush_r+0x7a>
 8006aa6:	682b      	ldr	r3, [r5, #0]
 8006aa8:	b903      	cbnz	r3, 8006aac <__sflush_r+0x7c>
 8006aaa:	6560      	str	r0, [r4, #84]	; 0x54
 8006aac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006aae:	602f      	str	r7, [r5, #0]
 8006ab0:	2900      	cmp	r1, #0
 8006ab2:	d0ca      	beq.n	8006a4a <__sflush_r+0x1a>
 8006ab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ab8:	4299      	cmp	r1, r3
 8006aba:	d002      	beq.n	8006ac2 <__sflush_r+0x92>
 8006abc:	4628      	mov	r0, r5
 8006abe:	f000 f8fd 	bl	8006cbc <_free_r>
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	6360      	str	r0, [r4, #52]	; 0x34
 8006ac6:	e7c1      	b.n	8006a4c <__sflush_r+0x1c>
 8006ac8:	6a21      	ldr	r1, [r4, #32]
 8006aca:	2301      	movs	r3, #1
 8006acc:	4628      	mov	r0, r5
 8006ace:	47b0      	blx	r6
 8006ad0:	1c41      	adds	r1, r0, #1
 8006ad2:	d1c7      	bne.n	8006a64 <__sflush_r+0x34>
 8006ad4:	682b      	ldr	r3, [r5, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d0c4      	beq.n	8006a64 <__sflush_r+0x34>
 8006ada:	2b1d      	cmp	r3, #29
 8006adc:	d001      	beq.n	8006ae2 <__sflush_r+0xb2>
 8006ade:	2b16      	cmp	r3, #22
 8006ae0:	d101      	bne.n	8006ae6 <__sflush_r+0xb6>
 8006ae2:	602f      	str	r7, [r5, #0]
 8006ae4:	e7b1      	b.n	8006a4a <__sflush_r+0x1a>
 8006ae6:	89a3      	ldrh	r3, [r4, #12]
 8006ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aec:	81a3      	strh	r3, [r4, #12]
 8006aee:	e7ad      	b.n	8006a4c <__sflush_r+0x1c>
 8006af0:	690f      	ldr	r7, [r1, #16]
 8006af2:	2f00      	cmp	r7, #0
 8006af4:	d0a9      	beq.n	8006a4a <__sflush_r+0x1a>
 8006af6:	0793      	lsls	r3, r2, #30
 8006af8:	680e      	ldr	r6, [r1, #0]
 8006afa:	bf08      	it	eq
 8006afc:	694b      	ldreq	r3, [r1, #20]
 8006afe:	600f      	str	r7, [r1, #0]
 8006b00:	bf18      	it	ne
 8006b02:	2300      	movne	r3, #0
 8006b04:	eba6 0807 	sub.w	r8, r6, r7
 8006b08:	608b      	str	r3, [r1, #8]
 8006b0a:	f1b8 0f00 	cmp.w	r8, #0
 8006b0e:	dd9c      	ble.n	8006a4a <__sflush_r+0x1a>
 8006b10:	6a21      	ldr	r1, [r4, #32]
 8006b12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b14:	4643      	mov	r3, r8
 8006b16:	463a      	mov	r2, r7
 8006b18:	4628      	mov	r0, r5
 8006b1a:	47b0      	blx	r6
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	dc06      	bgt.n	8006b2e <__sflush_r+0xfe>
 8006b20:	89a3      	ldrh	r3, [r4, #12]
 8006b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b26:	81a3      	strh	r3, [r4, #12]
 8006b28:	f04f 30ff 	mov.w	r0, #4294967295
 8006b2c:	e78e      	b.n	8006a4c <__sflush_r+0x1c>
 8006b2e:	4407      	add	r7, r0
 8006b30:	eba8 0800 	sub.w	r8, r8, r0
 8006b34:	e7e9      	b.n	8006b0a <__sflush_r+0xda>
 8006b36:	bf00      	nop
 8006b38:	20400001 	.word	0x20400001

08006b3c <_fflush_r>:
 8006b3c:	b538      	push	{r3, r4, r5, lr}
 8006b3e:	690b      	ldr	r3, [r1, #16]
 8006b40:	4605      	mov	r5, r0
 8006b42:	460c      	mov	r4, r1
 8006b44:	b913      	cbnz	r3, 8006b4c <_fflush_r+0x10>
 8006b46:	2500      	movs	r5, #0
 8006b48:	4628      	mov	r0, r5
 8006b4a:	bd38      	pop	{r3, r4, r5, pc}
 8006b4c:	b118      	cbz	r0, 8006b56 <_fflush_r+0x1a>
 8006b4e:	6983      	ldr	r3, [r0, #24]
 8006b50:	b90b      	cbnz	r3, 8006b56 <_fflush_r+0x1a>
 8006b52:	f7ff fa15 	bl	8005f80 <__sinit>
 8006b56:	4b14      	ldr	r3, [pc, #80]	; (8006ba8 <_fflush_r+0x6c>)
 8006b58:	429c      	cmp	r4, r3
 8006b5a:	d11b      	bne.n	8006b94 <_fflush_r+0x58>
 8006b5c:	686c      	ldr	r4, [r5, #4]
 8006b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d0ef      	beq.n	8006b46 <_fflush_r+0xa>
 8006b66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b68:	07d0      	lsls	r0, r2, #31
 8006b6a:	d404      	bmi.n	8006b76 <_fflush_r+0x3a>
 8006b6c:	0599      	lsls	r1, r3, #22
 8006b6e:	d402      	bmi.n	8006b76 <_fflush_r+0x3a>
 8006b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b72:	f7ff faa3 	bl	80060bc <__retarget_lock_acquire_recursive>
 8006b76:	4628      	mov	r0, r5
 8006b78:	4621      	mov	r1, r4
 8006b7a:	f7ff ff59 	bl	8006a30 <__sflush_r>
 8006b7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b80:	07da      	lsls	r2, r3, #31
 8006b82:	4605      	mov	r5, r0
 8006b84:	d4e0      	bmi.n	8006b48 <_fflush_r+0xc>
 8006b86:	89a3      	ldrh	r3, [r4, #12]
 8006b88:	059b      	lsls	r3, r3, #22
 8006b8a:	d4dd      	bmi.n	8006b48 <_fflush_r+0xc>
 8006b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b8e:	f7ff fa96 	bl	80060be <__retarget_lock_release_recursive>
 8006b92:	e7d9      	b.n	8006b48 <_fflush_r+0xc>
 8006b94:	4b05      	ldr	r3, [pc, #20]	; (8006bac <_fflush_r+0x70>)
 8006b96:	429c      	cmp	r4, r3
 8006b98:	d101      	bne.n	8006b9e <_fflush_r+0x62>
 8006b9a:	68ac      	ldr	r4, [r5, #8]
 8006b9c:	e7df      	b.n	8006b5e <_fflush_r+0x22>
 8006b9e:	4b04      	ldr	r3, [pc, #16]	; (8006bb0 <_fflush_r+0x74>)
 8006ba0:	429c      	cmp	r4, r3
 8006ba2:	bf08      	it	eq
 8006ba4:	68ec      	ldreq	r4, [r5, #12]
 8006ba6:	e7da      	b.n	8006b5e <_fflush_r+0x22>
 8006ba8:	08006e3c 	.word	0x08006e3c
 8006bac:	08006e5c 	.word	0x08006e5c
 8006bb0:	08006e1c 	.word	0x08006e1c

08006bb4 <_lseek_r>:
 8006bb4:	b538      	push	{r3, r4, r5, lr}
 8006bb6:	4d07      	ldr	r5, [pc, #28]	; (8006bd4 <_lseek_r+0x20>)
 8006bb8:	4604      	mov	r4, r0
 8006bba:	4608      	mov	r0, r1
 8006bbc:	4611      	mov	r1, r2
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	602a      	str	r2, [r5, #0]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	f7fa f9ee 	bl	8000fa4 <_lseek>
 8006bc8:	1c43      	adds	r3, r0, #1
 8006bca:	d102      	bne.n	8006bd2 <_lseek_r+0x1e>
 8006bcc:	682b      	ldr	r3, [r5, #0]
 8006bce:	b103      	cbz	r3, 8006bd2 <_lseek_r+0x1e>
 8006bd0:	6023      	str	r3, [r4, #0]
 8006bd2:	bd38      	pop	{r3, r4, r5, pc}
 8006bd4:	240001bc 	.word	0x240001bc

08006bd8 <__swhatbuf_r>:
 8006bd8:	b570      	push	{r4, r5, r6, lr}
 8006bda:	460e      	mov	r6, r1
 8006bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be0:	2900      	cmp	r1, #0
 8006be2:	b096      	sub	sp, #88	; 0x58
 8006be4:	4614      	mov	r4, r2
 8006be6:	461d      	mov	r5, r3
 8006be8:	da08      	bge.n	8006bfc <__swhatbuf_r+0x24>
 8006bea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	602a      	str	r2, [r5, #0]
 8006bf2:	061a      	lsls	r2, r3, #24
 8006bf4:	d410      	bmi.n	8006c18 <__swhatbuf_r+0x40>
 8006bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bfa:	e00e      	b.n	8006c1a <__swhatbuf_r+0x42>
 8006bfc:	466a      	mov	r2, sp
 8006bfe:	f000 f8bb 	bl	8006d78 <_fstat_r>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	dbf1      	blt.n	8006bea <__swhatbuf_r+0x12>
 8006c06:	9a01      	ldr	r2, [sp, #4]
 8006c08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c10:	425a      	negs	r2, r3
 8006c12:	415a      	adcs	r2, r3
 8006c14:	602a      	str	r2, [r5, #0]
 8006c16:	e7ee      	b.n	8006bf6 <__swhatbuf_r+0x1e>
 8006c18:	2340      	movs	r3, #64	; 0x40
 8006c1a:	2000      	movs	r0, #0
 8006c1c:	6023      	str	r3, [r4, #0]
 8006c1e:	b016      	add	sp, #88	; 0x58
 8006c20:	bd70      	pop	{r4, r5, r6, pc}
	...

08006c24 <__smakebuf_r>:
 8006c24:	898b      	ldrh	r3, [r1, #12]
 8006c26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c28:	079d      	lsls	r5, r3, #30
 8006c2a:	4606      	mov	r6, r0
 8006c2c:	460c      	mov	r4, r1
 8006c2e:	d507      	bpl.n	8006c40 <__smakebuf_r+0x1c>
 8006c30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c34:	6023      	str	r3, [r4, #0]
 8006c36:	6123      	str	r3, [r4, #16]
 8006c38:	2301      	movs	r3, #1
 8006c3a:	6163      	str	r3, [r4, #20]
 8006c3c:	b002      	add	sp, #8
 8006c3e:	bd70      	pop	{r4, r5, r6, pc}
 8006c40:	ab01      	add	r3, sp, #4
 8006c42:	466a      	mov	r2, sp
 8006c44:	f7ff ffc8 	bl	8006bd8 <__swhatbuf_r>
 8006c48:	9900      	ldr	r1, [sp, #0]
 8006c4a:	4605      	mov	r5, r0
 8006c4c:	4630      	mov	r0, r6
 8006c4e:	f7ff fa57 	bl	8006100 <_malloc_r>
 8006c52:	b948      	cbnz	r0, 8006c68 <__smakebuf_r+0x44>
 8006c54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c58:	059a      	lsls	r2, r3, #22
 8006c5a:	d4ef      	bmi.n	8006c3c <__smakebuf_r+0x18>
 8006c5c:	f023 0303 	bic.w	r3, r3, #3
 8006c60:	f043 0302 	orr.w	r3, r3, #2
 8006c64:	81a3      	strh	r3, [r4, #12]
 8006c66:	e7e3      	b.n	8006c30 <__smakebuf_r+0xc>
 8006c68:	4b0d      	ldr	r3, [pc, #52]	; (8006ca0 <__smakebuf_r+0x7c>)
 8006c6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c6c:	89a3      	ldrh	r3, [r4, #12]
 8006c6e:	6020      	str	r0, [r4, #0]
 8006c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c74:	81a3      	strh	r3, [r4, #12]
 8006c76:	9b00      	ldr	r3, [sp, #0]
 8006c78:	6163      	str	r3, [r4, #20]
 8006c7a:	9b01      	ldr	r3, [sp, #4]
 8006c7c:	6120      	str	r0, [r4, #16]
 8006c7e:	b15b      	cbz	r3, 8006c98 <__smakebuf_r+0x74>
 8006c80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c84:	4630      	mov	r0, r6
 8006c86:	f000 f889 	bl	8006d9c <_isatty_r>
 8006c8a:	b128      	cbz	r0, 8006c98 <__smakebuf_r+0x74>
 8006c8c:	89a3      	ldrh	r3, [r4, #12]
 8006c8e:	f023 0303 	bic.w	r3, r3, #3
 8006c92:	f043 0301 	orr.w	r3, r3, #1
 8006c96:	81a3      	strh	r3, [r4, #12]
 8006c98:	89a0      	ldrh	r0, [r4, #12]
 8006c9a:	4305      	orrs	r5, r0
 8006c9c:	81a5      	strh	r5, [r4, #12]
 8006c9e:	e7cd      	b.n	8006c3c <__smakebuf_r+0x18>
 8006ca0:	08005f19 	.word	0x08005f19

08006ca4 <__malloc_lock>:
 8006ca4:	4801      	ldr	r0, [pc, #4]	; (8006cac <__malloc_lock+0x8>)
 8006ca6:	f7ff ba09 	b.w	80060bc <__retarget_lock_acquire_recursive>
 8006caa:	bf00      	nop
 8006cac:	240001b0 	.word	0x240001b0

08006cb0 <__malloc_unlock>:
 8006cb0:	4801      	ldr	r0, [pc, #4]	; (8006cb8 <__malloc_unlock+0x8>)
 8006cb2:	f7ff ba04 	b.w	80060be <__retarget_lock_release_recursive>
 8006cb6:	bf00      	nop
 8006cb8:	240001b0 	.word	0x240001b0

08006cbc <_free_r>:
 8006cbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cbe:	2900      	cmp	r1, #0
 8006cc0:	d044      	beq.n	8006d4c <_free_r+0x90>
 8006cc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cc6:	9001      	str	r0, [sp, #4]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f1a1 0404 	sub.w	r4, r1, #4
 8006cce:	bfb8      	it	lt
 8006cd0:	18e4      	addlt	r4, r4, r3
 8006cd2:	f7ff ffe7 	bl	8006ca4 <__malloc_lock>
 8006cd6:	4a1e      	ldr	r2, [pc, #120]	; (8006d50 <_free_r+0x94>)
 8006cd8:	9801      	ldr	r0, [sp, #4]
 8006cda:	6813      	ldr	r3, [r2, #0]
 8006cdc:	b933      	cbnz	r3, 8006cec <_free_r+0x30>
 8006cde:	6063      	str	r3, [r4, #4]
 8006ce0:	6014      	str	r4, [r2, #0]
 8006ce2:	b003      	add	sp, #12
 8006ce4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ce8:	f7ff bfe2 	b.w	8006cb0 <__malloc_unlock>
 8006cec:	42a3      	cmp	r3, r4
 8006cee:	d908      	bls.n	8006d02 <_free_r+0x46>
 8006cf0:	6825      	ldr	r5, [r4, #0]
 8006cf2:	1961      	adds	r1, r4, r5
 8006cf4:	428b      	cmp	r3, r1
 8006cf6:	bf01      	itttt	eq
 8006cf8:	6819      	ldreq	r1, [r3, #0]
 8006cfa:	685b      	ldreq	r3, [r3, #4]
 8006cfc:	1949      	addeq	r1, r1, r5
 8006cfe:	6021      	streq	r1, [r4, #0]
 8006d00:	e7ed      	b.n	8006cde <_free_r+0x22>
 8006d02:	461a      	mov	r2, r3
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	b10b      	cbz	r3, 8006d0c <_free_r+0x50>
 8006d08:	42a3      	cmp	r3, r4
 8006d0a:	d9fa      	bls.n	8006d02 <_free_r+0x46>
 8006d0c:	6811      	ldr	r1, [r2, #0]
 8006d0e:	1855      	adds	r5, r2, r1
 8006d10:	42a5      	cmp	r5, r4
 8006d12:	d10b      	bne.n	8006d2c <_free_r+0x70>
 8006d14:	6824      	ldr	r4, [r4, #0]
 8006d16:	4421      	add	r1, r4
 8006d18:	1854      	adds	r4, r2, r1
 8006d1a:	42a3      	cmp	r3, r4
 8006d1c:	6011      	str	r1, [r2, #0]
 8006d1e:	d1e0      	bne.n	8006ce2 <_free_r+0x26>
 8006d20:	681c      	ldr	r4, [r3, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	6053      	str	r3, [r2, #4]
 8006d26:	4421      	add	r1, r4
 8006d28:	6011      	str	r1, [r2, #0]
 8006d2a:	e7da      	b.n	8006ce2 <_free_r+0x26>
 8006d2c:	d902      	bls.n	8006d34 <_free_r+0x78>
 8006d2e:	230c      	movs	r3, #12
 8006d30:	6003      	str	r3, [r0, #0]
 8006d32:	e7d6      	b.n	8006ce2 <_free_r+0x26>
 8006d34:	6825      	ldr	r5, [r4, #0]
 8006d36:	1961      	adds	r1, r4, r5
 8006d38:	428b      	cmp	r3, r1
 8006d3a:	bf04      	itt	eq
 8006d3c:	6819      	ldreq	r1, [r3, #0]
 8006d3e:	685b      	ldreq	r3, [r3, #4]
 8006d40:	6063      	str	r3, [r4, #4]
 8006d42:	bf04      	itt	eq
 8006d44:	1949      	addeq	r1, r1, r5
 8006d46:	6021      	streq	r1, [r4, #0]
 8006d48:	6054      	str	r4, [r2, #4]
 8006d4a:	e7ca      	b.n	8006ce2 <_free_r+0x26>
 8006d4c:	b003      	add	sp, #12
 8006d4e:	bd30      	pop	{r4, r5, pc}
 8006d50:	240001b4 	.word	0x240001b4

08006d54 <_read_r>:
 8006d54:	b538      	push	{r3, r4, r5, lr}
 8006d56:	4d07      	ldr	r5, [pc, #28]	; (8006d74 <_read_r+0x20>)
 8006d58:	4604      	mov	r4, r0
 8006d5a:	4608      	mov	r0, r1
 8006d5c:	4611      	mov	r1, r2
 8006d5e:	2200      	movs	r2, #0
 8006d60:	602a      	str	r2, [r5, #0]
 8006d62:	461a      	mov	r2, r3
 8006d64:	f7fa f8da 	bl	8000f1c <_read>
 8006d68:	1c43      	adds	r3, r0, #1
 8006d6a:	d102      	bne.n	8006d72 <_read_r+0x1e>
 8006d6c:	682b      	ldr	r3, [r5, #0]
 8006d6e:	b103      	cbz	r3, 8006d72 <_read_r+0x1e>
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	bd38      	pop	{r3, r4, r5, pc}
 8006d74:	240001bc 	.word	0x240001bc

08006d78 <_fstat_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	4d07      	ldr	r5, [pc, #28]	; (8006d98 <_fstat_r+0x20>)
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	4604      	mov	r4, r0
 8006d80:	4608      	mov	r0, r1
 8006d82:	4611      	mov	r1, r2
 8006d84:	602b      	str	r3, [r5, #0]
 8006d86:	f7fa f8f2 	bl	8000f6e <_fstat>
 8006d8a:	1c43      	adds	r3, r0, #1
 8006d8c:	d102      	bne.n	8006d94 <_fstat_r+0x1c>
 8006d8e:	682b      	ldr	r3, [r5, #0]
 8006d90:	b103      	cbz	r3, 8006d94 <_fstat_r+0x1c>
 8006d92:	6023      	str	r3, [r4, #0]
 8006d94:	bd38      	pop	{r3, r4, r5, pc}
 8006d96:	bf00      	nop
 8006d98:	240001bc 	.word	0x240001bc

08006d9c <_isatty_r>:
 8006d9c:	b538      	push	{r3, r4, r5, lr}
 8006d9e:	4d06      	ldr	r5, [pc, #24]	; (8006db8 <_isatty_r+0x1c>)
 8006da0:	2300      	movs	r3, #0
 8006da2:	4604      	mov	r4, r0
 8006da4:	4608      	mov	r0, r1
 8006da6:	602b      	str	r3, [r5, #0]
 8006da8:	f7fa f8f1 	bl	8000f8e <_isatty>
 8006dac:	1c43      	adds	r3, r0, #1
 8006dae:	d102      	bne.n	8006db6 <_isatty_r+0x1a>
 8006db0:	682b      	ldr	r3, [r5, #0]
 8006db2:	b103      	cbz	r3, 8006db6 <_isatty_r+0x1a>
 8006db4:	6023      	str	r3, [r4, #0]
 8006db6:	bd38      	pop	{r3, r4, r5, pc}
 8006db8:	240001bc 	.word	0x240001bc

08006dbc <_init>:
 8006dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dbe:	bf00      	nop
 8006dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dc2:	bc08      	pop	{r3}
 8006dc4:	469e      	mov	lr, r3
 8006dc6:	4770      	bx	lr

08006dc8 <_fini>:
 8006dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dca:	bf00      	nop
 8006dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dce:	bc08      	pop	{r3}
 8006dd0:	469e      	mov	lr, r3
 8006dd2:	4770      	bx	lr
